module com.netxforge.GenerateNetxscript

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/com/netxforge/Netxscript.xtext"
var file.extensions = "netxscript"
var projectName = "com.netxforge.netxscript"

var runtimeProject = "../${projectName}"
// Note when using GIT, there are subfolders, so customize, as xtext and xtext.ui are split.
// Go up to folders, to be in the repot.  
var uiProject = "../../Client/${projectName}.ui"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        // registerGeneratedEPackage = "com.netxforge.netxstudio.library.LibraryPackage"
        // registerGeneratedEPackage = "com.netxforge.netxstudio.operators.OperatorsPackage"
        // registerGeneratedEPackage = "com.netxforge.netxstudio.metrics.MetricsPackage"
        registerGenModelFile = "platform:/resource/com.netxforge.netxstudio.models/models/cdo/13042011/netxstudio.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${uiProject}/src-gen"
    }

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${uiProject}"
        pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = {
            uri = grammarURI
            fileExtensions = file.extensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment {}

            // generates Java API for the generated EPackages
            fragment = ecore.EcoreGeneratorFragment {
            // referencedGenModels = "
            //  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
            //  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
            // "
            }

            // Serializer 2.0
            fragment = serializer.SerializerFragment {}
            
            // the serialization component (1.0)
            // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

            // a custom ResourceFactory for use with EMF
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.extensions
            }

            // The antlr parser generator fragment.
            fragment = parser.antlr.XtextAntlrGeneratorFragment {
            //  options = {
            //      backtrack = true
            //  }
            }

            // java-based API for validation
            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            // fragment = scoping.ImportURIScopingFragment {}
            // fragment = exporting.SimpleNamesFragment {}

            // scoping and exporting API
            fragment = scoping.ImportNamespacesScopingFragment {}
            
            // CB We override the name provider, with a custom CDO name provider, so this doesn't really make sense. 
            //
            fragment = exporting.QualifiedNamesFragment {}
            fragment = builder.BuilderIntegrationFragment {}

            // generator API
            // CB JDT dependency: https://bugs.eclipse.org/bugs/show_bug.cgi?id=336217
//            fragment = generator.GeneratorFragment {
//                generateMwe = true
//                generateJavaMain = true
//            }

            // formatter API
            fragment = formatting.FormatterFragment {}

            // labeling API
            fragment = labeling.LabelProviderFragment {}

            // outline API
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment {}

            // content assist API
            fragment = contentAssist.JavaBasedContentAssistFragment {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

            // generates junit test support classes into Generator#pathTestProject
            fragment = junit.Junit4Fragment {}

            // project wizard (optional)
            // fragment = projectWizard.SimpleProjectWizardFragment {
            //      generatorProjectName = "${projectName}"
            //      modelFileExtension = file.extensions
            // }

            // provides the necessary bindings for java types integration
            // CB JDT Dependent. 
//            fragment = types.TypesGeneratorFragment {}

            //CB  JDT Dependent. generates the required bindings only if the grammar inherits from Xbase
//            fragment = xbase.XbaseGeneratorFragment {}

            // provides a preference page for template proposals
            // CB JDT Dependent, but not with custom version, also not after 2.1
            fragment = templates.CodetemplatesGeneratorFragment {}

            // rename refactoring
            // CB Not required. 
//            fragment = refactoring.RefactorElementNameFragment {}

            // provides a compare view
            //  CB Not required. 
//            fragment = compare.CompareFragment {
//                 fileExtensions = file.extensions
//            }

        }
    }
}
