/**
 * Copyright (c) ${date} NetXForge
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * 
 * Contributors:
 * Christophe Bouhier - initial API and implementation and/or initial documentation
 */
package com.netxforge.netxstudio.services.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.netxforge.netxstudio.services.util.ServicesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServicesItemProviderAdapterFactory extends ServicesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ServicesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.CFSService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CFSServiceItemProvider cfsServiceItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.CFSService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCFSServiceAdapter() {
		if (cfsServiceItemProvider == null) {
			cfsServiceItemProvider = new CFSServiceItemProvider(this);
		}

		return cfsServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.CIID} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CIIDItemProvider ciidItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.CIID}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCIIDAdapter() {
		if (ciidItemProvider == null) {
			ciidItemProvider = new CIIDItemProvider(this);
		}

		return ciidItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.DerivedResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DerivedResourceItemProvider derivedResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.DerivedResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDerivedResourceAdapter() {
		if (derivedResourceItemProvider == null) {
			derivedResourceItemProvider = new DerivedResourceItemProvider(this);
		}

		return derivedResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.DistributionEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistributionEntryItemProvider distributionEntryItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.DistributionEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistributionEntryAdapter() {
		if (distributionEntryItemProvider == null) {
			distributionEntryItemProvider = new DistributionEntryItemProvider(this);
		}

		return distributionEntryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.RFSService} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RFSServiceItemProvider rfsServiceItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.RFSService}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRFSServiceAdapter() {
		if (rfsServiceItemProvider == null) {
			rfsServiceItemProvider = new RFSServiceItemProvider(this);
		}

		return rfsServiceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.ServiceDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceDistributionItemProvider serviceDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.ServiceDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceDistributionAdapter() {
		if (serviceDistributionItemProvider == null) {
			serviceDistributionItemProvider = new ServiceDistributionItemProvider(this);
		}

		return serviceDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.ServiceForecast} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceForecastItemProvider serviceForecastItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.ServiceForecast}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceForecastAdapter() {
		if (serviceForecastItemProvider == null) {
			serviceForecastItemProvider = new ServiceForecastItemProvider(this);
		}

		return serviceForecastItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.ServiceForecastUsers} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceForecastUsersItemProvider serviceForecastUsersItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.ServiceForecastUsers}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceForecastUsersAdapter() {
		if (serviceForecastUsersItemProvider == null) {
			serviceForecastUsersItemProvider = new ServiceForecastUsersItemProvider(this);
		}

		return serviceForecastUsersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.ServiceMonitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceMonitorItemProvider serviceMonitorItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.ServiceMonitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceMonitorAdapter() {
		if (serviceMonitorItemProvider == null) {
			serviceMonitorItemProvider = new ServiceMonitorItemProvider(this);
		}

		return serviceMonitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.ServiceProfile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceProfileItemProvider serviceProfileItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.ServiceProfile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceProfileAdapter() {
		if (serviceProfileItemProvider == null) {
			serviceProfileItemProvider = new ServiceProfileItemProvider(this);
		}

		return serviceProfileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.services.ServiceUser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceUserItemProvider serviceUserItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.services.ServiceUser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceUserAdapter() {
		if (serviceUserItemProvider == null) {
			serviceUserItemProvider = new ServiceUserItemProvider(this);
		}

		return serviceUserItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cfsServiceItemProvider != null) cfsServiceItemProvider.dispose();
		if (ciidItemProvider != null) ciidItemProvider.dispose();
		if (derivedResourceItemProvider != null) derivedResourceItemProvider.dispose();
		if (distributionEntryItemProvider != null) distributionEntryItemProvider.dispose();
		if (rfsServiceItemProvider != null) rfsServiceItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (serviceDistributionItemProvider != null) serviceDistributionItemProvider.dispose();
		if (serviceForecastItemProvider != null) serviceForecastItemProvider.dispose();
		if (serviceForecastUsersItemProvider != null) serviceForecastUsersItemProvider.dispose();
		if (serviceMonitorItemProvider != null) serviceMonitorItemProvider.dispose();
		if (serviceProfileItemProvider != null) serviceProfileItemProvider.dispose();
		if (serviceUserItemProvider != null) serviceUserItemProvider.dispose();
	}

}
