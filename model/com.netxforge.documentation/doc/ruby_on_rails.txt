2.2.2 Installation on development (MacOSX): 
===========================

Note: 02092012 => Didn't manage to get rails 2.2.2 working on MacOSX Snow Leopard with mySQL 

1. Go Aptana studio plugin. 
2. Install through update manager. 
3. Install the correct rails version. For NetXForge website it's 2.2.2
4. Update local gem => sudo gem update --system
5. Install some gems to make it run: 
sudo gem install will_paginate

Oopsie: read this! : http://www.kieransenior.co.uk/2010/02/mysql-cant-connect-using-ruby-on-rails-mac-os-x-snow-leopard/
sudo gem install mysql
sudo env ARCHFLAGS="-arch x86_64" gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config 
sudo env ARCHFLAGS="-arch x86_64" gem install mysql --no-rdoc --no-ri -- --with-mysql-config=/usr/local/mysql/bin/mysql_config 


Still problems: 
1. Download xCode (App Store)
2. Install Command Line Tools (XCode -> Preferences -> Downloads)

Worked now, but new problems:

Installed version 2.7 of mysql gem with: 

sudo env ARCHFLAGS="-arch i386 -arch x86_64" gem install -v=2.7 mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config --with-mysql-dir=/usr/local/mysql

Still an error: 
dlopen(/Library/Ruby/Gems/1.8/gems/mysql-2.7/lib/mysql.bundle, 9): Library not loaded: libmysqlclient.18.dylib
  Referenced from: /Library/Ruby/Gems/1.8/gems/mysql-2.7/lib/mysql.bundle
  Reason: image not found - /Library/Ruby/Gems/1.8/gems/mysql-2.7/lib/mysql.bundle


sudo install_name_tool -change /usr/local/mysql/lib/libmysqlclient.15.dylib /usr/local/mysql/lib/libmysqlclient.15.dylib /Library/Ruby/Gems/1.8/gems/mysql-2.7/lib/mysql.bundle

sudo install_name_tool -change /usr/local/mysql/lib/mysql/libmysqlclient.15.dylib /usr/local/mysql/lib/libmysqlclient.15.dylib /Library/Ruby/Gems/1.8/gems/mysql-2.7/mysql.bundle


See also: https://blogs.oracle.com/dipol/entry/dynamic_libraries_rpath_and_mac
--------------------------------------------------------------


sudo env ARCHFLAGS="-arch i386 -arch x86_64" gem install --no-rdoc --no-ri mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config --with-mysql-dir=/usr/local/mysql


Start from scratch with rails 3.2.8 instiki
=========================================

1. Download instiki: (Clone it with)
git clone http://github.com/parasew/instiki.git location-of-Instiki/

2. get the gem bundles: 
 ruby bundle install --path vendor/bundle
 
3. Create a new rails project, based on git  
3.1 new rails project -> clone from git. (clone from local install)
3.2 The nature.  

4. Start the instiki server: 
./instiki --daemon


5. Go to a web-browser with: http://0.0.0.0:2500/
6. Configure a new web (A web is a wiki system)
netxstudio
6.1 Change the markup to textile. 

7. Populate the home page. 


Current Linode Install: 
ruby => ruby 1.9.3p194 (2012-04-20 revision 35410) [i686-linux]
gem => 1.8.24
rails => 

Install gem bundles
-------------------


root@li453-70:/home/apps/netxforge# ruby bundle install --path vendor/bundle
Fetching gem metadata from http://rubygems.org/........
Fetching gem metadata from http://rubygems.org/..
Fetching http://github.com/distler/file_signature.git
remote: Counting objects: 339, done.
remote: Compressing objects: 100% (241/241), done.
remote: Total 339 (delta 128), reused 279 (delta 68)
Receiving objects: 100% (339/339), 218.79 KiB | 390 KiB/s, done.
Resolving deltas: 100% (128/128), done.
Fetching http://github.com/distler/maruku.git
remote: Counting objects: 5150, done.
remote: Compressing objects: 100% (1416/1416), done.
remote: Total 5150 (delta 3723), reused 5075 (delta 3659)
Receiving objects: 100% (5150/5150), 1.08 MiB | 595 KiB/s, done.
Resolving deltas: 100% (3723/3723), done.
Installing rake (0.9.2.2) 
Installing RedCloth (4.2.9) with native extensions 
Installing daemons (1.0.10) 
Installing erubis (2.7.0) 
Using file_signature (1.2.0) from http://github.com/distler/file_signature.git (at master) 
Installing gem_plugin (0.2.3) 
Installing itextomml (1.4.10) with native extensions 
Installing json (1.7.5) with native extensions 
Installing nokogiri (1.5.5) with native extensions 
Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.

        /usr/local/rvm/rubies/ruby-1.9.3-p194/bin/ruby extconf.rb 
checking for libxml/parser.h... no
-----
libxml2 is missing.  please visit http://nokogiri.org/tutorials/installing_nokogiri.html for help with installing dependencies.
-----
*** extconf.rb failed ***
Could not create Makefile due to some reason, probably lack of
necessary libraries and/or headers.  Check the mkmf.log file for more
details.  You may need configuration options.

Provided configuration options:
	--with-opt-dir
	--with-opt-include
	--without-opt-include=${opt-dir}/include
	--with-opt-lib
	--without-opt-lib=${opt-dir}/lib
	--with-make-prog
	--without-make-prog
	--srcdir=.
	--curdir
	--ruby=/usr/local/rvm/rubies/ruby-1.9.3-p194/bin/ruby
	--with-zlib-dir
	--without-zlib-dir
	--with-zlib-include
	--without-zlib-include=${zlib-dir}/include
	--with-zlib-lib
	--without-zlib-lib=${zlib-dir}/lib
	--with-iconv-dir
	--without-iconv-dir
	--with-iconv-include
	--without-iconv-include=${iconv-dir}/include
	--with-iconv-lib
	--without-iconv-lib=${iconv-dir}/lib
	--with-xml2-dir
	--without-xml2-dir
	--with-xml2-include
	--without-xml2-include=${xml2-dir}/include
	--with-xml2-lib
	--without-xml2-lib=${xml2-dir}/lib
	--with-xslt-dir
	--without-xslt-dir
	--with-xslt-include
	--without-xslt-include=${xslt-dir}/include
	--with-xslt-lib
	--without-xslt-lib=${xslt-dir}/lib
	--with-libxslt-config
	--without-libxslt-config
	--with-pkg-config
	--without-pkg-config
	--with-libxml-2.0-config
	--without-libxml-2.0-config
	--with-libiconv-config
	--without-libiconv-config


Gem files will remain installed in /home/apps/netxforge/vendor/bundle/ruby/1.9.1/gems/nokogiri-1.5.5 for inspection.
Results logged to /home/apps/netxforge/vendor/bundle/ruby/1.9.1/gems/nokogiri-1.5.5/ext/nokogiri/gem_make.out
An error occurred while installing nokogiri (1.5.5), and Bundler cannot continue.
Make sure that `gem install nokogiri -v '1.5.5'` succeeds before bundling.


Fix nokogiri error, install libxml2

sudo apt-get install libxml2 libxml2-dev libxslt1-dev


GemFile etc..
==============

Rails apps, can use the bundle concept. 

http://gembundler.com/rationale.html

Basically the content of GemFile in vendor/bundle


Exporting instiki content from SQLLite 
=======================================
MySQL error when doing: 
-- -Problem, can't run bundle install, it keeps refering to mysql GEM which is actually installed by Gem. 



Creating a Rails App user
==========================

It is required to use a special users for rails apps. See: 
http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching

1) Create a user railsapp. 


Switching to mysql2. 
====================

Again the Gem can't find the mysql lib. 
So connect them together by symlinck between the 

sudo install_name_tool -change libmysqlclient.18.dylib /usr/local/mysql/lib/libmysqlclient.18.dylib  /Library/Ruby/Gems/1.8/gems/mysql2-0.3.11/lib/mysql2/mysql2.bundle
							   libmysqlclient.18.dylib


Install on Ubuntu : https://help.ubuntu.com/community/RubyOnRails#Alternative_to_manual_installation
Time: 30 minutes. 
=================

Ruby:

sudo apt-get install ruby-full build-essential
sudo aptitude install ruby build-essential libopenssl-ruby ruby1.8-dev

Better: 
Use Ruby Version Manager (RVM)
1. Get it: 
curl -L get.rvm.io | bash -s stable
(bummer)

2. Set a reference in your .bashrc (RVM is a script)
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

See below RVM. 



Apache: 

sudo apt-get install apache2 apache2-mpm-prefork apache2-prefork-dev

Config. apache: 

sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod rewrite

sudo /etc/init.d/apache2 restart

// APache configuration can be found in 
etc/apache2




sudo apt-get install mongrel

PHUSION PASSENGER INSTALL
==========================
(Run as root) see : http://www.modrails.com/documentation/Users%20guide%20Apache.html

1) gem install passenger (OK)
2) passenger-install-apache2-module (NOK) 
requires Curl apt-get install libcurl4-openssl-dev

When done, edit the Apache config file with. 


   LoadModule passenger_module /usr/local/rvm/gems/ruby-1.9.3-p194/gems/passenger-3.0.18/ext/apache2/mod_passenger.so
   PassengerRoot /usr/local/rvm/gems/ruby-1.9.3-p194/gems/passenger-3.0.18
   PassengerRuby /usr/local/rvm/wrappers/ruby-1.9.3-p194/ruby



Ruby Gem (1.8.24)
wget http://rubyforge.org/frs/download.php/76073/rubygems-1.8.24.tgz
tar -xzvf rubygems-1.8.24.tgz 
cd rubygems-1.8.24
sudo ruby setup.rb
sudo ln -s /usr/bin/gem1.8 /usr/bin/gem
sudo gem update --system


Install rails

sudo gem install rails -V (Show verbose output as it takes a while, it seems nothing happens)

Note: App is 2.2.2, so install an older version. 
gem install -v=2.2.2 rails


Gem Notes
==========

Gem is a ruby package installer. 

SHOW LOCAL GEMS => gem query --local
INSTALL => gem install -v=x.y.z. rails


RVM Notes:
==========
Ruby Version Manager. 
A GemSet is an environment for a specific combination of ruby and rails. 

== Usefull Action

(Note: for most actions, 'rvm help action-name' may provide more information.)

*usage*     :: show this usage information
version     :: show the rvm version installed in rvm_path
use         :: setup current shell to use a specific ruby version
reload      :: reload rvm source itself (useful after changing rvm source)
implode     :: (seppuku) removes the rvm installation completely.

               This means everything in $rvm_path (~/.rvm || /usr/local/rvm).

               This does not touch your profiles. However, this means that you
               must manually clean up your profiles and remove the lines which
               source RVM.
get         :: {head,stable} upgrades rvm to latest head or stable version.

               Check 'rvm help get' for more details.

               (If you experience bugs try this first with head version, then
               ask for help in #rvm on irc.freenode.net and hang around)
reset       :: remove current and stored default & system settings.

               (If you experience odd behavior try this second)
info        :: show the *current* environment information for current ruby
current     :: print the *current* ruby version and the name of any gemset
               being used.
debug       :: show info plus additional information for common issues

install     :: install one or many ruby versions

               See also: https://rvm.io/rubies/installing/
uninstall   :: uninstall one or many ruby versions, leaves their sources
remove      :: uninstall one or many ruby versions and remove their sources

migrate     :: Lets you migrate all gemsets from one ruby to another.
upgrade     :: Lets you upgrade from one version of a ruby to another, including
               migrating your gemsets semi-automatically.

wrapper     :: generates a set of wrapper executables for a given ruby with the
               specified ruby and gemset combination. Used under the hood for
               passenger support and the like.

cleanup     :: Lets you remove stale source folders / archives and other
               miscellaneous data associated with rvm.
repair      :: Lets you repair parts of your environment e.g. wrappers, env
               files and and similar files (e.g. general maintenance).
snapshot    :: Lets you backup / restore an rvm installation in a lightweight
               manner.

disk-usage  :: Tells you how much disk space rvm install is using.
tools       :: Provides general information about the ruby environment,
               primarily useful when scripting rvm.
docs        :: Tools to make installing ri and rdoc documentation easier.
rvmrc       :: Tools related to managing rvmrc trust and loading.

do          :: runs an arbitrary command against specified and/or all rubies
tests       :: runs 'rake test' across selected ruby versions
specs       :: runs 'rake spec' across selected ruby versions
monitor     :: Monitor cwd for testing, run `rake {spec,test}` on changes.

gemset      :: gemsets: https://rvm.io/gemsets/

rubygems    :: Switches the installed version of rubygems for the current ruby.

gemdir      :: display the path to the current gem directory (GEM_HOME).
srcdir      :: display the path to rvm source directory (may be yanked)

fetch       :: Performs an archive / src fetch only of the selected ruby.
list        :: show currently installed rubies, interactive output.

               https://rvm.io/rubies/list/
pkg         :: Install a dependency package {readline,iconv,zlib,openssl}

               https://rvm.io/packages/
notes       :: Display notes, with operating system specifics.

export      :: Temporarily set an environment variable in the current shell.
unexport    :: Undo changes made to the environment by 'rvm export'.
requirements  :: Shows additional OS specific dependencies/requirements for
                 building various rubies.





