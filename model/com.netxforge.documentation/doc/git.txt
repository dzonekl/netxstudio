Config
======

git config user.email "dude@dudes.com"
git config user.name "dude"


Commands
========

git status -s -uno => Show the commit status, without non-staged files. 
git commit -a -m "commit message" => Commit all with a message
git rm -r [directory] => unstage a directory, commit it next. 
git log => commit history. 
git log --stat > stat.log => commit history stats, piped to a log file. 

git filter-branch --index-filter 'git rm --cached --ignore-unmatch Rakefile' \
  --prune-empty --tag-name-filter cat -- --all
=> Clears file with name 'Rakefile' from history. 

Examples: 

library27092011_PS.xls


Clean up
========

rm -rf .git/refs/original/

$ git reflog expire --expire=now --all => Garbage expiration time. 

$ git gc --prune=now => Garbage collect.

# Counting objects: 2437, done.
# Delta compression using up to 4 threads.
# Compressing objects: 100% (1378/1378), done.
# Writing objects: 100% (2437/2437), done.
# Total 2437 (delta 1461), reused 1802 (delta 1048)

$ git gc --aggressive --prune=now
Remote
=======
git remote add origin https://github.com/dzonekl/netxstudio.git => Add to a remote. 
git push -u origin master => Push the master.  (Takes a while!). 

git remote rm origin => Remove the origin which is set when cloning
git remote show origin => Show information about a remote. 




SVN CLONE PROCEDURE
===================

Create a users file (i.e. users.txt) for mapping SVN users to GIT:

user1 = First Last Name <email@address.com>
user2 = First Last Name <email@address.com>
...
SVN will stop if it finds a missing SVN user not in the file. But after that you can update the file (make up the email adress) 
and pick-up where you left off.

Now pull the SVN data from the repo:

git svn clone --stdlayout --no-metadata -A users.txt svn://hostname/path dest_dir-tmp
This command will create a new git repo in dest_dir-tmp and start pulling the SVN repo. Note that the "--stdlayout" flag implies you have the common "trunk/branches/tags" svn layout.

If a user name is not found, update your users.txt file then:

cd dest_dir-tmp
git svn fetch
When completed, git will checkout the SVN trunk into a new branch. Any other branches are setup as remotes. You can view the other SVN branches with:

git branch -r
If you want to keep other remote branches in your repo, you want to create a local branch for each one manually. If you don't do this, the branches won't get cloned in the final step.

git checkout -b local_branch remote_branch
# it's ok if local_branch and remote_branch are the same name
Tags are imported as branches. You have to create a local branch, make a tag and delete the branch to have them as tags in git. To do it with tag "v1":

git checkout -b tag_v1 remotes/tags/v1
git checkout master
git tag v1 tag_v1
git branch -D tag_v1
Clone your GIT-SVN repo into a clean git repo:

git clone dest_dir-tmp dest_dir
rm -rf dest_dir-tmp
Finally, remove the remote from your clean git repo that points to the now deleted temp repo:

git remote rm origin


GIT INSTALL ON LINUX
====================

1. copy a git repo to /etc/opt 
2. access with ssh




