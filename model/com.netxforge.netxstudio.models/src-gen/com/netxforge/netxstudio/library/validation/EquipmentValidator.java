/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.netxforge.netxstudio.library.validation;

import org.eclipse.emf.common.util.EList;

import com.netxforge.netxstudio.generics.DiagramInfo;
import com.netxforge.netxstudio.generics.Lifecycle;
import com.netxforge.netxstudio.generics.MultiImage;
import com.netxforge.netxstudio.library.Equipment;
import com.netxforge.netxstudio.library.EquipmentGroup;
import com.netxforge.netxstudio.library.Expression;
import com.netxforge.netxstudio.library.NetXResource;
import com.netxforge.netxstudio.library.Parameter;
import com.netxforge.netxstudio.library.RedundancyType;
import com.netxforge.netxstudio.library.StateType;
import com.netxforge.netxstudio.library.Tolerance;
import com.netxforge.netxstudio.metrics.Metric;
import com.netxforge.netxstudio.operators.EquipmentRelationship;
import com.netxforge.netxstudio.protocols.Protocol;

/**
 * A sample validator interface for {@link com.netxforge.netxstudio.library.Equipment}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface EquipmentValidator {
	boolean validate();

	boolean validateLifecycle(Lifecycle value);
	boolean validateDiagrams(EList<DiagramInfo> value);
	boolean validateEquipments(EList<Equipment> value);
	boolean validateEquipmentGroups(EList<EquipmentGroup> value);
	boolean validateEquipmentResources(EList<NetXResource> value);
	boolean validateEquipmentMetricRefs(EList<Metric> value);
	boolean validateEquipmentRelationshipRefs(EList<EquipmentRelationship> value);
	boolean validateEquipmentExpressionRefs(EList<Expression> value);
	boolean validateToleranceRefs(EList<Tolerance> value);
	boolean validateProtocolRefs(EList<Protocol> value);
	boolean validateParameterRefs(EList<Parameter> value);
	boolean validateAllEquipmentResources(EList<NetXResource> value);
	boolean validateAllEquipments(EList<Equipment> value);
	boolean validateIcons(MultiImage value);
	boolean validateCount(int value);
	boolean validateDescription(String value);
	boolean validateEquipmentCode(String value);
	boolean validateEquipmentName(String value);
	boolean validatePosition(String value);
	boolean validateRedundancy(RedundancyType value);
	boolean validateState(StateType value);
}
