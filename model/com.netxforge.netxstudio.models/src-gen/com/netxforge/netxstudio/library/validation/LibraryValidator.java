/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.netxforge.netxstudio.library.validation;

import org.eclipse.emf.common.util.EList;

import com.netxforge.netxstudio.generics.Meta;
import com.netxforge.netxstudio.library.Equipment;
import com.netxforge.netxstudio.library.Expression;
import com.netxforge.netxstudio.library.Function;
import com.netxforge.netxstudio.library.NodeType;
import com.netxforge.netxstudio.library.Parameter;
import com.netxforge.netxstudio.library.Tolerance;
import com.netxforge.netxstudio.library.Unit;
import com.netxforge.netxstudio.metrics.Metric;
import com.netxforge.netxstudio.metrics.MetricSource;

/**
 * A sample validator interface for {@link com.netxforge.netxstudio.library.Library}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface LibraryValidator {
	boolean validate();

	boolean validateFunctions(EList<Function> value);
	boolean validateNodeTypes(EList<NodeType> value);
	boolean validateEquipments(EList<Equipment> value);
	boolean validateMetrics(EList<Metric> value);
	boolean validateMetricSources(EList<MetricSource> value);

	boolean validateParameters(EList<Parameter> value);
	boolean validateProtocols(EList<String> value);
	boolean validateTolerances(EList<Tolerance> value);
	boolean validateExpressions(EList<Expression> value);
	boolean validateUnits(EList<Unit> value);
	boolean validateVersion(Meta value);
	boolean validateName(String value);
}
