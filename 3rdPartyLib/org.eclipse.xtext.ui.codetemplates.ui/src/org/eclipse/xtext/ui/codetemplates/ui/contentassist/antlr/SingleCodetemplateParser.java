/*
* generated by Xtext
*/
package org.eclipse.xtext.ui.codetemplates.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipse.xtext.ui.codetemplates.services.SingleCodetemplateGrammarAccess;

public class SingleCodetemplateParser extends AbstractContentAssistParser {
	
	@Inject
	private SingleCodetemplateGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipse.xtext.ui.codetemplates.ui.contentassist.antlr.internal.InternalSingleCodetemplateParser createParser() {
		org.eclipse.xtext.ui.codetemplates.ui.contentassist.antlr.internal.InternalSingleCodetemplateParser result = new org.eclipse.xtext.ui.codetemplates.ui.contentassist.antlr.internal.InternalSingleCodetemplateParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCodetemplateAccess().getAlternatives_2(), "rule__Codetemplate__Alternatives_2");
					put(grammarAccess.getLiteralValueAccess().getAlternatives(), "rule__LiteralValue__Alternatives");
					put(grammarAccess.getTemplatePartAccess().getAlternatives(), "rule__TemplatePart__Alternatives");
					put(grammarAccess.getVariableOrDollarAccess().getAlternatives(), "rule__VariableOrDollar__Alternatives");
					put(grammarAccess.getVariableAccess().getAlternatives_2(), "rule__Variable__Alternatives_2");
					put(grammarAccess.getVariableAccess().getParametersAlternatives_2_1_4_3_0(), "rule__Variable__ParametersAlternatives_2_1_4_3_0");
					put(grammarAccess.getVariableAccess().getParametersAlternatives_2_1_4_4_3_0(), "rule__Variable__ParametersAlternatives_2_1_4_4_3_0");
					put(grammarAccess.getValidIDAccess().getAlternatives(), "rule__ValidID__Alternatives");
					put(grammarAccess.getDollarAccess().getAlternatives_1(), "rule__Dollar__Alternatives_1");
					put(grammarAccess.getCodetemplatesAccess().getGroup(), "rule__Codetemplates__Group__0");
					put(grammarAccess.getCodetemplateAccess().getGroup(), "rule__Codetemplate__Group__0");
					put(grammarAccess.getTemplateBodyWithQuotesAccess().getGroup(), "rule__TemplateBodyWithQuotes__Group__0");
					put(grammarAccess.getTemplateBodyAccess().getGroup(), "rule__TemplateBody__Group__0");
					put(grammarAccess.getTemplateBodyAccess().getGroup_2(), "rule__TemplateBody__Group_2__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_2_1(), "rule__Variable__Group_2_1__0");
					put(grammarAccess.getVariableAccess().getGroup_2_1_0(), "rule__Variable__Group_2_1_0__0");
					put(grammarAccess.getVariableAccess().getGroup_2_1_4(), "rule__Variable__Group_2_1_4__0");
					put(grammarAccess.getVariableAccess().getGroup_2_1_4_4(), "rule__Variable__Group_2_1_4_4__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getDollarAccess().getGroup(), "rule__Dollar__Group__0");
					put(grammarAccess.getCodetemplatesAccess().getLanguageAssignment_2(), "rule__Codetemplates__LanguageAssignment_2");
					put(grammarAccess.getCodetemplatesAccess().getTemplatesAssignment_3(), "rule__Codetemplates__TemplatesAssignment_3");
					put(grammarAccess.getCodetemplateAccess().getNameAssignment_0(), "rule__Codetemplate__NameAssignment_0");
					put(grammarAccess.getCodetemplateAccess().getContextAssignment_2_0(), "rule__Codetemplate__ContextAssignment_2_0");
					put(grammarAccess.getCodetemplateAccess().getKeywordContextAssignment_2_1(), "rule__Codetemplate__KeywordContextAssignment_2_1");
					put(grammarAccess.getCodetemplateAccess().getBodyAssignment_3(), "rule__Codetemplate__BodyAssignment_3");
					put(grammarAccess.getTemplateBodyAccess().getPartsAssignment_1(), "rule__TemplateBody__PartsAssignment_1");
					put(grammarAccess.getTemplateBodyAccess().getPartsAssignment_2_0(), "rule__TemplateBody__PartsAssignment_2_0");
					put(grammarAccess.getTemplateBodyAccess().getPartsAssignment_2_1(), "rule__TemplateBody__PartsAssignment_2_1");
					put(grammarAccess.getVariableAccess().getNameAssignment_2_0(), "rule__Variable__NameAssignment_2_0");
					put(grammarAccess.getVariableAccess().getNameAssignment_2_1_0_0(), "rule__Variable__NameAssignment_2_1_0_0");
					put(grammarAccess.getVariableAccess().getTypeAssignment_2_1_3(), "rule__Variable__TypeAssignment_2_1_3");
					put(grammarAccess.getVariableAccess().getParametersAssignment_2_1_4_3(), "rule__Variable__ParametersAssignment_2_1_4_3");
					put(grammarAccess.getVariableAccess().getParametersAssignment_2_1_4_4_3(), "rule__Variable__ParametersAssignment_2_1_4_4_3");
					put(grammarAccess.getLiteralAccess().getValueAssignment(), "rule__Literal__ValueAssignment");
					put(grammarAccess.getDollarAccess().getEscapedAssignment_1_0(), "rule__Dollar__EscapedAssignment_1_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipse.xtext.ui.codetemplates.ui.contentassist.antlr.internal.InternalSingleCodetemplateParser typedParser = (org.eclipse.xtext.ui.codetemplates.ui.contentassist.antlr.internal.InternalSingleCodetemplateParser) parser;
			typedParser.entryRuleCodetemplates();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS" };
	}
	
	public SingleCodetemplateGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SingleCodetemplateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
