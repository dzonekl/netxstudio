/*
* generated by Xtext
*/
package com.netxforge.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;
import com.google.inject.name.Named;
import com.netxforge.netxstudio.library.Function;
import com.netxforge.netxstudio.library.NetXResource;
import com.netxforge.netxstudio.library.Parameter;
import com.netxforge.scoping.QualifiedDynamixCDONameProvider;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class NetxscriptLabelProvider extends DefaultEObjectLabelProvider {
	
	@Inject
	@Named(QualifiedDynamixCDONameProvider.NAMED_QUALIFIED_DYNAMIX_CDO_NAME_PROVIDER)
	private IQualifiedNameProvider qualifiedNameProvider;
	
	@Inject
	public NetxscriptLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	//Labels and icons can be computed like this:
	
	String text(Parameter ele) {
	  return ele.getName() +
	  		"\n" +
	  		"\n value = " + ele.getValue();
	}
	
	String text(Function ele){
		QualifiedName qualifiedName = qualifiedNameProvider.getFullyQualifiedName(ele);
		return ele.getDescription() + "\n" + qualifiedName != null ? qualifiedName.toString() : "";
	}
	
	String text(NetXResource res){
		return res.getShortName() + "\n : " + res.getLongName();  
	}
	
	
/*	 
    String image(MyModel ele) {
      return "MyModel.gif";
    }
*/

}
