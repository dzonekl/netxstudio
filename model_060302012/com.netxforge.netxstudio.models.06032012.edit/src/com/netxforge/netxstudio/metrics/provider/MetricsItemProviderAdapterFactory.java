/**
 * Copyright (c) 2011 NetXForge
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 * 
 * Contributors:
 * Christophe Bouhier - initial API and implementation and/or initial documentation
 */
package com.netxforge.netxstudio.metrics.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.netxforge.netxstudio.metrics.util.MetricsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetricsItemProviderAdapterFactory extends MetricsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetricsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.DataKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataKindItemProvider dataKindItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.DataKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataKindAdapter() {
		if (dataKindItemProvider == null) {
			dataKindItemProvider = new DataKindItemProvider(this);
		}

		return dataKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.IdentifierDataKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifierDataKindItemProvider identifierDataKindItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.IdentifierDataKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentifierDataKindAdapter() {
		if (identifierDataKindItemProvider == null) {
			identifierDataKindItemProvider = new IdentifierDataKindItemProvider(this);
		}

		return identifierDataKindItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.Mapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingItemProvider mappingItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.Mapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingAdapter() {
		if (mappingItemProvider == null) {
			mappingItemProvider = new MappingItemProvider(this);
		}

		return mappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MappingColumn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingColumnItemProvider mappingColumnItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MappingColumn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingColumnAdapter() {
		if (mappingColumnItemProvider == null) {
			mappingColumnItemProvider = new MappingColumnItemProvider(this);
		}

		return mappingColumnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MappingCSV} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingCSVItemProvider mappingCSVItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MappingCSV}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingCSVAdapter() {
		if (mappingCSVItemProvider == null) {
			mappingCSVItemProvider = new MappingCSVItemProvider(this);
		}

		return mappingCSVItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MappingRDBMS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingRDBMSItemProvider mappingRDBMSItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MappingRDBMS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingRDBMSAdapter() {
		if (mappingRDBMSItemProvider == null) {
			mappingRDBMSItemProvider = new MappingRDBMSItemProvider(this);
		}

		return mappingRDBMSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MappingRecord} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingRecordItemProvider mappingRecordItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MappingRecord}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingRecordAdapter() {
		if (mappingRecordItemProvider == null) {
			mappingRecordItemProvider = new MappingRecordItemProvider(this);
		}

		return mappingRecordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MappingStatistic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingStatisticItemProvider mappingStatisticItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MappingStatistic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingStatisticAdapter() {
		if (mappingStatisticItemProvider == null) {
			mappingStatisticItemProvider = new MappingStatisticItemProvider(this);
		}

		return mappingStatisticItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MappingXLS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingXLSItemProvider mappingXLSItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MappingXLS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingXLSAdapter() {
		if (mappingXLSItemProvider == null) {
			mappingXLSItemProvider = new MappingXLSItemProvider(this);
		}

		return mappingXLSItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.Metric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricItemProvider metricItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.Metric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricAdapter() {
		if (metricItemProvider == null) {
			metricItemProvider = new MetricItemProvider(this);
		}

		return metricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MetricRetentionRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricRetentionRuleItemProvider metricRetentionRuleItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MetricRetentionRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricRetentionRuleAdapter() {
		if (metricRetentionRuleItemProvider == null) {
			metricRetentionRuleItemProvider = new MetricRetentionRuleItemProvider(this);
		}

		return metricRetentionRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MetricRetentionRules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricRetentionRulesItemProvider metricRetentionRulesItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MetricRetentionRules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricRetentionRulesAdapter() {
		if (metricRetentionRulesItemProvider == null) {
			metricRetentionRulesItemProvider = new MetricRetentionRulesItemProvider(this);
		}

		return metricRetentionRulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MetricSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricSourceItemProvider metricSourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MetricSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricSourceAdapter() {
		if (metricSourceItemProvider == null) {
			metricSourceItemProvider = new MetricSourceItemProvider(this);
		}

		return metricSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.MetricValueRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetricValueRangeItemProvider metricValueRangeItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.MetricValueRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetricValueRangeAdapter() {
		if (metricValueRangeItemProvider == null) {
			metricValueRangeItemProvider = new MetricValueRangeItemProvider(this);
		}

		return metricValueRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.netxforge.netxstudio.metrics.ValueDataKind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueDataKindItemProvider valueDataKindItemProvider;

	/**
	 * This creates an adapter for a {@link com.netxforge.netxstudio.metrics.ValueDataKind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueDataKindAdapter() {
		if (valueDataKindItemProvider == null) {
			valueDataKindItemProvider = new ValueDataKindItemProvider(this);
		}

		return valueDataKindItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataKindItemProvider != null) dataKindItemProvider.dispose();
		if (identifierDataKindItemProvider != null) identifierDataKindItemProvider.dispose();
		if (mappingItemProvider != null) mappingItemProvider.dispose();
		if (mappingColumnItemProvider != null) mappingColumnItemProvider.dispose();
		if (mappingCSVItemProvider != null) mappingCSVItemProvider.dispose();
		if (mappingRDBMSItemProvider != null) mappingRDBMSItemProvider.dispose();
		if (mappingRecordItemProvider != null) mappingRecordItemProvider.dispose();
		if (mappingStatisticItemProvider != null) mappingStatisticItemProvider.dispose();
		if (mappingXLSItemProvider != null) mappingXLSItemProvider.dispose();
		if (metricItemProvider != null) metricItemProvider.dispose();
		if (metricRetentionRuleItemProvider != null) metricRetentionRuleItemProvider.dispose();
		if (metricRetentionRulesItemProvider != null) metricRetentionRulesItemProvider.dispose();
		if (metricSourceItemProvider != null) metricSourceItemProvider.dispose();
		if (metricValueRangeItemProvider != null) metricValueRangeItemProvider.dispose();
		if (valueDataKindItemProvider != null) valueDataKindItemProvider.dispose();
	}

}
