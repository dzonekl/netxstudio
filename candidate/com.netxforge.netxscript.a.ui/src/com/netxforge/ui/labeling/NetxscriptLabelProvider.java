/*
 * generated by Xtext
 */
package com.netxforge.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;
import com.netxforge.netxscript.Argument;
import com.netxforge.netxscript.Div;
import com.netxforge.netxscript.Function;
import com.netxforge.netxscript.FunctionCall;
import com.netxforge.netxscript.LinkRef;
import com.netxforge.netxscript.Minus;
import com.netxforge.netxscript.Multi;
import com.netxforge.netxscript.NodeRef;
import com.netxforge.netxscript.NumberLiteral;
import com.netxforge.netxscript.Plus;
import com.netxforge.netxscript.Reference;
import com.netxforge.netxscript.ResourceRef;
import com.netxforge.netxscript.VarOrArgumentCall;
import com.netxforge.netxscript.Variable;

/**
 * Provides labels for a EObjects.
 * 
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class NetxscriptLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public NetxscriptLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:

	String text(Plus ele) {
		return "+";
	}

	String text(Minus ele) {
		return "-";
	}

	String text(Div ele) {
		return "/";
	}

	String text(Multi ele) {
		return "*";
	}

	String text(NumberLiteral ele) {
		return ele.getValue().toEngineeringString();
	}

	String text(Reference ele) {
		if (ele instanceof LinkRef) {
			return ((LinkRef) ele).getLink().getName();
		}
		if (ele instanceof NodeRef) {
			return ((NodeRef) ele).getNode().getName();
		}
		if (ele instanceof ResourceRef) {
			return ((ResourceRef) ele).getResource().getName();
		}

		return ele.getClass().getSimpleName();
	}

	String text(VarOrArgumentCall ele) {
		if (ele.getCall() instanceof Variable) {
			return "Variable Ref: " + ((Variable) ele.getCall()).getName();
		}
		if (ele.getCall() instanceof Argument) {
			return "Arg" + ((Argument) ele.getCall()).getName();
		}
		return ele.getCall().toString();
	}

	String text(FunctionCall ele) {
		return "Function Ref: " + ((Function) ele.getFunc()).getName();
	}

	String text(Function ele) {
		return "Function:" + ele.getName() + "("
				+ ele.getBlock().getStatements().size() + ")";
	}

	String text(Variable ele) {
		return "Variable:" + ele.getName();
	}

	/*
	 * String image(MyModel ele) { return "MyModel.gif"; }
	 */
}
