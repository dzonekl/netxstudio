/*
* generated by Xtext
*/
package com.netxforge.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.netxforge.services.NetxscriptGrammarAccess;

public class NetxscriptParser extends AbstractContentAssistParser {
	
	@Inject
	private NetxscriptGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.netxforge.ui.contentassist.antlr.internal.InternalNetxscriptParser createParser() {
		com.netxforge.ui.contentassist.antlr.internal.InternalNetxscriptParser result = new com.netxforge.ui.contentassist.antlr.internal.InternalNetxscriptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractVarOrArgumentAccess().getAlternatives(), "rule__AbstractVarOrArgument__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getVariableStatementAccess().getAlternatives(), "rule__VariableStatement__Alternatives");
					put(grammarAccess.getLogicalAccess().getAlternatives_1_0(), "rule__Logical__Alternatives_1_0");
					put(grammarAccess.getEqualityAccess().getAlternatives_1_0(), "rule__Equality__Alternatives_1_0");
					put(grammarAccess.getComparisonAccess().getAlternatives_1_0(), "rule__Comparison__Alternatives_1_0");
					put(grammarAccess.getAdditionAccess().getAlternatives_1_0(), "rule__Addition__Alternatives_1_0");
					put(grammarAccess.getMultiplicationAccess().getAlternatives_1_0(), "rule__Multiplication__Alternatives_1_0");
					put(grammarAccess.getUnaryAccess().getAlternatives(), "rule__Unary__Alternatives");
					put(grammarAccess.getUnaryAccess().getAlternatives_1_0(), "rule__Unary__Alternatives_1_0");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getModAccess().getGroup(), "rule__Mod__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_3(), "rule__Function__Group_3__0");
					put(grammarAccess.getFunctionAccess().getGroup_3_1(), "rule__Function__Group_3_1__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_0(), "rule__Statement__Group_0__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getVariableStatementAccess().getGroup_1(), "rule__VariableStatement__Group_1__0");
					put(grammarAccess.getLogicalAccess().getGroup(), "rule__Logical__Group__0");
					put(grammarAccess.getLogicalAccess().getGroup_1(), "rule__Logical__Group_1__0");
					put(grammarAccess.getLogicalAccess().getGroup_1_0_0(), "rule__Logical__Group_1_0_0__0");
					put(grammarAccess.getLogicalAccess().getGroup_1_0_1(), "rule__Logical__Group_1_0_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup_1_0_0(), "rule__Equality__Group_1_0_0__0");
					put(grammarAccess.getEqualityAccess().getGroup_1_0_1(), "rule__Equality__Group_1_0_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_0(), "rule__Comparison__Group_1_0_0__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_1(), "rule__Comparison__Group_1_0_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_2(), "rule__Comparison__Group_1_0_2__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_3(), "rule__Comparison__Group_1_0_3__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_0(), "rule__Addition__Group_1_0_0__0");
					put(grammarAccess.getAdditionAccess().getGroup_1_0_1(), "rule__Addition__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_0(), "rule__Multiplication__Group_1_0_0__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_1(), "rule__Multiplication__Group_1_0_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1_0_2(), "rule__Multiplication__Group_1_0_2__0");
					put(grammarAccess.getUnaryAccess().getGroup_1(), "rule__Unary__Group_1__0");
					put(grammarAccess.getUnaryAccess().getGroup_1_0_0(), "rule__Unary__Group_1_0_0__0");
					put(grammarAccess.getUnaryAccess().getGroup_1_0_1(), "rule__Unary__Group_1_0_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_3(), "rule__PrimaryExpression__Group_3__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_3_1(), "rule__FunctionCall__Group_3_1__0");
					put(grammarAccess.getVarOrArgumentCallAccess().getGroup(), "rule__VarOrArgumentCall__Group__0");
					put(grammarAccess.getNodeDepthAccess().getGroup(), "rule__NodeDepth__Group__0");
					put(grammarAccess.getNodeDepthAccess().getGroup_2(), "rule__NodeDepth__Group_2__0");
					put(grammarAccess.getModAccess().getNameAssignment_1(), "rule__Mod__NameAssignment_1");
					put(grammarAccess.getModAccess().getImportsAssignment_2(), "rule__Mod__ImportsAssignment_2");
					put(grammarAccess.getModAccess().getFunctionsAssignment_3(), "rule__Mod__FunctionsAssignment_3");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getArgsAssignment_3_0(), "rule__Function__ArgsAssignment_3_0");
					put(grammarAccess.getFunctionAccess().getArgsAssignment_3_1_1(), "rule__Function__ArgsAssignment_3_1_1");
					put(grammarAccess.getFunctionAccess().getBlockAssignment_5(), "rule__Function__BlockAssignment_5");
					put(grammarAccess.getArgumentAccess().getNameAssignment(), "rule__Argument__NameAssignment");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_2(), "rule__Block__StatementsAssignment_2");
					put(grammarAccess.getVariableStatementAccess().getExpressionAssignment_0(), "rule__VariableStatement__ExpressionAssignment_0");
					put(grammarAccess.getVariableStatementAccess().getNameAssignment_1_1(), "rule__VariableStatement__NameAssignment_1_1");
					put(grammarAccess.getVariableStatementAccess().getExpressionAssignment_1_3(), "rule__VariableStatement__ExpressionAssignment_1_3");
					put(grammarAccess.getLogicalAccess().getRightAssignment_1_1(), "rule__Logical__RightAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_1(), "rule__Equality__RightAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_1(), "rule__Comparison__RightAssignment_1_1");
					put(grammarAccess.getAdditionAccess().getRightAssignment_1_1(), "rule__Addition__RightAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1(), "rule__Multiplication__RightAssignment_1_1");
					put(grammarAccess.getUnaryAccess().getOpAssignment_1_0_0_1(), "rule__Unary__OpAssignment_1_0_0_1");
					put(grammarAccess.getUnaryAccess().getOpAssignment_1_0_1_1(), "rule__Unary__OpAssignment_1_0_1_1");
					put(grammarAccess.getUnaryAccess().getRightAssignment_1_1(), "rule__Unary__RightAssignment_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_1_1(), "rule__PrimaryExpression__ValueAssignment_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getConditionAssignment_2_1(), "rule__PrimaryExpression__ConditionAssignment_2_1");
					put(grammarAccess.getPrimaryExpressionAccess().getNodeAssignment_3_1(), "rule__PrimaryExpression__NodeAssignment_3_1");
					put(grammarAccess.getFunctionCallAccess().getFuncAssignment_1(), "rule__FunctionCall__FuncAssignment_1");
					put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0(), "rule__FunctionCall__ArgsAssignment_3_0");
					put(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1(), "rule__FunctionCall__ArgsAssignment_3_1_1");
					put(grammarAccess.getVarOrArgumentCallAccess().getCallAssignment_1(), "rule__VarOrArgumentCall__CallAssignment_1");
					put(grammarAccess.getNodeDepthAccess().getDepthAssignment_2_1(), "rule__NodeDepth__DepthAssignment_2_1");
					put(grammarAccess.getNodeDepthAccess().getResRefAssignment_4(), "rule__NodeDepth__ResRefAssignment_4");
					put(grammarAccess.getPrimaryNodeRefAccess().getNodeRefAssignment(), "rule__PrimaryNodeRef__NodeRefAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.netxforge.ui.contentassist.antlr.internal.InternalNetxscriptParser typedParser = (com.netxforge.ui.contentassist.antlr.internal.InternalNetxscriptParser) parser;
			typedParser.entryRuleMod();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public NetxscriptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(NetxscriptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
