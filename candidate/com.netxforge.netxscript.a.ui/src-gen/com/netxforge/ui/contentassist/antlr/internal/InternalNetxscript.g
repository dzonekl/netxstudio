/*
* generated by Xtext
*/
grammar InternalNetxscript;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.netxforge.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.netxforge.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.netxforge.services.NetxscriptGrammarAccess;

}

@parser::members {
 
 	private NetxscriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(NetxscriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMod
entryRuleMod 
:
{ before(grammarAccess.getModRule()); }
	 ruleMod
{ after(grammarAccess.getModRule()); } 
	 EOF 
;

// Rule Mod
ruleMod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModAccess().getGroup()); }
(rule__Mod__Group__0)
{ after(grammarAccess.getModAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgument
entryRuleArgument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAccess().getNameAssignment()); }
(rule__Argument__NameAssignment)
{ after(grammarAccess.getArgumentAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableStatement
entryRuleVariableStatement 
:
{ before(grammarAccess.getVariableStatementRule()); }
	 ruleVariableStatement
{ after(grammarAccess.getVariableStatementRule()); } 
	 EOF 
;

// Rule VariableStatement
ruleVariableStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableStatementAccess().getAlternatives()); }
(rule__VariableStatement__Alternatives)
{ after(grammarAccess.getVariableStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLogicalParserRuleCall()); }
	ruleLogical
{ after(grammarAccess.getExpressionAccess().getLogicalParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogical
entryRuleLogical 
:
{ before(grammarAccess.getLogicalRule()); }
	 ruleLogical
{ after(grammarAccess.getLogicalRule()); } 
	 EOF 
;

// Rule Logical
ruleLogical
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAccess().getGroup()); }
(rule__Logical__Group__0)
{ after(grammarAccess.getLogicalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquality
entryRuleEquality 
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityAccess().getGroup()); }
(rule__Equality__Group__0)
{ after(grammarAccess.getEqualityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnary
entryRuleUnary 
:
{ before(grammarAccess.getUnaryRule()); }
	 ruleUnary
{ after(grammarAccess.getUnaryRule()); } 
	 EOF 
;

// Rule Unary
ruleUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryAccess().getAlternatives()); }
(rule__Unary__Alternatives)
{ after(grammarAccess.getUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarOrArgumentCall
entryRuleVarOrArgumentCall 
:
{ before(grammarAccess.getVarOrArgumentCallRule()); }
	 ruleVarOrArgumentCall
{ after(grammarAccess.getVarOrArgumentCallRule()); } 
	 EOF 
;

// Rule VarOrArgumentCall
ruleVarOrArgumentCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getGroup()); }
(rule__VarOrArgumentCall__Group__0)
{ after(grammarAccess.getVarOrArgumentCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeDepth
entryRuleNodeDepth 
:
{ before(grammarAccess.getNodeDepthRule()); }
	 ruleNodeDepth
{ after(grammarAccess.getNodeDepthRule()); } 
	 EOF 
;

// Rule NodeDepth
ruleNodeDepth
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeDepthAccess().getGroup()); }
(rule__NodeDepth__Group__0)
{ after(grammarAccess.getNodeDepthAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryNodeRef
entryRulePrimaryNodeRef 
:
{ before(grammarAccess.getPrimaryNodeRefRule()); }
	 rulePrimaryNodeRef
{ after(grammarAccess.getPrimaryNodeRefRule()); } 
	 EOF 
;

// Rule PrimaryNodeRef
rulePrimaryNodeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryNodeRefAccess().getNodeRefAssignment()); }
(rule__PrimaryNodeRef__NodeRefAssignment)
{ after(grammarAccess.getPrimaryNodeRefAccess().getNodeRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_0()); }
(rule__Statement__Group_0__0)
{ after(grammarAccess.getStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGroup_1()); }
(rule__Statement__Group_1__0)
{ after(grammarAccess.getStatementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBlockParserRuleCall_2()); }
	ruleBlock
{ after(grammarAccess.getStatementAccess().getBlockParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getExpressionAssignment_0()); }
(rule__VariableStatement__ExpressionAssignment_0)
{ after(grammarAccess.getVariableStatementAccess().getExpressionAssignment_0()); }
)

    |(
{ before(grammarAccess.getVariableStatementAccess().getGroup_1()); }
(rule__VariableStatement__Group_1__0)
{ after(grammarAccess.getVariableStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getGroup_1_0_0()); }
(rule__Logical__Group_1_0_0__0)
{ after(grammarAccess.getLogicalAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getLogicalAccess().getGroup_1_0_1()); }
(rule__Logical__Group_1_0_1__0)
{ after(grammarAccess.getLogicalAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_1_0_0()); }
(rule__Equality__Group_1_0_0__0)
{ after(grammarAccess.getEqualityAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_1_0_1()); }
(rule__Equality__Group_1_0_1__0)
{ after(grammarAccess.getEqualityAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
(rule__Comparison__Group_1_0_0__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
(rule__Comparison__Group_1_0_1__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
(rule__Comparison__Group_1_0_2__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
(rule__Comparison__Group_1_0_3__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
(rule__Addition__Group_1_0_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
(rule__Addition__Group_1_0_1__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
(rule__Multiplication__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
(rule__Multiplication__Group_1_0_1__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
(rule__Multiplication__Group_1_0_2__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getUnaryAccess().getPrimaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryAccess().getGroup_1()); }
(rule__Unary__Group_1__0)
{ after(grammarAccess.getUnaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getGroup_1_0_0()); }
(rule__Unary__Group_1_0_0__0)
{ after(grammarAccess.getUnaryAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryAccess().getGroup_1_0_1()); }
(rule__Unary__Group_1_0_1__0)
{ after(grammarAccess.getUnaryAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_0()); }

	'-' 

{ after(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_1()); }

	'+' 

{ after(grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
(rule__PrimaryExpression__Group_0__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
(rule__PrimaryExpression__Group_1__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
(rule__PrimaryExpression__Group_2__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
(rule__PrimaryExpression__Group_3__0)
{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_4()); }
	ruleFunctionCall
{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getVarOrArgumentCallParserRuleCall_5()); }
	ruleVarOrArgumentCall
{ after(grammarAccess.getPrimaryExpressionAccess().getVarOrArgumentCallParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Mod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__0__Impl
	rule__Mod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getModKeyword_0()); }

	'mod' 

{ after(grammarAccess.getModAccess().getModKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__1__Impl
	rule__Mod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getNameAssignment_1()); }
(rule__Mod__NameAssignment_1)
{ after(grammarAccess.getModAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__2__Impl
	rule__Mod__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getImportsAssignment_2()); }
(rule__Mod__ImportsAssignment_2)*
{ after(grammarAccess.getModAccess().getImportsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModAccess().getFunctionsAssignment_3()); }
(rule__Mod__FunctionsAssignment_3)
{ after(grammarAccess.getModAccess().getFunctionsAssignment_3()); }
)
(
{ before(grammarAccess.getModAccess().getFunctionsAssignment_3()); }
(rule__Mod__FunctionsAssignment_3)*
{ after(grammarAccess.getModAccess().getFunctionsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDefKeyword_0()); }

	'def' 

{ after(grammarAccess.getFunctionAccess().getDefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
(rule__Function__Group_3__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getBlockAssignment_5()); }
(rule__Function__BlockAssignment_5)
{ after(grammarAccess.getFunctionAccess().getBlockAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Function__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsAssignment_3_0()); }
(rule__Function__ArgsAssignment_3_0)
{ after(grammarAccess.getFunctionAccess().getArgsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3_1()); }
(rule__Function__Group_3_1__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_1__0__Impl
	rule__Function__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsAssignment_3_1_1()); }
(rule__Function__ArgsAssignment_3_1_1)
{ after(grammarAccess.getFunctionAccess().getArgsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_1()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
(rule__Block__StatementsAssignment_2)*
{ after(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Statement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getBlankStatementAction_0_0()); }
(

)
{ after(grammarAccess.getStatementAccess().getBlankStatementAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__0__Impl
	rule__Statement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVariableStatementParserRuleCall_1_0()); }
	ruleVariableStatement
{ after(grammarAccess.getStatementAccess().getVariableStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariableStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group_1__0__Impl
	rule__VariableStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getVariableAction_1_0()); }
(

)
{ after(grammarAccess.getVariableStatementAccess().getVariableAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group_1__1__Impl
	rule__VariableStatement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getNameAssignment_1_1()); }
(rule__VariableStatement__NameAssignment_1_1)
{ after(grammarAccess.getVariableStatementAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group_1__2__Impl
	rule__VariableStatement__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getEqualsSignKeyword_1_2()); }

	'=' 

{ after(grammarAccess.getVariableStatementAccess().getEqualsSignKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getExpressionAssignment_1_3()); }
(rule__VariableStatement__ExpressionAssignment_1_3)
{ after(grammarAccess.getVariableStatementAccess().getExpressionAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Logical__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group__0__Impl
	rule__Logical__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
{ after(grammarAccess.getLogicalAccess().getEqualityParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getGroup_1()); }
(rule__Logical__Group_1__0)*
{ after(grammarAccess.getLogicalAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1__0__Impl
	rule__Logical__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getAlternatives_1_0()); }
(rule__Logical__Alternatives_1_0)
{ after(grammarAccess.getLogicalAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getRightAssignment_1_1()); }
(rule__Logical__RightAssignment_1_1)
{ after(grammarAccess.getLogicalAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_0__0__Impl
	rule__Logical__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getAndLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getLogicalAccess().getAndLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getAmpersandAmpersandKeyword_1_0_0_1()); }

	'&&' 

{ after(grammarAccess.getLogicalAccess().getAmpersandAmpersandKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_1__0__Impl
	rule__Logical__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getOrLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getLogicalAccess().getOrLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getVerticalLineVerticalLineKeyword_1_0_1_1()); }

	'||' 

{ after(grammarAccess.getLogicalAccess().getVerticalLineVerticalLineKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
(rule__Equality__Group_1__0)*
{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getAlternatives_1_0()); }
(rule__Equality__Alternatives_1_0)
{ after(grammarAccess.getEqualityAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_1()); }
(rule__Equality__RightAssignment_1_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_0__0__Impl
	rule__Equality__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getEqualLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_0_1()); }

	'==' 

{ after(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_1__0__Impl
	rule__Equality__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getUnequalLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getUnequalLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1()); }

	'!=' 

{ after(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)*
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
(rule__Comparison__Alternatives_1_0)
{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
(rule__Comparison__RightAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLesserLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getLesserLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1()); }

	'<' 

{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_1__0__Impl
	rule__Comparison__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLesserEqualLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getLesserEqualLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1()); }

	'<=' 

{ after(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_2__0__Impl
	rule__Comparison__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getGreaterLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_1()); }

	'>' 

{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_3__0__Impl
	rule__Comparison__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterEqualLeftAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getGreaterEqualLeftAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_3_1()); }

	'>=' 

{ after(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
(rule__Addition__Alternatives_1_0)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
(rule__Addition__RightAssignment_1_1)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getUnaryParserRuleCall_0()); }
	ruleUnary
{ after(grammarAccess.getMultiplicationAccess().getUnaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
(rule__Multiplication__Alternatives_1_0)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
(rule__Multiplication__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__0__Impl
	rule__Multiplication__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getModuloLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getModuloLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }

	'%' 

{ after(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1__0__Impl
	rule__Unary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getAlternatives_1_0()); }
(rule__Unary__Alternatives_1_0)
{ after(grammarAccess.getUnaryAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getRightAssignment_1_1()); }
(rule__Unary__RightAssignment_1_1)
{ after(grammarAccess.getUnaryAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unary__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_0__0__Impl
	rule__Unary__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getNegationAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getUnaryAccess().getNegationAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpAssignment_1_0_0_1()); }
(rule__Unary__OpAssignment_1_0_0_1)
{ after(grammarAccess.getUnaryAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unary__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_1__0__Impl
	rule__Unary__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getUnaryPlusMinusAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getUnaryAccess().getUnaryPlusMinusAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpAssignment_1_0_1_1()); }
(rule__Unary__OpAssignment_1_0_1_1)
{ after(grammarAccess.getUnaryAccess().getOpAssignment_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__0__Impl
	rule__PrimaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__1__Impl
	rule__PrimaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__0__Impl
	rule__PrimaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getNumberLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_1_1()); }
(rule__PrimaryExpression__ValueAssignment_1_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getBooleanLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getBooleanLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConditionAssignment_2_1()); }
(rule__PrimaryExpression__ConditionAssignment_2_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getConditionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_3__0__Impl
	rule__PrimaryExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getModelReferenceAction_3_0()); }
(

)
{ after(grammarAccess.getPrimaryExpressionAccess().getModelReferenceAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNodeAssignment_3_1()); }
(rule__PrimaryExpression__NodeAssignment_3_1)
{ after(grammarAccess.getPrimaryExpressionAccess().getNodeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
(

)
{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFuncAssignment_1()); }
(rule__FunctionCall__FuncAssignment_1)
{ after(grammarAccess.getFunctionCallAccess().getFuncAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
(rule__FunctionCall__Group_3__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0()); }
(rule__FunctionCall__ArgsAssignment_3_0)
{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
(rule__FunctionCall__Group_3_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3_1__0__Impl
	rule__FunctionCall__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1()); }
(rule__FunctionCall__ArgsAssignment_3_1_1)
{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarOrArgumentCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarOrArgumentCall__Group__0__Impl
	rule__VarOrArgumentCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOrArgumentCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getVarOrArgumentCallAction_0()); }
(

)
{ after(grammarAccess.getVarOrArgumentCallAccess().getVarOrArgumentCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarOrArgumentCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarOrArgumentCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOrArgumentCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getCallAssignment_1()); }
(rule__VarOrArgumentCall__CallAssignment_1)
{ after(grammarAccess.getVarOrArgumentCallAccess().getCallAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NodeDepth__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDepth__Group__0__Impl
	rule__NodeDepth__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getNODEKeyword_0()); }

	'NODE.' 

{ after(grammarAccess.getNodeDepthAccess().getNODEKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDepth__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDepth__Group__1__Impl
	rule__NodeDepth__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getPrimaryNodeRefParserRuleCall_1()); }
	rulePrimaryNodeRef
{ after(grammarAccess.getNodeDepthAccess().getPrimaryNodeRefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDepth__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDepth__Group__2__Impl
	rule__NodeDepth__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getGroup_2()); }
(rule__NodeDepth__Group_2__0)*
{ after(grammarAccess.getNodeDepthAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDepth__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDepth__Group__3__Impl
	rule__NodeDepth__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getNodeDepthAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDepth__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDepth__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getResRefAssignment_4()); }
(rule__NodeDepth__ResRefAssignment_4)
{ after(grammarAccess.getNodeDepthAccess().getResRefAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__NodeDepth__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDepth__Group_2__0__Impl
	rule__NodeDepth__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getFullStopKeyword_2_0()); }

	'.' 

{ after(grammarAccess.getNodeDepthAccess().getFullStopKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeDepth__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeDepth__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getDepthAssignment_2_1()); }
(rule__NodeDepth__DepthAssignment_2_1)
{ after(grammarAccess.getNodeDepthAccess().getDepthAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Mod__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getModAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__ImportsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getImportsImportParserRuleCall_2_0()); }
	ruleImport{ after(grammarAccess.getModAccess().getImportsImportParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__FunctionsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getFunctionsFunctionParserRuleCall_3_0()); }
	ruleFunction{ after(grammarAccess.getModAccess().getFunctionsFunctionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_0_0()); }
	ruleArgument{ after(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_1_1_0()); }
	ruleArgument{ after(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BlockAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_5_0()); }
	ruleBlock{ after(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getExpressionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getVariableStatementAccess().getExpressionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getNameIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getVariableStatementAccess().getNameIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__ExpressionAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getExpressionExpressionParserRuleCall_1_3_0()); }
	ruleExpression{ after(grammarAccess.getVariableStatementAccess().getExpressionExpressionParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getRightEqualityParserRuleCall_1_1_0()); }
	ruleEquality{ after(grammarAccess.getLogicalAccess().getRightEqualityParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_0()); }
	ruleComparison{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); }
	ruleAddition{ after(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightUnaryParserRuleCall_1_1_0()); }
	ruleUnary{ after(grammarAccess.getMultiplicationAccess().getRightUnaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }

	'!' 

{ after(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OpAssignment_1_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpUnaryOperatorParserRuleCall_1_0_1_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryAccess().getOpUnaryOperatorParserRuleCall_1_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getRightUnaryParserRuleCall_1_1_0()); }
	ruleUnary{ after(grammarAccess.getUnaryAccess().getRightUnaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getValueNUMBERTerminalRuleCall_1_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getPrimaryExpressionAccess().getValueNUMBERTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__ConditionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getConditionBOOLEANTerminalRuleCall_2_1_0()); }
	RULE_BOOLEAN{ after(grammarAccess.getPrimaryExpressionAccess().getConditionBOOLEANTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__NodeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getNodeNodeDepthParserRuleCall_3_1_0()); }
	ruleNodeDepth{ after(grammarAccess.getPrimaryExpressionAccess().getNodeNodeDepthParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FuncAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionCrossReference_1_0()); }
(
{ before(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarOrArgumentCall__CallAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentCrossReference_1_0()); }
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__DepthAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getDepthPrimaryNodeRefParserRuleCall_2_1_0()); }
	rulePrimaryNodeRef{ after(grammarAccess.getNodeDepthAccess().getDepthPrimaryNodeRefParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeDepth__ResRefAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeDepthAccess().getResRefResourceCrossReference_4_0()); }
(
{ before(grammarAccess.getNodeDepthAccess().getResRefResourceIDTerminalRuleCall_4_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeDepthAccess().getResRefResourceIDTerminalRuleCall_4_0_1()); }
)
{ after(grammarAccess.getNodeDepthAccess().getResRefResourceCrossReference_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryNodeRef__NodeRefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryNodeRefAccess().getNodeRefNodeCrossReference_0()); }
(
{ before(grammarAccess.getPrimaryNodeRefAccess().getNodeRefNodeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getPrimaryNodeRefAccess().getNodeRefNodeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getPrimaryNodeRefAccess().getNodeRefNodeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_BOOLEAN : ('true'|'false');

RULE_INT : 'this one has been deactivated';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


