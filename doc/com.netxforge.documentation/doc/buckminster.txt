Releng Setup
============

Under user jenkins (su jenkins, cd ~) jobs can exist. Each project will have a jobs/[job name]/.
2 jobs are defined: 


netxstudio.updatesite
netxstudio.product


Important! 
Eclipse update sites are found here: http://wiki.eclipse.org/Eclipse_Project_Update_Sites



We use buckminster to create the build, the buckminster activities are triggered
from jenkins. 

Job 1. Build everything in our git repository (Job name: netxstudio.updatesite):  
================================================================================

The idea here is to build a P2 site, from which other jobs can build the client, server etc... products. 

1) First our components from .git are fetched and put in the jenkins workspace.
2_ Next, we execute a buckminster query, which sets the target platform path to be netxstudio.git.p2/netxstudio_target, 
and executes a component query on a feature component which includes all sub features in our system.
- The buckminster script then builds (Our component??). 
- Finally it "performs" an action on the com.netxforge.netxstudio.updatesite.feature, named site.p2

Here is the script: 

setpref targetPlatformPath=${WORKSPACE}/netxstudio_target
import -Dtarget.os=* -Dtarget.ws=* -Dtarget.arch=* ${WORKSPACE}/releng/com.netxforge.netxstudio.everything.feature/site.cquery
build
perform -Q -Dtarget.os=* -Dtarget.ws=* -Dtarget.arch=* -Dcbi.include.source=false com.netxforge.netxstudio.updatesite.feature#site.p2

explanation
===========
(1) "setpref" => Sets the target platform path. 
(2) "import" => loads our cquery file 
(3) build => build action on our buckminster compoment. (The everything feature). 
(4) Perfom => perform a component action, creae a p2 site, using the category.xml file in the .updatesite.feature 

1) feature which contains everything. 
com.netxforge.netxstudio.everything.feature

Note: removed from 
   <plugin
         id="org.eclipse.equinox.http"
         download-size="0"
         install-size="0"
         version="0.0.0"
         unpack="false"/>

   <plugin
         id="org.eclipse.equinox.servletbridge"
         download-size="0"
         install-size="0"
         version="0.0.0"
         unpack="false"/>

2) Copy all .product dependencies (Feature based product) to a feature. 
Include the product feature to the everything feature. 

3) site.rmap -> Tells buckminster where resources are located: 

Syntax: 

See bucky book Chapter 4.

Example:  
<searchPath name="dash">
    <provider readerType="cvs"
        componentTypes="osgi.bundle,eclipse.feature,buckminster"
        mutable="true"
        source="true">
        <uri format=":pserver:anonymous@dev.eclipse.org:/cvsroot/technology,org.eclipse.dash/{0}">
            <property key="buckminster.component" />
        </uri>
    </provider>
</searchPath>
<locator searchPathRef="dash" pattern="^org\.eclipse\.eclipsemonkey([\.\-].+)?"/>
<locator searchPathRef="dash" pattern="^org\.eclipse\.dash(\..+)?" />
<locator searchPathRef="dash" pattern="^org\.mozilla\.rhino" />

A search path is declared and named “dash”.
Then, look at the locators — the search path “dash” is reused by all the locators. 
Different patterns are needed to match the different component names found in the dash repository. 
In case you are wondering about the patterns; org.eclipse.dash.somepart.hello could be the name of a component.

A provider is declared with a ‘cvs’ reader type
The component types are declared — we are interested in OSGi bundles (plugins, and plain bundles), eclipse features, 
and components that use Buckminster meta data.
The attribute mutable is set to true because we want searches for mutable source (i.e. projects checked out from CVS 
that can be worked on and checked in again) to also use this search path. Note that in this example we are using an anonymous user so in order to be able to actually check things in again, someone with write access would have to use the IDE’s team CVS functionality to relocate the projects with their user id once they have been materialized to the workspace. You will see later how to create entries using authentication — see the section called “Providers and authentication”.
The attribute source is set to true because we do want the source (as opposed to some binary incarnation of the component — we are perhaps even running an older version of the component). The uri specifies the location of the component name under the org.eclipse.dash root in the eclipse technology project’s CVS repository. Note the {0} at the end, which specifies the use of a parameter.
The property buckminster.component, (which always contains the name of the component currently being looked up), is used as an argument to the uri in .
Creating a RMAP

A resource map is defined in an XML file. The extension ‘.rmap’ is used to make it decorated with the appropriate icon when handling this file in eclipse.
You can naturally start by copying an existing RMAP that contains something similar to what you want, or you can start from scratch.
The Buckminster User Interface, has defined New File Wizards for the Buckminster artifacts. So you
can use File → New → Other... → Buckminster → Resource Map file to create a ‘new_rmap.rmap’ in a project of your choice. The created file contains XML name space declarations, but is otherwise empty.
Once the file has been created, it is opened for editing.
1the XML name space declarations, and use have been omitted to increase readability.

In our case: 
3.1) Look Local for resources in 
	- models
	- ui common
	- server
	- lib
	
3.2) Look for eclipse resources in
	- various repositories for our eclipse dependencies. 
	It's important to build against tested releases, for now this is the releases 
	as part of eclipse 3.7 for EMF, CDO, GEF, XTEXT etc......
	
	Current definition: 
	
	eclipse 3.7 milestones. => Change to eclipse 3.7 (http://ftp.halifax.rwth-aachen.de/eclipse/eclipse/updates/3.7milestones/)
	eclipse Indigo => Propably remove, instead of 3.7 (http://ftp.halifax.rwth-aachen.de/eclipse/releases/indigo/201105060900/)
	orbit => Update to official orbit repo. (http://ftp.halifax.rwth-aachen.de/eclipse/tools/orbit/downloads/drops/R20100519200754/repository/)
	cdo => Update to 4.1. http://download.eclipse.org/modeling/emf/cdo/updates/4.0-integration
	
	<rm:searchPath name="eclipse-org">
    <rm:provider componentTypes="buckminster,osgi.bundle,eclipse.feature" readerType="p2" mutable="false">
      <rm:property key="buckminster.mutable" value="false"/>
      <rm:uri format="http://ftp.halifax.rwth-aachen.de/eclipse/eclipse/updates/3.7milestones/"/>
    </rm:provider>
    <rm:provider componentTypes="buckminster,osgi.bundle,eclipse.feature" readerType="p2" source="false" mutable="false">
      <rm:property key="buckminster.source" value="false"/>
      <rm:property key="buckminster.mutable" value="false"/>
      <rm:uri format="http://ftp.halifax.rwth-aachen.de/eclipse/releases/indigo/201105060900/"/>
    </rm:provider>
    <rm:provider componentTypes="buckminster,osgi.bundle,eclipse.feature" readerType="p2" source="false" mutable="false">
      <rm:property key="buckminster.source" value="false"/>
      <rm:property key="buckminster.mutable" value="false"/>
      <rm:uri format="http://ftp.halifax.rwth-aachen.de/eclipse/tools/orbit/downloads/drops/R20100519200754/repository/"/>
    </rm:provider>
    <rm:provider componentTypes="buckminster,osgi.bundle,eclipse.feature" readerType="p2" source="false" mutable="false">
      <rm:property key="buckminster.source" value="false"/>
      <rm:property key="buckminster.mutable" value="false"/>
      <rm:uri format="http://ftp.halifax.rwth-aachen.de/eclipse/modeling/tmf/updates/milestones/"/>
    </rm:provider>
    <rm:provider componentTypes="buckminster,osgi.bundle,eclipse.feature" readerType="p2" source="false" mutable="false">
      <rm:property key="buckminster.source" value="false"/>
      <rm:property key="buckminster.mutable" value="false"/>
      <rm:uri format="http://download.eclipse.org/modeling/emf/cdo/updates/4.0-integration"/>
    </rm:provider>
  </rm:searchPath>
	
	
4) site.cquery

See the bucky book Chapter 5. 

4.1) Our query for building a p2 site for all our features.  
com.netxforge.netxstudio.everything.feature/site.cquery

<?xml version="1.0" encoding="UTF-8"?>
<cq:componentQuery xmlns:cq="http://www.eclipse.org/buckminster/CQuery-1.0" resourceMap="site.rmap">
    <cq:rootRequest name="com.netxforge.netxstudio.everything.feature" componentType="eclipse.feature"/>
    <cq:advisorNode namePattern="org.eclipse.jdt.core$" useTargetPlatform="false" versionOverride="[3.7.0.v_B22,3.7.0.v_B22]"/>
    <cq:advisorNode namePattern=".*" useTargetPlatform="false"/>
</cq:componentQuery>

Advisor nodes:

Allow custom handling of a component when querying. (cquery parlant).
This is special tuning. 


5) Using the .rmap and .cquery editors in eclipse. 

See Chapter 4 & 5 in the bucky book. 
Note: 

When running a component query (cquery) in the editor i.e
"Resolve to wizard" the worspace will be relative to the IDE workspace 


6) Component definitions .CSPEC & .CSPECX 

See the buck book Chapter 6.

CSPEC's include the actions which can be performed. 

Setting an RCP app in Buckminster (http://wiki.eclipse.org/Building_an_RCP_application_with_hudson_%28Buckminster%29)
==================================