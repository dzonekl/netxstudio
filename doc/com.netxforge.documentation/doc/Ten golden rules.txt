
Final release check
===================

1. Do not expose non API classes! Mark them internal. You won't get confused on similar class names
like Activator. 

2. Plugin ID in Manifest, and literal in the activator should be the same.

3. Match plugin name, plugin id and base package. Put the Activator in a package [plugin.id].internal

4. Don't forget to put plugin.xml in build.properties. (For non UI plugins, it's not done by default!)

5. Call logging from it's own plugin Activator. Add log custom pattern*

6. Register an OSGI service for exposed functionality.  (See OSGi docs), Using a singleton is not 
recommended. 

7. always check plugin.xml for warnings! 
(Declared bundle services will have sometime references to classes, this is not noticed by the plugin 
dependency validations).




* Custom pattern: 

public static void logError(String error) {
		logError(error, null);
	}

	public static void logError(String error, Throwable throwable) {
		if (error == null && throwable != null) {
			error = throwable.getMessage();
		}
		getDefault().getLog().log(
				new org.eclipse.core.runtime.Status(
						org.eclipse.core.runtime.IStatus.ERROR,
						Activator.PLUGIN_ID,
						org.eclipse.core.runtime.IStatus.OK, error, throwable));
		debug(error, throwable);
	}

	public static void logWarning(String error) {
		logError(error, null);
	}

	public static void logWarning(String error, Throwable throwable) {
		if (error == null && throwable != null) {
			error = throwable.getMessage();
		}
		getDefault().getLog().log(
				new org.eclipse.core.runtime.Status(
						org.eclipse.core.runtime.IStatus.WARNING,
						Activator.PLUGIN_ID,
						org.eclipse.core.runtime.IStatus.OK, error, throwable));
		debug(error, throwable);
	}

	public static void logInfo(String message) {
		logInfo(message, null);
	}

	public static void logInfo(String message, Throwable throwable) {
		if (message == null && throwable != null) {
			message = throwable.getMessage();
		}
		getDefault()
				.getLog()
				.log(new org.eclipse.core.runtime.Status(
						org.eclipse.core.runtime.IStatus.INFO,
						Activator.PLUGIN_ID,
						org.eclipse.core.runtime.IStatus.OK, message, throwable));
		debug(message, throwable);
	}

	private static void debug(String message, Throwable throwable) {
		if (!getDefault().isDebugging()) {
			return;
		}
		if (message != null) {
			System.err.println(message);
		}
		if (throwable != null) {
			throwable.printStackTrace();
		}
	}

  