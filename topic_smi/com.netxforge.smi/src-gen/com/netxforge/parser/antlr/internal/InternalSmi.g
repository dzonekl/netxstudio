/*
* generated by Xtext
*/
grammar InternalSmi;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.netxforge.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.netxforge.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.netxforge.services.SmiGrammarAccess;

}

@parser::members {

 	private SmiGrammarAccess grammarAccess;
 	
    public InternalSmiParser(TokenStream input, SmiGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected SmiGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_MODULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getModuleAccess().getIdMODULE_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_1='DEFINITIONS' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getDEFINITIONSKeyword_1());
    }
	otherlv_2='::=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getColonColonEqualsSignKeyword_2());
    }
	otherlv_3='BEGIN' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getBEGINKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getAssignmentsAssignmentParserRuleCall_4_0()); 
	    }
		lv_assignments_4_0=ruleAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"assignments",
        		lv_assignments_4_0, 
        		"Assignment");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='END' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleAccess().getENDKeyword_5());
    }
)
;





// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	 iv_ruleAssignment=ruleAssignment 
	 { $current=$iv_ruleAssignment.current; } 
	 EOF 
;

// Rule Assignment
ruleAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getMacrosMacroParserRuleCall_0_0()); 
	    }
		lv_macros_0_0=ruleMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		set(
       			$current, 
       			"macros",
        		lv_macros_0_0, 
        		"Macro");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentAccess().getTypesValueAssignmentParserRuleCall_1_0()); 
	    }
		lv_types_1_0=ruleValueAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_1_0, 
        		"ValueAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getAssignmentAccess().getObjectIdentifierParserRuleCall_2()); 
    }
    this_ObjectIdentifier_2=ruleObjectIdentifier
    { 
        $current = $this_ObjectIdentifier_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMacro
entryRuleMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroRule()); }
	 iv_ruleMacro=ruleMacro 
	 { $current=$iv_ruleMacro.current; } 
	 EOF 
;

// Rule Macro
ruleMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getDescriptorMacroDescriptorParserRuleCall_0_0()); 
	    }
		lv_descriptor_0_0=ruleMacroDescriptor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		set(
       			$current, 
       			"descriptor",
        		lv_descriptor_0_0, 
        		"MacroDescriptor");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='MACRO' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacroAccess().getMACROKeyword_1());
    }
	otherlv_2='::=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMacroAccess().getColonColonEqualsSignKeyword_2());
    }
	otherlv_3='BEGIN' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacroAccess().getBEGINKeyword_3());
    }
	otherlv_4='TYPE NOTATION' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMacroAccess().getTYPENOTATIONKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getMacroAccess().getTypeNotationsValueAssignmentCrossReference_5_0()); 
	}

)
)+	otherlv_6='VALUE NOTATION' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMacroAccess().getVALUENOTATIONKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getValueNotationMacroValueParserRuleCall_7_0()); 
	    }
		lv_valueNotation_7_0=ruleMacroValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		set(
       			$current, 
       			"valueNotation",
        		lv_valueNotation_7_0, 
        		"MacroValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getInnerTypesValueAssignmentParserRuleCall_8_0()); 
	    }
		lv_innerTypes_8_0=ruleValueAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		add(
       			$current, 
       			"innerTypes",
        		lv_innerTypes_8_0, 
        		"ValueAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_9='END' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMacroAccess().getENDKeyword_9());
    }
)
;





// Entry rule entryRuleMacroDescriptor
entryRuleMacroDescriptor returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroDescriptorRule()); } 
	 iv_ruleMacroDescriptor=ruleMacroDescriptor 
	 { $current=$iv_ruleMacroDescriptor.current.getText(); }  
	 EOF 
;

// Rule MacroDescriptor
ruleMacroDescriptor returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_MODULE_ID_0=RULE_MODULE_ID    {
		$current.merge(this_MODULE_ID_0);
    }

    { 
    newLeafNode(this_MODULE_ID_0, grammarAccess.getMacroDescriptorAccess().getMODULE_IDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleMacroValue
entryRuleMacroValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroValueRule()); }
	 iv_ruleMacroValue=ruleMacroValue 
	 { $current=$iv_ruleMacroValue.current; } 
	 EOF 
;

// Rule MacroValue
ruleMacroValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMacroValueAccess().getMacroValueAction_0(),
            $current);
    }
)	otherlv_1='value(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacroValueAccess().getValueKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroValueAccess().getTypeMACRO_VALUE_TYPEEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleMACRO_VALUE_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroValueRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"MACRO_VALUE_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_ANY_OTHER_3=RULE_ANY_OTHER
    { 
    newLeafNode(this_ANY_OTHER_3, grammarAccess.getMacroValueAccess().getANY_OTHERTerminalRuleCall_3()); 
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMacroValueAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleValueAssignment
entryRuleValueAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueAssignmentRule()); }
	 iv_ruleValueAssignment=ruleValueAssignment 
	 { $current=$iv_ruleValueAssignment.current; } 
	 EOF 
;

// Rule ValueAssignment
ruleValueAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_typeReference_0_0=RULE_MODULE_ID
		{
			newLeafNode(lv_typeReference_0_0, grammarAccess.getValueAssignmentAccess().getTypeReferenceMODULE_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typeReference",
        		lv_typeReference_0_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_1='::=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValueAssignmentAccess().getColonColonEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAssignmentAccess().getValueOrParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getValueTypeParserRuleCall_0()); 
    }
    this_ValueType_0=ruleValueType
    { 
        $current = $this_ValueType_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightValueTypeParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleValueType
entryRuleValueType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueTypeRule()); }
	 iv_ruleValueType=ruleValueType 
	 { $current=$iv_ruleValueType.current; } 
	 EOF 
;

// Rule ValueType
ruleValueType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_IA5STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getValueTypeAccess().getNameIA5STRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"IA5STRING");
	    }

)
)?((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueTypeRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getValueTypeAccess().getTypeValueAssignmentCrossReference_1_0_0()); 
	}

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getSimpleTypeASN1_TYPEParserRuleCall_1_1_0()); 
	    }
		lv_simpleType_2_0=ruleASN1_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"simpleType",
        		lv_simpleType_2_0, 
        		"ASN1_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleASN1_TYPE
entryRuleASN1_TYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_TYPERule()); }
	 iv_ruleASN1_TYPE=ruleASN1_TYPE 
	 { $current=$iv_ruleASN1_TYPE.current; } 
	 EOF 
;

// Rule ASN1_TYPE
ruleASN1_TYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getASN1_TYPEAccess().getASN1_SIMPLEParserRuleCall_0()); 
    }
    this_ASN1_SIMPLE_0=ruleASN1_SIMPLE
    { 
        $current = $this_ASN1_SIMPLE_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getASN1_TYPEAccess().getASN1_CHOICEParserRuleCall_1()); 
    }
    this_ASN1_CHOICE_1=ruleASN1_CHOICE
    { 
        $current = $this_ASN1_CHOICE_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleASN1_SIMPLE
entryRuleASN1_SIMPLE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_SIMPLERule()); }
	 iv_ruleASN1_SIMPLE=ruleASN1_SIMPLE 
	 { $current=$iv_ruleASN1_SIMPLE.current; } 
	 EOF 
;

// Rule ASN1_SIMPLE
ruleASN1_SIMPLE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_SIMPLEAccess().getASN1_SIMPLEAction_0_0(),
            $current);
    }
)this_IA5STRING_1=RULE_IA5STRING
    { 
    newLeafNode(this_IA5STRING_1, grammarAccess.getASN1_SIMPLEAccess().getIA5STRINGTerminalRuleCall_0_1()); 
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getASN1_OCTET_STRINGParserRuleCall_1()); 
    }
    this_ASN1_OCTET_STRING_2=ruleASN1_OCTET_STRING
    { 
        $current = $this_ASN1_OCTET_STRING_2.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getASN1_INTEGERParserRuleCall_2_0()); 
    }
    this_ASN1_INTEGER_3=ruleASN1_INTEGER
    { 
        $current = $this_ASN1_INTEGER_3.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getASN1_SIMPLEAccess().getLeftParenthesisKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getConstraintASN1_SUBTYPEParserRuleCall_2_1_1_0()); 
	    }
		lv_constraint_5_0=ruleASN1_SUBTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SIMPLERule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_5_0, 
        		"ASN1_SUBTYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getASN1_SIMPLEAccess().getRightParenthesisKeyword_2_1_2());
    }
)?))
;





// Entry rule entryRuleASN1_OCTET_STRING
entryRuleASN1_OCTET_STRING returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_OCTET_STRINGRule()); }
	 iv_ruleASN1_OCTET_STRING=ruleASN1_OCTET_STRING 
	 { $current=$iv_ruleASN1_OCTET_STRING.current; } 
	 EOF 
;

// Rule ASN1_OCTET_STRING
ruleASN1_OCTET_STRING returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_OCTET_STRINGAccess().getASN1_OCTET_STRINGAction_0(),
            $current);
    }
)	otherlv_1='OCTET STRING' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_OCTET_STRINGAccess().getOCTETSTRINGKeyword_1());
    }
	otherlv_2='TODO defintions.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getASN1_OCTET_STRINGAccess().getTODODefintionsKeyword_2());
    }
)
;





// Entry rule entryRuleASN1_INTEGER
entryRuleASN1_INTEGER returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_INTEGERRule()); }
	 iv_ruleASN1_INTEGER=ruleASN1_INTEGER 
	 { $current=$iv_ruleASN1_INTEGER.current; } 
	 EOF 
;

// Rule ASN1_INTEGER
ruleASN1_INTEGER returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='INTEGER' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_INTEGERAccess().getINTEGERKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_INTEGERAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_INTEGERAccess().getValuePairsASN1_VALUEPAIRParserRuleCall_2_0()); 
	    }
		lv_valuePairs_2_0=ruleASN1_VALUEPAIR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_INTEGERRule());
	        }
       		add(
       			$current, 
       			"valuePairs",
        		lv_valuePairs_2_0, 
        		"ASN1_VALUEPAIR");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_INTEGERAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleASN1_VALUEPAIR
entryRuleASN1_VALUEPAIR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_VALUEPAIRRule()); } 
	 iv_ruleASN1_VALUEPAIR=ruleASN1_VALUEPAIR 
	 { $current=$iv_ruleASN1_VALUEPAIR.current.getText(); }  
	 EOF 
;

// Rule ASN1_VALUEPAIR
ruleASN1_VALUEPAIR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getASN1_VALUEPAIRAccess().getIDTerminalRuleCall_0()); 
    }
)?
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASN1_VALUEPAIRAccess().getLeftParenthesisKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getASN1_VALUEPAIRAccess().getINTTerminalRuleCall_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASN1_VALUEPAIRAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleASN1_CHOICE
entryRuleASN1_CHOICE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_CHOICERule()); }
	 iv_ruleASN1_CHOICE=ruleASN1_CHOICE 
	 { $current=$iv_ruleASN1_CHOICE.current; } 
	 EOF 
;

// Rule ASN1_CHOICE
ruleASN1_CHOICE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CHOICE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_CHOICEAccess().getCHOICEKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_CHOICEAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_CHOICEAccess().getChoicesASN1_CHOICE_ENTRYParserRuleCall_2_0()); 
	    }
		lv_choices_2_0=ruleASN1_CHOICE_ENTRY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_CHOICERule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_2_0, 
        		"ASN1_CHOICE_ENTRY");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_CHOICEAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_CHOICEAccess().getChoicesASN1_CHOICE_ENTRYParserRuleCall_3_1_0()); 
	    }
		lv_choices_4_0=ruleASN1_CHOICE_ENTRY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_CHOICERule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_4_0, 
        		"ASN1_CHOICE_ENTRY");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getASN1_CHOICEAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleASN1_CHOICE_ENTRY
entryRuleASN1_CHOICE_ENTRY returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_CHOICE_ENTRYRule()); }
	 iv_ruleASN1_CHOICE_ENTRY=ruleASN1_CHOICE_ENTRY 
	 { $current=$iv_ruleASN1_CHOICE_ENTRY.current; } 
	 EOF 
;

// Rule ASN1_CHOICE_ENTRY
ruleASN1_CHOICE_ENTRY returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ASN1_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getASN1_CHOICE_ENTRYAccess().getIdASN1_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_CHOICE_ENTRYRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ASN1_ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_CHOICE_ENTRYRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getASN1_CHOICE_ENTRYAccess().getValueTypeValueTypeCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleASN1_SUBTYPE
entryRuleASN1_SUBTYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_SUBTYPERule()); }
	 iv_ruleASN1_SUBTYPE=ruleASN1_SUBTYPE 
	 { $current=$iv_ruleASN1_SUBTYPE.current; } 
	 EOF 
;

// Rule ASN1_SUBTYPE
ruleASN1_SUBTYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='SIZE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_SUBTYPEAccess().getSIZEKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SUBTYPEAccess().getRangeASN1_RANGEParserRuleCall_0_1_0()); 
	    }
		lv_range_1_0=ruleASN1_RANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SUBTYPERule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_1_0, 
        		"ASN1_RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getASN1_SUBTYPEAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_SUBTYPERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleASN1_RANGE
entryRuleASN1_RANGE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_RANGERule()); }
	 iv_ruleASN1_RANGE=ruleASN1_RANGE 
	 { $current=$iv_ruleASN1_RANGE.current; } 
	 EOF 
;

// Rule ASN1_RANGE
ruleASN1_RANGE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_RANGEAccess().getASN1_RANGEAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_RANGEAccess().getLeftParenthesisKeyword_1());
    }
((
(
		lv_start_2_0=RULE_INT
		{
			newLeafNode(lv_start_2_0, grammarAccess.getASN1_RANGEAccess().getStartINTTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"start",
        		lv_start_2_0, 
        		"INT");
	    }

)
)	otherlv_3='..' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_RANGEAccess().getFullStopFullStopKeyword_2_1());
    }
(
(
		lv_end_4_0=RULE_INT
		{
			newLeafNode(lv_end_4_0, grammarAccess.getASN1_RANGEAccess().getEndINTTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"end",
        		lv_end_4_0, 
        		"INT");
	    }

)
))	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getASN1_RANGEAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleObjectIdentifier
entryRuleObjectIdentifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectIdentifierRule()); }
	 iv_ruleObjectIdentifier=ruleObjectIdentifier 
	 { $current=$iv_ruleObjectIdentifier.current; } 
	 EOF 
;

// Rule ObjectIdentifier
ruleObjectIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_descriptor_0_0=RULE_ASN1_ID
		{
			newLeafNode(lv_descriptor_0_0, grammarAccess.getObjectIdentifierAccess().getDescriptorASN1_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"descriptor",
        		lv_descriptor_0_0, 
        		"ASN1_ID");
	    }

)
)	otherlv_1='OBJECT IDENTIFIER' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getObjectIdentifierAccess().getOBJECTIDENTIFIERKeyword_1());
    }
	otherlv_2='::=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectIdentifierAccess().getColonColonEqualsSignKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getObjectIdentifierAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectIdentifierAccess().getOidValueObjectIdentifierValueParserRuleCall_4_0()); 
	    }
		lv_oidValue_4_0=ruleObjectIdentifierValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectIdentifierRule());
	        }
       		set(
       			$current, 
       			"oidValue",
        		lv_oidValue_4_0, 
        		"ObjectIdentifierValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getObjectIdentifierAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleObjectIdentifierValue
entryRuleObjectIdentifierValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectIdentifierValueRule()); }
	 iv_ruleObjectIdentifierValue=ruleObjectIdentifierValue 
	 { $current=$iv_ruleObjectIdentifierValue.current; } 
	 EOF 
;

// Rule ObjectIdentifierValue
ruleObjectIdentifierValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
        }
	otherlv_0=RULE_ASN1_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getObjectIdentifierValueAccess().getDescriptorReferenceObjectIdentifierCrossReference_0_0()); 
	}

)
)?(
(
		lv_subIds_1_0=RULE_INT
		{
			newLeafNode(lv_subIds_1_0, grammarAccess.getObjectIdentifierValueAccess().getSubIdsINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"subIds",
        		lv_subIds_1_0, 
        		"INT");
	    }

)
)(
(
		lv_subIds_2_0=RULE_INT
		{
			newLeafNode(lv_subIds_2_0, grammarAccess.getObjectIdentifierValueAccess().getSubIdsINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"subIds",
        		lv_subIds_2_0, 
        		"INT");
	    }

)
)*)
;





// Rule MACRO_VALUE_TYPE
ruleMACRO_VALUE_TYPE returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='VALUE' 
	{
        $current = grammarAccess.getMACRO_VALUE_TYPEAccess().getVALUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMACRO_VALUE_TYPEAccess().getVALUEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Update' 
	{
        $current = grammarAccess.getMACRO_VALUE_TYPEAccess().getUpdateEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMACRO_VALUE_TYPEAccess().getUpdateEnumLiteralDeclaration_1()); 
    }
));





fragment RULE_NUMERIC : '0'..'9';

fragment RULE_ALPHA : 'a'..'z';

fragment RULE_ALPHA_CAP : 'A'..'Z';

RULE_MODULE_ID : RULE_ALPHA_CAP (RULE_ALPHA|RULE_ALPHA_CAP|'-'|RULE_NUMERIC)* (RULE_ALPHA_CAP|RULE_ALPHA|RULE_NUMERIC);

RULE_ASN1_ID : RULE_ALPHA (RULE_ALPHA|RULE_ALPHA_CAP|'-'|RULE_NUMERIC)*;

RULE_IA5STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

RULE_SL_ASN1_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


