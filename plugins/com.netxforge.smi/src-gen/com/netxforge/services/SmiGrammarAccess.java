/*
* generated by Xtext
*/
package com.netxforge.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SmiGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameMODULE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cDEFINITIONSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBEGINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cIdentifiersAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cIdentifiersObjectIdentifierParserRuleCall_5_0_0 = (RuleCall)cIdentifiersAssignment_5_0.eContents().get(0);
		private final Assignment cTypesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTypesTypeDefinitionParserRuleCall_5_1_0 = (RuleCall)cTypesAssignment_5_1.eContents().get(0);
		private final Assignment cMacrosAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cMacrosMacroParserRuleCall_5_2_0 = (RuleCall)cMacrosAssignment_5_2.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cNEWLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Module:
		//	name=MODULE_ID "DEFINITIONS" "::=" "BEGIN" NEWLINE (identifiers+=ObjectIdentifier | types+=TypeDefinition |
		//	macros+=Macro)+ NEWLINE "END" NEWLINE*;
		public ParserRule getRule() { return rule; }

		//name=MODULE_ID "DEFINITIONS" "::=" "BEGIN" NEWLINE (identifiers+=ObjectIdentifier | types+=TypeDefinition |
		//macros+=Macro)+ NEWLINE "END" NEWLINE*
		public Group getGroup() { return cGroup; }

		//name=MODULE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//MODULE_ID
		public RuleCall getNameMODULE_IDTerminalRuleCall_0_0() { return cNameMODULE_IDTerminalRuleCall_0_0; }

		//"DEFINITIONS"
		public Keyword getDEFINITIONSKeyword_1() { return cDEFINITIONSKeyword_1; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }

		//"BEGIN"
		public Keyword getBEGINKeyword_3() { return cBEGINKeyword_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }

		//(identifiers+=ObjectIdentifier | types+=TypeDefinition | macros+=Macro)+
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//identifiers+=ObjectIdentifier
		public Assignment getIdentifiersAssignment_5_0() { return cIdentifiersAssignment_5_0; }

		//ObjectIdentifier
		public RuleCall getIdentifiersObjectIdentifierParserRuleCall_5_0_0() { return cIdentifiersObjectIdentifierParserRuleCall_5_0_0; }

		//types+=TypeDefinition
		public Assignment getTypesAssignment_5_1() { return cTypesAssignment_5_1; }

		//TypeDefinition
		public RuleCall getTypesTypeDefinitionParserRuleCall_5_1_0() { return cTypesTypeDefinitionParserRuleCall_5_1_0; }

		//macros+=Macro
		public Assignment getMacrosAssignment_5_2() { return cMacrosAssignment_5_2; }

		//Macro
		public RuleCall getMacrosMacroParserRuleCall_5_2_0() { return cMacrosMacroParserRuleCall_5_2_0; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }

		//"END"
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_8() { return cNEWLINETerminalRuleCall_8; }
	}

	public class ObjectIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameASN1_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cOBJECTIDENTIFIERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOidValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOidValueObjectIdentifierValueParserRuleCall_5_0 = (RuleCall)cOidValueAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// An ASN.1 Object Identifier
		//ObjectIdentifier hidden(WS, SL_ASN1_COMMENT):
		//	NEWLINE+ name=ASN1_ID "OBJECT IDENTIFIER" "::=" "{" oidValue=ObjectIdentifierValue "}";
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name=ASN1_ID "OBJECT IDENTIFIER" "::=" "{" oidValue=ObjectIdentifierValue "}"
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name=ASN1_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ASN1_ID
		public RuleCall getNameASN1_IDTerminalRuleCall_1_0() { return cNameASN1_IDTerminalRuleCall_1_0; }

		//"OBJECT IDENTIFIER"
		public Keyword getOBJECTIDENTIFIERKeyword_2() { return cOBJECTIDENTIFIERKeyword_2; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_3() { return cColonColonEqualsSignKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//oidValue=ObjectIdentifierValue
		public Assignment getOidValueAssignment_5() { return cOidValueAssignment_5; }

		//ObjectIdentifierValue
		public RuleCall getOidValueObjectIdentifierValueParserRuleCall_5_0() { return cOidValueObjectIdentifierValueParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ObjectIdentifierValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectIdentifierValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cRootAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cRootASN1_IDTerminalRuleCall_0_0_0 = (RuleCall)cRootAssignment_0_0.eContents().get(0);
		private final Assignment cDescriptorReferenceAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cDescriptorReferenceObjectIdentifierCrossReference_0_1_0 = (CrossReference)cDescriptorReferenceAssignment_0_1.eContents().get(0);
		private final RuleCall cDescriptorReferenceObjectIdentifierASN1_IDTerminalRuleCall_0_1_0_1 = (RuleCall)cDescriptorReferenceObjectIdentifierCrossReference_0_1_0.eContents().get(1);
		private final Assignment cSubIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubIdsINTTerminalRuleCall_1_0 = (RuleCall)cSubIdsAssignment_1.eContents().get(0);
		private final Assignment cSubIdsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubIdsINTTerminalRuleCall_2_0 = (RuleCall)cSubIdsAssignment_2.eContents().get(0);
		
		//// The value of the Object identifier	
		//ObjectIdentifierValue:
		//	(root=ASN1_ID | => descriptorReference=[ObjectIdentifier|ASN1_ID])? subIds+=INT subIds+=INT*;
		public ParserRule getRule() { return rule; }

		//(root=ASN1_ID | => descriptorReference=[ObjectIdentifier|ASN1_ID])? subIds+=INT subIds+=INT*
		public Group getGroup() { return cGroup; }

		//(root=ASN1_ID | => descriptorReference=[ObjectIdentifier|ASN1_ID])?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//root=ASN1_ID
		public Assignment getRootAssignment_0_0() { return cRootAssignment_0_0; }

		//ASN1_ID
		public RuleCall getRootASN1_IDTerminalRuleCall_0_0_0() { return cRootASN1_IDTerminalRuleCall_0_0_0; }

		//=> descriptorReference=[ObjectIdentifier|ASN1_ID]
		public Assignment getDescriptorReferenceAssignment_0_1() { return cDescriptorReferenceAssignment_0_1; }

		//[ObjectIdentifier|ASN1_ID]
		public CrossReference getDescriptorReferenceObjectIdentifierCrossReference_0_1_0() { return cDescriptorReferenceObjectIdentifierCrossReference_0_1_0; }

		//ASN1_ID
		public RuleCall getDescriptorReferenceObjectIdentifierASN1_IDTerminalRuleCall_0_1_0_1() { return cDescriptorReferenceObjectIdentifierASN1_IDTerminalRuleCall_0_1_0_1; }

		//subIds+=INT
		public Assignment getSubIdsAssignment_1() { return cSubIdsAssignment_1; }

		//INT
		public RuleCall getSubIdsINTTerminalRuleCall_1_0() { return cSubIdsINTTerminalRuleCall_1_0; }

		//subIds+=INT*
		public Assignment getSubIdsAssignment_2() { return cSubIdsAssignment_2; }

		//INT
		public RuleCall getSubIdsINTTerminalRuleCall_2_0() { return cSubIdsINTTerminalRuleCall_2_0; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMODULE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		
		//// An ASN.1 Value assignment. 
		//TypeDefinition:
		//	NEWLINE+ name=MODULE_ID "::=" values+=Value+;
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name=MODULE_ID "::=" values+=Value+
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name=MODULE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MODULE_ID
		public RuleCall getNameMODULE_IDTerminalRuleCall_1_0() { return cNameMODULE_IDTerminalRuleCall_1_0; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }

		//values+=Value+
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//Value
		public RuleCall getValuesValueParserRuleCall_3_0() { return cValuesValueParserRuleCall_3_0; }
	}

	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMODULE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMACROKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cBEGINKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cTYPENOTATIONKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonColonEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTypeNotationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTypeNotationsTypeAssignmentParserRuleCall_9_0 = (RuleCall)cTypeNotationsAssignment_9.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Keyword cVALUENOTATIONKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cColonColonEqualsSignKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final RuleCall cNEWLINETerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final Assignment cValueNotationAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cValueNotationMacroValueParserRuleCall_14_0 = (RuleCall)cValueNotationAssignment_14.eContents().get(0);
		private final Assignment cInnerTypesAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cInnerTypesTypeDefinitionParserRuleCall_15_0 = (RuleCall)cInnerTypesAssignment_15.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Keyword cENDKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		////Scope:
		////	name='::=' values+=Value+;
		//// An ASN.1 Macro structure
		//Macro:
		//	NEWLINE+ name=MODULE_ID "MACRO" "::=" NEWLINE "BEGIN" NEWLINE+ "TYPE NOTATION" "::=" // Reference one or more type assignment. 
		//	typeNotations+=TypeAssignment+ NEWLINE+ "VALUE NOTATION" "::=" NEWLINE? valueNotation= // Define one Macro value. 
		//	MacroValue // Define 1 or more type definitions
		//	innerTypes+=TypeDefinition+ NEWLINE+ "END";
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name=MODULE_ID "MACRO" "::=" NEWLINE "BEGIN" NEWLINE+ "TYPE NOTATION" "::=" // Reference one or more type assignment. 
		//typeNotations+=TypeAssignment+ NEWLINE+ "VALUE NOTATION" "::=" NEWLINE? valueNotation= // Define one Macro value. 
		//MacroValue // Define 1 or more type definitions
		//innerTypes+=TypeDefinition+ NEWLINE+ "END"
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name=MODULE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MODULE_ID
		public RuleCall getNameMODULE_IDTerminalRuleCall_1_0() { return cNameMODULE_IDTerminalRuleCall_1_0; }

		//"MACRO"
		public Keyword getMACROKeyword_2() { return cMACROKeyword_2; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_3() { return cColonColonEqualsSignKeyword_3; }

		//NEWLINE
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }

		//"BEGIN"
		public Keyword getBEGINKeyword_5() { return cBEGINKeyword_5; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }

		//"TYPE NOTATION"
		public Keyword getTYPENOTATIONKeyword_7() { return cTYPENOTATIONKeyword_7; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_8() { return cColonColonEqualsSignKeyword_8; }

		//// Reference one or more type assignment. 
		//typeNotations+=TypeAssignment+
		public Assignment getTypeNotationsAssignment_9() { return cTypeNotationsAssignment_9; }

		//TypeAssignment
		public RuleCall getTypeNotationsTypeAssignmentParserRuleCall_9_0() { return cTypeNotationsTypeAssignmentParserRuleCall_9_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_10() { return cNEWLINETerminalRuleCall_10; }

		//"VALUE NOTATION"
		public Keyword getVALUENOTATIONKeyword_11() { return cVALUENOTATIONKeyword_11; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_12() { return cColonColonEqualsSignKeyword_12; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_13() { return cNEWLINETerminalRuleCall_13; }

		//valueNotation= // Define one Macro value. 
		//MacroValue
		public Assignment getValueNotationAssignment_14() { return cValueNotationAssignment_14; }

		//// Define one Macro value. 
		//MacroValue
		public RuleCall getValueNotationMacroValueParserRuleCall_14_0() { return cValueNotationMacroValueParserRuleCall_14_0; }

		//// Define 1 or more type definitions
		//innerTypes+=TypeDefinition+
		public Assignment getInnerTypesAssignment_15() { return cInnerTypesAssignment_15; }

		//TypeDefinition
		public RuleCall getInnerTypesTypeDefinitionParserRuleCall_15_0() { return cInnerTypesTypeDefinitionParserRuleCall_15_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_16() { return cNEWLINETerminalRuleCall_16; }

		//"END"
		public Keyword getENDKeyword_17() { return cENDKeyword_17; }
	}

	public class TypeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cParamAssignmentParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeReferenceParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cMacroValueParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//// An ASN.1 Macro Type Notation, it's slightly different then  a type definition. 
		//TypeAssignment:
		//	NEWLINE+ (ParamAssignment | TypeReference | MacroValue);
		public ParserRule getRule() { return rule; }

		//NEWLINE+ (ParamAssignment | TypeReference | MacroValue)
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//ParamAssignment | TypeReference | MacroValue
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ParamAssignment
		public RuleCall getParamAssignmentParserRuleCall_1_0() { return cParamAssignmentParserRuleCall_1_0; }

		//TypeReference
		public RuleCall getTypeReferenceParserRuleCall_1_1() { return cTypeReferenceParserRuleCall_1_1; }

		//MacroValue
		public RuleCall getMacroValueParserRuleCall_1_2() { return cMacroValueParserRuleCall_1_2; }
	}

	public class ParamAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParamPARAMETERTerminalRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightTypeNotationParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//// An ASN.1 Parameter assignment
		//ParamAssignment:
		//	param=PARAMETER right=TypeNotation;
		public ParserRule getRule() { return rule; }

		//param=PARAMETER right=TypeNotation
		public Group getGroup() { return cGroup; }

		//param=PARAMETER
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//PARAMETER
		public RuleCall getParamPARAMETERTerminalRuleCall_0_0() { return cParamPARAMETERTerminalRuleCall_0_0; }

		//right=TypeNotation
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//TypeNotation
		public RuleCall getRightTypeNotationParserRuleCall_1_0() { return cRightTypeNotationParserRuleCall_1_0; }
	}

	public class TypeNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeNotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueMacroValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TypeNotation:
		//	TypeReference | value=MacroValue;
		public ParserRule getRule() { return rule; }

		//TypeReference | value=MacroValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeReference
		public RuleCall getTypeReferenceParserRuleCall_0() { return cTypeReferenceParserRuleCall_0; }

		//value=MacroValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//MacroValue
		public RuleCall getValueMacroValueParserRuleCall_1_0() { return cValueMacroValueParserRuleCall_1_0; }
	}

	public class TypeReferenceExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReferenceExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParentRefTypeReferenceParserRuleCall_0_0 = (RuleCall)cParentRefAssignment_0.eContents().get(0);
		private final Assignment cChildRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildRefTypeReferenceParserRuleCall_1_0 = (RuleCall)cChildRefAssignment_1.eContents().get(0);
		
		//// Types can be referred once or twice. The right side is named a child reference. 
		//TypeReferenceExt returns TypeAssignment:
		//	parentRef=TypeReference => childRef=TypeReference?;
		public ParserRule getRule() { return rule; }

		//parentRef=TypeReference => childRef=TypeReference?
		public Group getGroup() { return cGroup; }

		//parentRef=TypeReference
		public Assignment getParentRefAssignment_0() { return cParentRefAssignment_0; }

		//TypeReference
		public RuleCall getParentRefTypeReferenceParserRuleCall_0_0() { return cParentRefTypeReferenceParserRuleCall_0_0; }

		//=> childRef=TypeReference?
		public Assignment getChildRefAssignment_1() { return cChildRefAssignment_1; }

		//TypeReference
		public RuleCall getChildRefTypeReferenceParserRuleCall_1_0() { return cChildRefTypeReferenceParserRuleCall_1_0; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeTypeDefinitionCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeTypeDefinitionMODULE_IDTerminalRuleCall_0_1 = (RuleCall)cTypeTypeDefinitionCrossReference_0.eContents().get(1);
		
		//TypeReference returns TypeAssignment:
		//	type=[TypeDefinition|MODULE_ID];
		public ParserRule getRule() { return rule; }

		//type=[TypeDefinition|MODULE_ID]
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//[TypeDefinition|MODULE_ID]
		public CrossReference getTypeTypeDefinitionCrossReference_0() { return cTypeTypeDefinitionCrossReference_0; }

		//MODULE_ID
		public RuleCall getTypeTypeDefinitionMODULE_IDTerminalRuleCall_0_1() { return cTypeTypeDefinitionMODULE_IDTerminalRuleCall_0_1; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueTypesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTypesValueTypeParserRuleCall_1_0 = (RuleCall)cValueTypesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cNEWLINETerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueTypesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueTypesValueTypeParserRuleCall_2_2_0 = (RuleCall)cValueTypesAssignment_2_2.eContents().get(0);
		
		//Value:
		//	NEWLINE? valueTypes+=ValueType (NEWLINE? "|" valueTypes+=ValueType)*;
		public ParserRule getRule() { return rule; }

		//NEWLINE? valueTypes+=ValueType (NEWLINE? "|" valueTypes+=ValueType)*
		public Group getGroup() { return cGroup; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//valueTypes+=ValueType
		public Assignment getValueTypesAssignment_1() { return cValueTypesAssignment_1; }

		//ValueType
		public RuleCall getValueTypesValueTypeParserRuleCall_1_0() { return cValueTypesValueTypeParserRuleCall_1_0; }

		//(NEWLINE? "|" valueTypes+=ValueType)*
		public Group getGroup_2() { return cGroup_2; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_2_0() { return cNEWLINETerminalRuleCall_2_0; }

		//"|"
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }

		//valueTypes+=ValueType
		public Assignment getValueTypesAssignment_2_2() { return cValueTypesAssignment_2_2; }

		//ValueType
		public RuleCall getValueTypesValueTypeParserRuleCall_2_2_0() { return cValueTypesValueTypeParserRuleCall_2_2_0; }
	}

	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamParamAssignmentParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypesTypeReferenceExtParserRuleCall_1_0 = (RuleCall)cTypesAssignment_1.eContents().get(0);
		private final Assignment cSimpleTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSimpleTypeASN1_TYPEParserRuleCall_2_0 = (RuleCall)cSimpleTypeAssignment_2.eContents().get(0);
		private final Assignment cMacroValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMacroValueMacroValueParserRuleCall_3_0 = (RuleCall)cMacroValueAssignment_3.eContents().get(0);
		private final Assignment cOiAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cOiOBJECTIDENTIFIERKeyword_4_0 = (Keyword)cOiAssignment_4.eContents().get(0);
		
		//ValueType:
		//	param=ParamAssignment | types=TypeReferenceExt | simpleType=ASN1_TYPE | macroValue=MacroValue |
		//	oi="OBJECT IDENTIFIER";
		public ParserRule getRule() { return rule; }

		//param=ParamAssignment | types=TypeReferenceExt | simpleType=ASN1_TYPE | macroValue=MacroValue | oi="OBJECT IDENTIFIER"
		public Alternatives getAlternatives() { return cAlternatives; }

		//param=ParamAssignment
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//ParamAssignment
		public RuleCall getParamParamAssignmentParserRuleCall_0_0() { return cParamParamAssignmentParserRuleCall_0_0; }

		//types=TypeReferenceExt
		public Assignment getTypesAssignment_1() { return cTypesAssignment_1; }

		//TypeReferenceExt
		public RuleCall getTypesTypeReferenceExtParserRuleCall_1_0() { return cTypesTypeReferenceExtParserRuleCall_1_0; }

		//simpleType=ASN1_TYPE
		public Assignment getSimpleTypeAssignment_2() { return cSimpleTypeAssignment_2; }

		//ASN1_TYPE
		public RuleCall getSimpleTypeASN1_TYPEParserRuleCall_2_0() { return cSimpleTypeASN1_TYPEParserRuleCall_2_0; }

		//macroValue=MacroValue
		public Assignment getMacroValueAssignment_3() { return cMacroValueAssignment_3; }

		//MacroValue
		public RuleCall getMacroValueMacroValueParserRuleCall_3_0() { return cMacroValueMacroValueParserRuleCall_3_0; }

		//oi="OBJECT IDENTIFIER"
		public Assignment getOiAssignment_4() { return cOiAssignment_4; }

		//"OBJECT IDENTIFIER"
		public Keyword getOiOBJECTIDENTIFIERKeyword_4_0() { return cOiOBJECTIDENTIFIERKeyword_4_0; }
	}

	public class MacroValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MacroValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMacroValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueTypeMACRO_VALUE_TYPEParserRuleCall_3_0 = (RuleCall)cValueTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MacroValue returns Value:
		//	{MacroValue} "value" "(" valueType=MACRO_VALUE_TYPE ")";
		public ParserRule getRule() { return rule; }

		//{MacroValue} "value" "(" valueType=MACRO_VALUE_TYPE ")"
		public Group getGroup() { return cGroup; }

		//{MacroValue}
		public Action getMacroValueAction_0() { return cMacroValueAction_0; }

		//"value"
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//valueType=MACRO_VALUE_TYPE
		public Assignment getValueTypeAssignment_3() { return cValueTypeAssignment_3; }

		//MACRO_VALUE_TYPE
		public RuleCall getValueTypeMACRO_VALUE_TYPEParserRuleCall_3_0() { return cValueTypeMACRO_VALUE_TYPEParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MACRO_VALUE_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MACRO_VALUE_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cUpdateAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cUpdateUpdateTypeParserRuleCall_0_0 = (RuleCall)cUpdateAssignment_0.eContents().get(0);
		private final Assignment cLiteralAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralMACRO_VALUE_CAPParserRuleCall_1_0 = (RuleCall)cLiteralAssignment_1.eContents().get(0);
		
		//MACRO_VALUE_TYPE:
		//	update=UpdateType | literal=MACRO_VALUE_CAP;
		public ParserRule getRule() { return rule; }

		//update=UpdateType | literal=MACRO_VALUE_CAP
		public Alternatives getAlternatives() { return cAlternatives; }

		//update=UpdateType
		public Assignment getUpdateAssignment_0() { return cUpdateAssignment_0; }

		//UpdateType
		public RuleCall getUpdateUpdateTypeParserRuleCall_0_0() { return cUpdateUpdateTypeParserRuleCall_0_0; }

		//literal=MACRO_VALUE_CAP
		public Assignment getLiteralAssignment_1() { return cLiteralAssignment_1; }

		//MACRO_VALUE_CAP
		public RuleCall getLiteralMACRO_VALUE_CAPParserRuleCall_1_0() { return cLiteralMACRO_VALUE_CAPParserRuleCall_1_0; }
	}

	public class UpdateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UpdateType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUpdateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeTypeDefinitionCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeTypeDefinitionMODULE_IDTerminalRuleCall_1_0_1 = (RuleCall)cTypeTypeDefinitionCrossReference_1_0.eContents().get(1);
		
		//UpdateType:
		//	"Update" type=[TypeDefinition|MODULE_ID];
		public ParserRule getRule() { return rule; }

		//"Update" type=[TypeDefinition|MODULE_ID]
		public Group getGroup() { return cGroup; }

		//"Update"
		public Keyword getUpdateKeyword_0() { return cUpdateKeyword_0; }

		//type=[TypeDefinition|MODULE_ID]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[TypeDefinition|MODULE_ID]
		public CrossReference getTypeTypeDefinitionCrossReference_1_0() { return cTypeTypeDefinitionCrossReference_1_0; }

		//MODULE_ID
		public RuleCall getTypeTypeDefinitionMODULE_IDTerminalRuleCall_1_0_1() { return cTypeTypeDefinitionMODULE_IDTerminalRuleCall_1_0_1; }
	}

	public class MACRO_VALUE_CAPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MACRO_VALUE_CAP");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVALUEOBJECTIDENTIFIERKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIA5StringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// Add other options.
		//MACRO_VALUE_CAP:
		//	"VALUE OBJECT IDENTIFIER" | "IA5String";
		public ParserRule getRule() { return rule; }

		//"VALUE OBJECT IDENTIFIER" | "IA5String"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"VALUE OBJECT IDENTIFIER"
		public Keyword getVALUEOBJECTIDENTIFIERKeyword_0() { return cVALUEOBJECTIDENTIFIERKeyword_0; }

		//"IA5String"
		public Keyword getIA5StringKeyword_1() { return cIA5StringKeyword_1; }
	}

	public class ASN1_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cASN1_SIMPLEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cASN1_CHOICEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////enum VALUE_CAP_LITERALS:
		////	oiLiteral='OBJECT IDENTIFIER' | ia5StringLiteral='IA5String';
		//// Simple and structured types. 
		//ASN1_TYPE:
		//	ASN1_SIMPLE | ASN1_CHOICE;
		public ParserRule getRule() { return rule; }

		//ASN1_SIMPLE | ASN1_CHOICE
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASN1_SIMPLE
		public RuleCall getASN1_SIMPLEParserRuleCall_0() { return cASN1_SIMPLEParserRuleCall_0; }

		//ASN1_CHOICE
		public RuleCall getASN1_CHOICEParserRuleCall_1() { return cASN1_CHOICEParserRuleCall_1; }
	}

	public class ASN1_SIMPLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_SIMPLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cASN1_SIMPLEAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEmptyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cASN1_SIMPLEAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cIA5STRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cASN1_OCTET_STRINGParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cConstraintAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstraintASN1_SUBTYPEParserRuleCall_2_1_0 = (RuleCall)cConstraintAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cASN1_INTEGERParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cConstraintAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConstraintASN1_RANGEParserRuleCall_3_1_0 = (RuleCall)cConstraintAssignment_3_1.eContents().get(0);
		
		//// -- the "base types" defined here are:
		//// --   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER
		//ASN1_SIMPLE returns ASN1_TYPE:
		//	{ASN1_SIMPLE} "empty" | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER
		//	constraint=ASN1_RANGE?;
		public ParserRule getRule() { return rule; }

		//{ASN1_SIMPLE} "empty" | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER
		//constraint=ASN1_RANGE?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ASN1_SIMPLE} "empty"
		public Group getGroup_0() { return cGroup_0; }

		//{ASN1_SIMPLE}
		public Action getASN1_SIMPLEAction_0_0() { return cASN1_SIMPLEAction_0_0; }

		//"empty"
		public Keyword getEmptyKeyword_0_1() { return cEmptyKeyword_0_1; }

		//{ASN1_SIMPLE} IA5STRING
		public Group getGroup_1() { return cGroup_1; }

		//{ASN1_SIMPLE}
		public Action getASN1_SIMPLEAction_1_0() { return cASN1_SIMPLEAction_1_0; }

		//IA5STRING
		public RuleCall getIA5STRINGTerminalRuleCall_1_1() { return cIA5STRINGTerminalRuleCall_1_1; }

		//ASN1_OCTET_STRING constraint=ASN1_SUBTYPE?
		public Group getGroup_2() { return cGroup_2; }

		//ASN1_OCTET_STRING
		public RuleCall getASN1_OCTET_STRINGParserRuleCall_2_0() { return cASN1_OCTET_STRINGParserRuleCall_2_0; }

		//constraint=ASN1_SUBTYPE?
		public Assignment getConstraintAssignment_2_1() { return cConstraintAssignment_2_1; }

		//ASN1_SUBTYPE
		public RuleCall getConstraintASN1_SUBTYPEParserRuleCall_2_1_0() { return cConstraintASN1_SUBTYPEParserRuleCall_2_1_0; }

		//ASN1_INTEGER constraint=ASN1_RANGE?
		public Group getGroup_3() { return cGroup_3; }

		//ASN1_INTEGER
		public RuleCall getASN1_INTEGERParserRuleCall_3_0() { return cASN1_INTEGERParserRuleCall_3_0; }

		//constraint=ASN1_RANGE?
		public Assignment getConstraintAssignment_3_1() { return cConstraintAssignment_3_1; }

		//ASN1_RANGE
		public RuleCall getConstraintASN1_RANGEParserRuleCall_3_1_0() { return cConstraintASN1_RANGEParserRuleCall_3_1_0; }
	}

	public class ASN1_OCTET_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_OCTET_STRING");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cASN1_OCTET_STRINGAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameOCTETSTRINGKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//ASN1_OCTET_STRING returns ASN1_SIMPLE:
		//	{ASN1_OCTET_STRING} name="OCTET STRING";
		public ParserRule getRule() { return rule; }

		//{ASN1_OCTET_STRING} name="OCTET STRING"
		public Group getGroup() { return cGroup; }

		//{ASN1_OCTET_STRING}
		public Action getASN1_OCTET_STRINGAction_0() { return cASN1_OCTET_STRINGAction_0; }

		//name="OCTET STRING"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"OCTET STRING"
		public Keyword getNameOCTETSTRINGKeyword_1_0() { return cNameOCTETSTRINGKeyword_1_0; }
	}

	public class ASN1_INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_INTEGER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameINTEGERKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuePairsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePairsASN1_VALUEPAIRParserRuleCall_2_0 = (RuleCall)cValuePairsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ASN1_INTEGER returns ASN1_SIMPLE:
		//	name="INTEGER" "{" valuePairs+=ASN1_VALUEPAIR+ "}";
		public ParserRule getRule() { return rule; }

		//name="INTEGER" "{" valuePairs+=ASN1_VALUEPAIR+ "}"
		public Group getGroup() { return cGroup; }

		//name="INTEGER"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"INTEGER"
		public Keyword getNameINTEGERKeyword_0_0() { return cNameINTEGERKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//valuePairs+=ASN1_VALUEPAIR+
		public Assignment getValuePairsAssignment_2() { return cValuePairsAssignment_2; }

		//ASN1_VALUEPAIR
		public RuleCall getValuePairsASN1_VALUEPAIRParserRuleCall_2_0() { return cValuePairsASN1_VALUEPAIRParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ASN1_SUBTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_SUBTYPE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSIZEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRangesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRangesASN1_RANGEParserRuleCall_3_0 = (RuleCall)cRangesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRangesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRangesASN1_RANGEParserRuleCall_4_1_0 = (RuleCall)cRangesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ASN1_SUBTYPE returns ASN1_SIMPLE:
		//	"(" "SIZE" "(" ranges+=ASN1_RANGE ("|" ranges+=ASN1_RANGE)* ")" ")";
		public ParserRule getRule() { return rule; }

		//"(" "SIZE" "(" ranges+=ASN1_RANGE ("|" ranges+=ASN1_RANGE)* ")" ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"SIZE"
		public Keyword getSIZEKeyword_1() { return cSIZEKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//ranges+=ASN1_RANGE
		public Assignment getRangesAssignment_3() { return cRangesAssignment_3; }

		//ASN1_RANGE
		public RuleCall getRangesASN1_RANGEParserRuleCall_3_0() { return cRangesASN1_RANGEParserRuleCall_3_0; }

		//("|" ranges+=ASN1_RANGE)*
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//ranges+=ASN1_RANGE
		public Assignment getRangesAssignment_4_1() { return cRangesAssignment_4_1; }

		//ASN1_RANGE
		public RuleCall getRangesASN1_RANGEParserRuleCall_4_1_0() { return cRangesASN1_RANGEParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ASN1_RANGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_RANGE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cASN1_RANGEAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStartAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStartINTTerminalRuleCall_1_0_0 = (RuleCall)cStartAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndINTTerminalRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		
		//ASN1_RANGE:
		//	{ASN1_RANGE} value=INT | start=INT ".." end=INT;
		public ParserRule getRule() { return rule; }

		//{ASN1_RANGE} value=INT | start=INT ".." end=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ASN1_RANGE} value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{ASN1_RANGE}
		public Action getASN1_RANGEAction_0_0() { return cASN1_RANGEAction_0_0; }

		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//start=INT ".." end=INT
		public Group getGroup_1() { return cGroup_1; }

		//start=INT
		public Assignment getStartAssignment_1_0() { return cStartAssignment_1_0; }

		//INT
		public RuleCall getStartINTTerminalRuleCall_1_0_0() { return cStartINTTerminalRuleCall_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }

		//end=INT
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//INT
		public RuleCall getEndINTTerminalRuleCall_1_2_0() { return cEndINTTerminalRuleCall_1_2_0; }
	}

	public class ASN1_VALUEPAIRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_VALUEPAIR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cASN1_IDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// TODO1 Requries further definition. 	
		//// TODO1 further specify id, as enum entry in the vp
		//ASN1_VALUEPAIR:
		//	ASN1_ID? "(" INT ")";
		public ParserRule getRule() { return rule; }

		//ASN1_ID? "(" INT ")"
		public Group getGroup() { return cGroup; }

		//ASN1_ID?
		public RuleCall getASN1_IDTerminalRuleCall_0() { return cASN1_IDTerminalRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ASN1_CHOICEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_CHOICE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHOICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChoicesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cChoicesASN1_CHOICE_ENTRYParserRuleCall_2_0 = (RuleCall)cChoicesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cChoicesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cChoicesASN1_CHOICE_ENTRYParserRuleCall_3_1_0 = (RuleCall)cChoicesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Choice:
		//// http://www.obj-sys.com/asn1tutorial/node11.html
		//ASN1_CHOICE:
		//	"CHOICE" "{" choices+=ASN1_CHOICE_ENTRY ("," choices+=ASN1_CHOICE_ENTRY)* "}";
		public ParserRule getRule() { return rule; }

		//"CHOICE" "{" choices+=ASN1_CHOICE_ENTRY ("," choices+=ASN1_CHOICE_ENTRY)* "}"
		public Group getGroup() { return cGroup; }

		//"CHOICE"
		public Keyword getCHOICEKeyword_0() { return cCHOICEKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//choices+=ASN1_CHOICE_ENTRY
		public Assignment getChoicesAssignment_2() { return cChoicesAssignment_2; }

		//ASN1_CHOICE_ENTRY
		public RuleCall getChoicesASN1_CHOICE_ENTRYParserRuleCall_2_0() { return cChoicesASN1_CHOICE_ENTRYParserRuleCall_2_0; }

		//("," choices+=ASN1_CHOICE_ENTRY)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//choices+=ASN1_CHOICE_ENTRY
		public Assignment getChoicesAssignment_3_1() { return cChoicesAssignment_3_1; }

		//ASN1_CHOICE_ENTRY
		public RuleCall getChoicesASN1_CHOICE_ENTRYParserRuleCall_3_1_0() { return cChoicesASN1_CHOICE_ENTRYParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ASN1_CHOICE_ENTRYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_CHOICE_ENTRY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdASN1_IDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cValueTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValueTypeValueCrossReference_1_0 = (CrossReference)cValueTypeAssignment_1.eContents().get(0);
		private final RuleCall cValueTypeValueASN1_IDTerminalRuleCall_1_0_1 = (RuleCall)cValueTypeValueCrossReference_1_0.eContents().get(1);
		
		//// TODO1 The reference to a ValueType is indented by 4 WS on the next line. 
		////  
		//ASN1_CHOICE_ENTRY:
		//	id=ASN1_ID valueType=[Value|ASN1_ID];
		public ParserRule getRule() { return rule; }

		//id=ASN1_ID valueType=[Value|ASN1_ID]
		public Group getGroup() { return cGroup; }

		//id=ASN1_ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ASN1_ID
		public RuleCall getIdASN1_IDTerminalRuleCall_0_0() { return cIdASN1_IDTerminalRuleCall_0_0; }

		//valueType=[Value|ASN1_ID]
		public Assignment getValueTypeAssignment_1() { return cValueTypeAssignment_1; }

		//[Value|ASN1_ID]
		public CrossReference getValueTypeValueCrossReference_1_0() { return cValueTypeValueCrossReference_1_0; }

		//ASN1_ID
		public RuleCall getValueTypeValueASN1_IDTerminalRuleCall_1_0_1() { return cValueTypeValueASN1_IDTerminalRuleCall_1_0_1; }
	}
	
	
	private ModuleElements pModule;
	private ObjectIdentifierElements pObjectIdentifier;
	private ObjectIdentifierValueElements pObjectIdentifierValue;
	private TypeDefinitionElements pTypeDefinition;
	private MacroElements pMacro;
	private TypeAssignmentElements pTypeAssignment;
	private ParamAssignmentElements pParamAssignment;
	private TypeNotationElements pTypeNotation;
	private TypeReferenceExtElements pTypeReferenceExt;
	private TypeReferenceElements pTypeReference;
	private ValueElements pValue;
	private ValueTypeElements pValueType;
	private MacroValueElements pMacroValue;
	private MACRO_VALUE_TYPEElements pMACRO_VALUE_TYPE;
	private UpdateTypeElements pUpdateType;
	private MACRO_VALUE_CAPElements pMACRO_VALUE_CAP;
	private ASN1_TYPEElements pASN1_TYPE;
	private ASN1_SIMPLEElements pASN1_SIMPLE;
	private ASN1_OCTET_STRINGElements pASN1_OCTET_STRING;
	private ASN1_INTEGERElements pASN1_INTEGER;
	private ASN1_SUBTYPEElements pASN1_SUBTYPE;
	private ASN1_RANGEElements pASN1_RANGE;
	private ASN1_VALUEPAIRElements pASN1_VALUEPAIR;
	private ASN1_CHOICEElements pASN1_CHOICE;
	private ASN1_CHOICE_ENTRYElements pASN1_CHOICE_ENTRY;
	private TerminalRule tMODULE_ID;
	private TerminalRule tASN1_ID;
	private TerminalRule tPARAMETER;
	private TerminalRule tIA5STRING;
	private TerminalRule tNUMERIC;
	private TerminalRule tALPHA;
	private TerminalRule tALPHA_CAP;
	private TerminalRule tINT;
	private TerminalRule tSL_ASN1_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tNEWLINE;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public SmiGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.netxforge.Smi".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Module:
	//	name=MODULE_ID "DEFINITIONS" "::=" "BEGIN" NEWLINE (identifiers+=ObjectIdentifier | types+=TypeDefinition |
	//	macros+=Macro)+ NEWLINE "END" NEWLINE*;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//// An ASN.1 Object Identifier
	//ObjectIdentifier hidden(WS, SL_ASN1_COMMENT):
	//	NEWLINE+ name=ASN1_ID "OBJECT IDENTIFIER" "::=" "{" oidValue=ObjectIdentifierValue "}";
	public ObjectIdentifierElements getObjectIdentifierAccess() {
		return (pObjectIdentifier != null) ? pObjectIdentifier : (pObjectIdentifier = new ObjectIdentifierElements());
	}
	
	public ParserRule getObjectIdentifierRule() {
		return getObjectIdentifierAccess().getRule();
	}

	//// The value of the Object identifier	
	//ObjectIdentifierValue:
	//	(root=ASN1_ID | => descriptorReference=[ObjectIdentifier|ASN1_ID])? subIds+=INT subIds+=INT*;
	public ObjectIdentifierValueElements getObjectIdentifierValueAccess() {
		return (pObjectIdentifierValue != null) ? pObjectIdentifierValue : (pObjectIdentifierValue = new ObjectIdentifierValueElements());
	}
	
	public ParserRule getObjectIdentifierValueRule() {
		return getObjectIdentifierValueAccess().getRule();
	}

	//// An ASN.1 Value assignment. 
	//TypeDefinition:
	//	NEWLINE+ name=MODULE_ID "::=" values+=Value+;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	////Scope:
	////	name='::=' values+=Value+;
	//// An ASN.1 Macro structure
	//Macro:
	//	NEWLINE+ name=MODULE_ID "MACRO" "::=" NEWLINE "BEGIN" NEWLINE+ "TYPE NOTATION" "::=" // Reference one or more type assignment. 
	//	typeNotations+=TypeAssignment+ NEWLINE+ "VALUE NOTATION" "::=" NEWLINE? valueNotation= // Define one Macro value. 
	//	MacroValue // Define 1 or more type definitions
	//	innerTypes+=TypeDefinition+ NEWLINE+ "END";
	public MacroElements getMacroAccess() {
		return (pMacro != null) ? pMacro : (pMacro = new MacroElements());
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}

	//// An ASN.1 Macro Type Notation, it's slightly different then  a type definition. 
	//TypeAssignment:
	//	NEWLINE+ (ParamAssignment | TypeReference | MacroValue);
	public TypeAssignmentElements getTypeAssignmentAccess() {
		return (pTypeAssignment != null) ? pTypeAssignment : (pTypeAssignment = new TypeAssignmentElements());
	}
	
	public ParserRule getTypeAssignmentRule() {
		return getTypeAssignmentAccess().getRule();
	}

	//// An ASN.1 Parameter assignment
	//ParamAssignment:
	//	param=PARAMETER right=TypeNotation;
	public ParamAssignmentElements getParamAssignmentAccess() {
		return (pParamAssignment != null) ? pParamAssignment : (pParamAssignment = new ParamAssignmentElements());
	}
	
	public ParserRule getParamAssignmentRule() {
		return getParamAssignmentAccess().getRule();
	}

	//TypeNotation:
	//	TypeReference | value=MacroValue;
	public TypeNotationElements getTypeNotationAccess() {
		return (pTypeNotation != null) ? pTypeNotation : (pTypeNotation = new TypeNotationElements());
	}
	
	public ParserRule getTypeNotationRule() {
		return getTypeNotationAccess().getRule();
	}

	//// Types can be referred once or twice. The right side is named a child reference. 
	//TypeReferenceExt returns TypeAssignment:
	//	parentRef=TypeReference => childRef=TypeReference?;
	public TypeReferenceExtElements getTypeReferenceExtAccess() {
		return (pTypeReferenceExt != null) ? pTypeReferenceExt : (pTypeReferenceExt = new TypeReferenceExtElements());
	}
	
	public ParserRule getTypeReferenceExtRule() {
		return getTypeReferenceExtAccess().getRule();
	}

	//TypeReference returns TypeAssignment:
	//	type=[TypeDefinition|MODULE_ID];
	public TypeReferenceElements getTypeReferenceAccess() {
		return (pTypeReference != null) ? pTypeReference : (pTypeReference = new TypeReferenceElements());
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//Value:
	//	NEWLINE? valueTypes+=ValueType (NEWLINE? "|" valueTypes+=ValueType)*;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//ValueType:
	//	param=ParamAssignment | types=TypeReferenceExt | simpleType=ASN1_TYPE | macroValue=MacroValue |
	//	oi="OBJECT IDENTIFIER";
	public ValueTypeElements getValueTypeAccess() {
		return (pValueType != null) ? pValueType : (pValueType = new ValueTypeElements());
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//MacroValue returns Value:
	//	{MacroValue} "value" "(" valueType=MACRO_VALUE_TYPE ")";
	public MacroValueElements getMacroValueAccess() {
		return (pMacroValue != null) ? pMacroValue : (pMacroValue = new MacroValueElements());
	}
	
	public ParserRule getMacroValueRule() {
		return getMacroValueAccess().getRule();
	}

	//MACRO_VALUE_TYPE:
	//	update=UpdateType | literal=MACRO_VALUE_CAP;
	public MACRO_VALUE_TYPEElements getMACRO_VALUE_TYPEAccess() {
		return (pMACRO_VALUE_TYPE != null) ? pMACRO_VALUE_TYPE : (pMACRO_VALUE_TYPE = new MACRO_VALUE_TYPEElements());
	}
	
	public ParserRule getMACRO_VALUE_TYPERule() {
		return getMACRO_VALUE_TYPEAccess().getRule();
	}

	//UpdateType:
	//	"Update" type=[TypeDefinition|MODULE_ID];
	public UpdateTypeElements getUpdateTypeAccess() {
		return (pUpdateType != null) ? pUpdateType : (pUpdateType = new UpdateTypeElements());
	}
	
	public ParserRule getUpdateTypeRule() {
		return getUpdateTypeAccess().getRule();
	}

	//// Add other options.
	//MACRO_VALUE_CAP:
	//	"VALUE OBJECT IDENTIFIER" | "IA5String";
	public MACRO_VALUE_CAPElements getMACRO_VALUE_CAPAccess() {
		return (pMACRO_VALUE_CAP != null) ? pMACRO_VALUE_CAP : (pMACRO_VALUE_CAP = new MACRO_VALUE_CAPElements());
	}
	
	public ParserRule getMACRO_VALUE_CAPRule() {
		return getMACRO_VALUE_CAPAccess().getRule();
	}

	////enum VALUE_CAP_LITERALS:
	////	oiLiteral='OBJECT IDENTIFIER' | ia5StringLiteral='IA5String';
	//// Simple and structured types. 
	//ASN1_TYPE:
	//	ASN1_SIMPLE | ASN1_CHOICE;
	public ASN1_TYPEElements getASN1_TYPEAccess() {
		return (pASN1_TYPE != null) ? pASN1_TYPE : (pASN1_TYPE = new ASN1_TYPEElements());
	}
	
	public ParserRule getASN1_TYPERule() {
		return getASN1_TYPEAccess().getRule();
	}

	//// -- the "base types" defined here are:
	//// --   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER
	//ASN1_SIMPLE returns ASN1_TYPE:
	//	{ASN1_SIMPLE} "empty" | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER
	//	constraint=ASN1_RANGE?;
	public ASN1_SIMPLEElements getASN1_SIMPLEAccess() {
		return (pASN1_SIMPLE != null) ? pASN1_SIMPLE : (pASN1_SIMPLE = new ASN1_SIMPLEElements());
	}
	
	public ParserRule getASN1_SIMPLERule() {
		return getASN1_SIMPLEAccess().getRule();
	}

	//ASN1_OCTET_STRING returns ASN1_SIMPLE:
	//	{ASN1_OCTET_STRING} name="OCTET STRING";
	public ASN1_OCTET_STRINGElements getASN1_OCTET_STRINGAccess() {
		return (pASN1_OCTET_STRING != null) ? pASN1_OCTET_STRING : (pASN1_OCTET_STRING = new ASN1_OCTET_STRINGElements());
	}
	
	public ParserRule getASN1_OCTET_STRINGRule() {
		return getASN1_OCTET_STRINGAccess().getRule();
	}

	//ASN1_INTEGER returns ASN1_SIMPLE:
	//	name="INTEGER" "{" valuePairs+=ASN1_VALUEPAIR+ "}";
	public ASN1_INTEGERElements getASN1_INTEGERAccess() {
		return (pASN1_INTEGER != null) ? pASN1_INTEGER : (pASN1_INTEGER = new ASN1_INTEGERElements());
	}
	
	public ParserRule getASN1_INTEGERRule() {
		return getASN1_INTEGERAccess().getRule();
	}

	//ASN1_SUBTYPE returns ASN1_SIMPLE:
	//	"(" "SIZE" "(" ranges+=ASN1_RANGE ("|" ranges+=ASN1_RANGE)* ")" ")";
	public ASN1_SUBTYPEElements getASN1_SUBTYPEAccess() {
		return (pASN1_SUBTYPE != null) ? pASN1_SUBTYPE : (pASN1_SUBTYPE = new ASN1_SUBTYPEElements());
	}
	
	public ParserRule getASN1_SUBTYPERule() {
		return getASN1_SUBTYPEAccess().getRule();
	}

	//ASN1_RANGE:
	//	{ASN1_RANGE} value=INT | start=INT ".." end=INT;
	public ASN1_RANGEElements getASN1_RANGEAccess() {
		return (pASN1_RANGE != null) ? pASN1_RANGE : (pASN1_RANGE = new ASN1_RANGEElements());
	}
	
	public ParserRule getASN1_RANGERule() {
		return getASN1_RANGEAccess().getRule();
	}

	//// TODO1 Requries further definition. 	
	//// TODO1 further specify id, as enum entry in the vp
	//ASN1_VALUEPAIR:
	//	ASN1_ID? "(" INT ")";
	public ASN1_VALUEPAIRElements getASN1_VALUEPAIRAccess() {
		return (pASN1_VALUEPAIR != null) ? pASN1_VALUEPAIR : (pASN1_VALUEPAIR = new ASN1_VALUEPAIRElements());
	}
	
	public ParserRule getASN1_VALUEPAIRRule() {
		return getASN1_VALUEPAIRAccess().getRule();
	}

	////Choice:
	//// http://www.obj-sys.com/asn1tutorial/node11.html
	//ASN1_CHOICE:
	//	"CHOICE" "{" choices+=ASN1_CHOICE_ENTRY ("," choices+=ASN1_CHOICE_ENTRY)* "}";
	public ASN1_CHOICEElements getASN1_CHOICEAccess() {
		return (pASN1_CHOICE != null) ? pASN1_CHOICE : (pASN1_CHOICE = new ASN1_CHOICEElements());
	}
	
	public ParserRule getASN1_CHOICERule() {
		return getASN1_CHOICEAccess().getRule();
	}

	//// TODO1 The reference to a ValueType is indented by 4 WS on the next line. 
	////  
	//ASN1_CHOICE_ENTRY:
	//	id=ASN1_ID valueType=[Value|ASN1_ID];
	public ASN1_CHOICE_ENTRYElements getASN1_CHOICE_ENTRYAccess() {
		return (pASN1_CHOICE_ENTRY != null) ? pASN1_CHOICE_ENTRY : (pASN1_CHOICE_ENTRY = new ASN1_CHOICE_ENTRYElements());
	}
	
	public ParserRule getASN1_CHOICE_ENTRYRule() {
		return getASN1_CHOICE_ENTRYAccess().getRule();
	}

	//terminal MODULE_ID:
	//	ALPHA_CAP (ALPHA | ALPHA_CAP | "-" | NUMERIC)* (ALPHA_CAP | ALPHA | NUMERIC);
	public TerminalRule getMODULE_IDRule() {
		return (tMODULE_ID != null) ? tMODULE_ID : (tMODULE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MODULE_ID"));
	} 

	//terminal ASN1_ID:
	//	ALPHA (ALPHA | ALPHA_CAP | "-" | NUMERIC)*;
	public TerminalRule getASN1_IDRule() {
		return (tASN1_ID != null) ? tASN1_ID : (tASN1_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_ID"));
	} 

	//terminal PARAMETER:
	//	"\"" MODULE_ID "\"";
	public TerminalRule getPARAMETERRule() {
		return (tPARAMETER != null) ? tPARAMETER : (tPARAMETER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAMETER"));
	} 

	//terminal IA5STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getIA5STRINGRule() {
		return (tIA5STRING != null) ? tIA5STRING : (tIA5STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IA5STRING"));
	} 

	//// Fragments.
	//terminal fragment NUMERIC:
	//	"0".."9";
	public TerminalRule getNUMERICRule() {
		return (tNUMERIC != null) ? tNUMERIC : (tNUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC"));
	} 

	//terminal fragment ALPHA:
	//	"a".."z";
	public TerminalRule getALPHARule() {
		return (tALPHA != null) ? tALPHA : (tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALPHA"));
	} 

	//terminal fragment ALPHA_CAP:
	//	"A".."Z";
	public TerminalRule getALPHA_CAPRule() {
		return (tALPHA_CAP != null) ? tALPHA_CAP : (tALPHA_CAP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALPHA_CAP"));
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//// Section 3.4 
	//// ... ASN.1 comments commence with a pair of adjacent hyphens and end with
	//// the next pair of adjacent hyphens or at the end of the line,
	//// whichever occurs first.  Comments ended by a pair of hyphens have the
	//// effect of a single space character.
	//// TODO1 Comments ended by a pair of hyphens have the effect of a single space character.
	//terminal SL_ASN1_COMMENT:
	//	"--" !("\n" | "\r")*;
	public TerminalRule getSL_ASN1_COMMENTRule() {
		return (tSL_ASN1_COMMENT != null) ? tSL_ASN1_COMMENT : (tSL_ASN1_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_ASN1_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NEWLINE:
	//	"\r"? | "\n";
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
