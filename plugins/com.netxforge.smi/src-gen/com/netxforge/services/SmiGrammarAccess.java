/*
* generated by Xtext
*/
package com.netxforge.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class SmiGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameMODULE_IDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cDEFINITIONSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cBEGINKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cImportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportsImportsParserRuleCall_4_0 = (RuleCall)cImportsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cObjectsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cObjectsObjectReferenceableParserRuleCall_5_0_0 = (RuleCall)cObjectsAssignment_5_0.eContents().get(0);
		private final Assignment cTypesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cTypesReferenceableParserRuleCall_5_1_0 = (RuleCall)cTypesAssignment_5_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cNEWLINETerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Module:
		//	name=MODULE_ID "DEFINITIONS" "::=" "BEGIN" imports=Imports? (objects+=ObjectReferenceable | types+=Referenceable)+
		//	NEWLINE+ "END" NEWLINE*;
		public ParserRule getRule() { return rule; }

		//name=MODULE_ID "DEFINITIONS" "::=" "BEGIN" imports=Imports? (objects+=ObjectReferenceable | types+=Referenceable)+
		//NEWLINE+ "END" NEWLINE*
		public Group getGroup() { return cGroup; }

		//name=MODULE_ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//MODULE_ID
		public RuleCall getNameMODULE_IDTerminalRuleCall_0_0() { return cNameMODULE_IDTerminalRuleCall_0_0; }

		//"DEFINITIONS"
		public Keyword getDEFINITIONSKeyword_1() { return cDEFINITIONSKeyword_1; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }

		//"BEGIN"
		public Keyword getBEGINKeyword_3() { return cBEGINKeyword_3; }

		//imports=Imports?
		public Assignment getImportsAssignment_4() { return cImportsAssignment_4; }

		//Imports
		public RuleCall getImportsImportsParserRuleCall_4_0() { return cImportsImportsParserRuleCall_4_0; }

		//(objects+=ObjectReferenceable | types+=Referenceable)+
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//objects+=ObjectReferenceable
		public Assignment getObjectsAssignment_5_0() { return cObjectsAssignment_5_0; }

		//ObjectReferenceable
		public RuleCall getObjectsObjectReferenceableParserRuleCall_5_0_0() { return cObjectsObjectReferenceableParserRuleCall_5_0_0; }

		//types+=Referenceable
		public Assignment getTypesAssignment_5_1() { return cTypesAssignment_5_1; }

		//Referenceable
		public RuleCall getTypesReferenceableParserRuleCall_5_1_0() { return cTypesReferenceableParserRuleCall_5_1_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_6() { return cNEWLINETerminalRuleCall_6; }

		//"END"
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_8() { return cNEWLINETerminalRuleCall_8; }
	}

	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cIMPORTSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportClosureParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Imports:
		//	NEWLINE+ "IMPORTS" imports+=ImportClosure+ ";";
		public ParserRule getRule() { return rule; }

		//NEWLINE+ "IMPORTS" imports+=ImportClosure+ ";"
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//"IMPORTS"
		public Keyword getIMPORTSKeyword_1() { return cIMPORTSKeyword_1; }

		//imports+=ImportClosure+
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//ImportClosure
		public RuleCall getImportsImportClosureParserRuleCall_2_0() { return cImportsImportClosureParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ImportClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefsImportRefsParserRuleCall_0_0 = (RuleCall)cRefsAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportURIAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportURIMODULE_IDTerminalRuleCall_3_0 = (RuleCall)cImportURIAssignment_3.eContents().get(0);
		
		////ImportClosure:
		////	'FROM' importURI=MODULE_ID;
		//ImportClosure:
		//	refs=ImportRefs NEWLINE* "FROM" importURI=MODULE_ID;
		public ParserRule getRule() { return rule; }

		//refs=ImportRefs NEWLINE* "FROM" importURI=MODULE_ID
		public Group getGroup() { return cGroup; }

		//refs=ImportRefs
		public Assignment getRefsAssignment_0() { return cRefsAssignment_0; }

		//ImportRefs
		public RuleCall getRefsImportRefsParserRuleCall_0_0() { return cRefsImportRefsParserRuleCall_0_0; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }

		//"FROM"
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }

		//importURI=MODULE_ID
		public Assignment getImportURIAssignment_3() { return cImportURIAssignment_3; }

		//MODULE_ID
		public RuleCall getImportURIMODULE_IDTerminalRuleCall_3_0() { return cImportURIMODULE_IDTerminalRuleCall_3_0; }
	}

	public class ImportRefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportRefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cRefsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefsImportRefParserRuleCall_1_0 = (RuleCall)cRefsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cRefsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRefsImportRefParserRuleCall_2_2_0 = (RuleCall)cRefsAssignment_2_2.eContents().get(0);
		
		//// Consists of OID, Macro, Type usage Refs. 
		//ImportRefs:
		//	NEWLINE* refs+=ImportRef ("," NEWLINE* refs+=ImportRef)*;
		public ParserRule getRule() { return rule; }

		//NEWLINE* refs+=ImportRef ("," NEWLINE* refs+=ImportRef)*
		public Group getGroup() { return cGroup; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//refs+=ImportRef
		public Assignment getRefsAssignment_1() { return cRefsAssignment_1; }

		//ImportRef
		public RuleCall getRefsImportRefParserRuleCall_1_0() { return cRefsImportRefParserRuleCall_1_0; }

		//("," NEWLINE* refs+=ImportRef)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_2_1() { return cNEWLINETerminalRuleCall_2_1; }

		//refs+=ImportRef
		public Assignment getRefsAssignment_2_2() { return cRefsAssignment_2_2; }

		//ImportRef
		public RuleCall getRefsImportRefParserRuleCall_2_2_0() { return cRefsImportRefParserRuleCall_2_2_0; }
	}

	public class ImportRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOiRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cOiRefObjectReferenceableCrossReference_0_0 = (CrossReference)cOiRefAssignment_0.eContents().get(0);
		private final RuleCall cOiRefObjectReferenceableASN1_IDTerminalRuleCall_0_0_1 = (RuleCall)cOiRefObjectReferenceableCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cTypeRefReferenceableCrossReference_1_0 = (CrossReference)cTypeRefAssignment_1.eContents().get(0);
		private final RuleCall cTypeRefReferenceableMODULE_IDTerminalRuleCall_1_0_1 = (RuleCall)cTypeRefReferenceableCrossReference_1_0.eContents().get(1);
		
		//ImportRef:
		//	oiRef=[ObjectReferenceable|ASN1_ID] | typeRef=[Referenceable|MODULE_ID];
		public ParserRule getRule() { return rule; }

		//oiRef=[ObjectReferenceable|ASN1_ID] | typeRef=[Referenceable|MODULE_ID]
		public Alternatives getAlternatives() { return cAlternatives; }

		//oiRef=[ObjectReferenceable|ASN1_ID]
		public Assignment getOiRefAssignment_0() { return cOiRefAssignment_0; }

		//[ObjectReferenceable|ASN1_ID]
		public CrossReference getOiRefObjectReferenceableCrossReference_0_0() { return cOiRefObjectReferenceableCrossReference_0_0; }

		//ASN1_ID
		public RuleCall getOiRefObjectReferenceableASN1_IDTerminalRuleCall_0_0_1() { return cOiRefObjectReferenceableASN1_IDTerminalRuleCall_0_0_1; }

		//typeRef=[Referenceable|MODULE_ID]
		public Assignment getTypeRefAssignment_1() { return cTypeRefAssignment_1; }

		//[Referenceable|MODULE_ID]
		public CrossReference getTypeRefReferenceableCrossReference_1_0() { return cTypeRefReferenceableCrossReference_1_0; }

		//MODULE_ID
		public RuleCall getTypeRefReferenceableMODULE_IDTerminalRuleCall_1_0_1() { return cTypeRefReferenceableMODULE_IDTerminalRuleCall_1_0_1; }
	}

	public class ObjectReferenceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectReferenceable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameASN1_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cOBJECTIDENTIFIERKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Assignment cObjectAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cObjectObjectParserRuleCall_3_1_0 = (RuleCall)cObjectAssignment_3_1.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cColonColonEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cObjectValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cObjectValueObjectReferenceParserRuleCall_7_0 = (RuleCall)cObjectValueAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ObjectReferenceable:
		//	NEWLINE+ name=ASN1_ID NEWLINE* ("OBJECT IDENTIFIER" | object=Object) NEWLINE* "::=" "{" objectValue=ObjectReference
		//	"}";
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name=ASN1_ID NEWLINE* ("OBJECT IDENTIFIER" | object=Object) NEWLINE* "::=" "{" objectValue=ObjectReference "}"
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name=ASN1_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ASN1_ID
		public RuleCall getNameASN1_IDTerminalRuleCall_1_0() { return cNameASN1_IDTerminalRuleCall_1_0; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }

		//"OBJECT IDENTIFIER" | object=Object
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"OBJECT IDENTIFIER"
		public Keyword getOBJECTIDENTIFIERKeyword_3_0() { return cOBJECTIDENTIFIERKeyword_3_0; }

		//object=Object
		public Assignment getObjectAssignment_3_1() { return cObjectAssignment_3_1; }

		//Object
		public RuleCall getObjectObjectParserRuleCall_3_1_0() { return cObjectObjectParserRuleCall_3_1_0; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_5() { return cColonColonEqualsSignKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//objectValue=ObjectReference
		public Assignment getObjectValueAssignment_7() { return cObjectValueAssignment_7; }

		//ObjectReference
		public RuleCall getObjectValueObjectReferenceParserRuleCall_7_0() { return cObjectValueObjectReferenceParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMacroRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMacroRefReferenceableCrossReference_0_0 = (CrossReference)cMacroRefAssignment_0.eContents().get(0);
		private final RuleCall cMacroRefReferenceableMODULE_IDTerminalRuleCall_0_0_1 = (RuleCall)cMacroRefReferenceableCrossReference_0_0.eContents().get(1);
		private final Assignment cAttributesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_0 = (RuleCall)cAttributesAssignment_1.eContents().get(0);
		
		//Object:
		//	macroRef=[Referenceable|MODULE_ID] attributes+=Attribute+;
		public ParserRule getRule() { return rule; }

		//macroRef=[Referenceable|MODULE_ID] attributes+=Attribute+
		public Group getGroup() { return cGroup; }

		//macroRef=[Referenceable|MODULE_ID]
		public Assignment getMacroRefAssignment_0() { return cMacroRefAssignment_0; }

		//[Referenceable|MODULE_ID]
		public CrossReference getMacroRefReferenceableCrossReference_0_0() { return cMacroRefReferenceableCrossReference_0_0; }

		//MODULE_ID
		public RuleCall getMacroRefReferenceableMODULE_IDTerminalRuleCall_0_0_1() { return cMacroRefReferenceableMODULE_IDTerminalRuleCall_0_0_1; }

		//attributes+=Attribute+
		public Assignment getAttributesAssignment_1() { return cAttributesAssignment_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_0() { return cAttributesAttributeParserRuleCall_1_0; }
	}

	public class ObjectReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cNameASN1_IDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cDescriptorRefAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cDescriptorRefObjectReferenceableCrossReference_0_1_0 = (CrossReference)cDescriptorRefAssignment_0_1.eContents().get(0);
		private final RuleCall cDescriptorRefObjectReferenceableASN1_IDTerminalRuleCall_0_1_0_1 = (RuleCall)cDescriptorRefObjectReferenceableCrossReference_0_1_0.eContents().get(1);
		private final Assignment cSubIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubIdsBIG_INTEGERTerminalRuleCall_1_0 = (RuleCall)cSubIdsAssignment_1.eContents().get(0);
		private final Assignment cSubIdsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubIdsBIG_INTEGERTerminalRuleCall_2_0 = (RuleCall)cSubIdsAssignment_2.eContents().get(0);
		
		//// The value of the Object identifier	
		//ObjectReference:
		//	(name=ASN1_ID | => descriptorRef=[ObjectReferenceable|ASN1_ID])? subIds+=BIG_INTEGER subIds+=BIG_INTEGER*;
		public ParserRule getRule() { return rule; }

		//(name=ASN1_ID | => descriptorRef=[ObjectReferenceable|ASN1_ID])? subIds+=BIG_INTEGER subIds+=BIG_INTEGER*
		public Group getGroup() { return cGroup; }

		//(name=ASN1_ID | => descriptorRef=[ObjectReferenceable|ASN1_ID])?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//name=ASN1_ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ASN1_ID
		public RuleCall getNameASN1_IDTerminalRuleCall_0_0_0() { return cNameASN1_IDTerminalRuleCall_0_0_0; }

		//=> descriptorRef=[ObjectReferenceable|ASN1_ID]
		public Assignment getDescriptorRefAssignment_0_1() { return cDescriptorRefAssignment_0_1; }

		//[ObjectReferenceable|ASN1_ID]
		public CrossReference getDescriptorRefObjectReferenceableCrossReference_0_1_0() { return cDescriptorRefObjectReferenceableCrossReference_0_1_0; }

		//ASN1_ID
		public RuleCall getDescriptorRefObjectReferenceableASN1_IDTerminalRuleCall_0_1_0_1() { return cDescriptorRefObjectReferenceableASN1_IDTerminalRuleCall_0_1_0_1; }

		//subIds+=BIG_INTEGER
		public Assignment getSubIdsAssignment_1() { return cSubIdsAssignment_1; }

		//BIG_INTEGER
		public RuleCall getSubIdsBIG_INTEGERTerminalRuleCall_1_0() { return cSubIdsBIG_INTEGERTerminalRuleCall_1_0; }

		//subIds+=BIG_INTEGER*
		public Assignment getSubIdsAssignment_2() { return cSubIdsAssignment_2; }

		//BIG_INTEGER
		public RuleCall getSubIdsBIG_INTEGERTerminalRuleCall_2_0() { return cSubIdsBIG_INTEGERTerminalRuleCall_2_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cParamRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParamRefReferenceableCrossReference_1_0 = (CrossReference)cParamRefAssignment_1.eContents().get(0);
		private final RuleCall cParamRefReferenceableMODULE_IDTerminalRuleCall_1_0_1 = (RuleCall)cParamRefReferenceableCrossReference_1_0.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueAttributeValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Attribute:
		//	NEWLINE+ paramRef=[Referenceable|MODULE_ID] value=AttributeValue;
		public ParserRule getRule() { return rule; }

		//NEWLINE+ paramRef=[Referenceable|MODULE_ID] value=AttributeValue
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//paramRef=[Referenceable|MODULE_ID]
		public Assignment getParamRefAssignment_1() { return cParamRefAssignment_1; }

		//[Referenceable|MODULE_ID]
		public CrossReference getParamRefReferenceableCrossReference_1_0() { return cParamRefReferenceableCrossReference_1_0; }

		//MODULE_ID
		public RuleCall getParamRefReferenceableMODULE_IDTerminalRuleCall_1_0_1() { return cParamRefReferenceableMODULE_IDTerminalRuleCall_1_0_1; }

		//value=AttributeValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//AttributeValue
		public RuleCall getValueAttributeValueParserRuleCall_2_0() { return cValueAttributeValueParserRuleCall_2_0; }
	}

	public class AttributeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cIdentifierAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cIdentifierIdentifierParserRuleCall_0_1_0_0 = (RuleCall)cIdentifierAssignment_0_1_0.eContents().get(0);
		private final Assignment cTextAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cTextIA5STRINGTerminalRuleCall_0_1_1_0 = (RuleCall)cTextAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_0_1_2 = (Group)cAlternatives_0_1.eContents().get(2);
		private final Assignment cTypeRefAssignment_0_1_2_0 = (Assignment)cGroup_0_1_2.eContents().get(0);
		private final CrossReference cTypeRefReferenceableCrossReference_0_1_2_0_0 = (CrossReference)cTypeRefAssignment_0_1_2_0.eContents().get(0);
		private final RuleCall cTypeRefReferenceableMODULE_IDTerminalRuleCall_0_1_2_0_0_1 = (RuleCall)cTypeRefReferenceableCrossReference_0_1_2_0_0.eContents().get(1);
		private final Assignment cSubTypeAssignment_0_1_2_1 = (Assignment)cGroup_0_1_2.eContents().get(1);
		private final RuleCall cSubTypeASN1_SUBTYPEParserRuleCall_0_1_2_1_0 = (RuleCall)cSubTypeAssignment_0_1_2_1.eContents().get(0);
		private final Assignment cObjectRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cObjectRefBracedObjectReferenceParserRuleCall_1_0 = (RuleCall)cObjectRefAssignment_1.eContents().get(0);
		private final Assignment cIntegerAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntegerASN1_INTEGERParserRuleCall_2_0 = (RuleCall)cIntegerAssignment_2.eContents().get(0);
		private final Assignment cSequenceOfAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSequenceOfASN1_SEQUENCE_OFParserRuleCall_3_0 = (RuleCall)cSequenceOfAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAttributeValueAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cOBJECTIDENTIFIERKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//// The Identifier is very often an enum
		//AttributeValue:
		//	NEWLINE* (identifier=Identifier | text=IA5STRING | typeRef=[Referenceable|MODULE_ID] subType=ASN1_SUBTYPE?) |
		//	objectRef=BracedObjectReference | integer=ASN1_INTEGER | sequenceOf=ASN1_SEQUENCE_OF | {AttributeValue}
		//	"OBJECT IDENTIFIER";
		public ParserRule getRule() { return rule; }

		//NEWLINE* (identifier=Identifier | text=IA5STRING | typeRef=[Referenceable|MODULE_ID] subType=ASN1_SUBTYPE?) |
		//objectRef=BracedObjectReference | integer=ASN1_INTEGER | sequenceOf=ASN1_SEQUENCE_OF | {AttributeValue}
		//"OBJECT IDENTIFIER"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NEWLINE* (identifier=Identifier | text=IA5STRING | typeRef=[Referenceable|MODULE_ID] subType=ASN1_SUBTYPE?)
		public Group getGroup_0() { return cGroup_0; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_0_0() { return cNEWLINETerminalRuleCall_0_0; }

		//identifier=Identifier | text=IA5STRING | typeRef=[Referenceable|MODULE_ID] subType=ASN1_SUBTYPE?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//identifier=Identifier
		public Assignment getIdentifierAssignment_0_1_0() { return cIdentifierAssignment_0_1_0; }

		//Identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_0_1_0_0() { return cIdentifierIdentifierParserRuleCall_0_1_0_0; }

		//text=IA5STRING
		public Assignment getTextAssignment_0_1_1() { return cTextAssignment_0_1_1; }

		//IA5STRING
		public RuleCall getTextIA5STRINGTerminalRuleCall_0_1_1_0() { return cTextIA5STRINGTerminalRuleCall_0_1_1_0; }

		//typeRef=[Referenceable|MODULE_ID] subType=ASN1_SUBTYPE?
		public Group getGroup_0_1_2() { return cGroup_0_1_2; }

		//typeRef=[Referenceable|MODULE_ID]
		public Assignment getTypeRefAssignment_0_1_2_0() { return cTypeRefAssignment_0_1_2_0; }

		//[Referenceable|MODULE_ID]
		public CrossReference getTypeRefReferenceableCrossReference_0_1_2_0_0() { return cTypeRefReferenceableCrossReference_0_1_2_0_0; }

		//MODULE_ID
		public RuleCall getTypeRefReferenceableMODULE_IDTerminalRuleCall_0_1_2_0_0_1() { return cTypeRefReferenceableMODULE_IDTerminalRuleCall_0_1_2_0_0_1; }

		//subType=ASN1_SUBTYPE?
		public Assignment getSubTypeAssignment_0_1_2_1() { return cSubTypeAssignment_0_1_2_1; }

		//ASN1_SUBTYPE
		public RuleCall getSubTypeASN1_SUBTYPEParserRuleCall_0_1_2_1_0() { return cSubTypeASN1_SUBTYPEParserRuleCall_0_1_2_1_0; }

		//objectRef=BracedObjectReference
		public Assignment getObjectRefAssignment_1() { return cObjectRefAssignment_1; }

		//BracedObjectReference
		public RuleCall getObjectRefBracedObjectReferenceParserRuleCall_1_0() { return cObjectRefBracedObjectReferenceParserRuleCall_1_0; }

		//integer=ASN1_INTEGER
		public Assignment getIntegerAssignment_2() { return cIntegerAssignment_2; }

		//ASN1_INTEGER
		public RuleCall getIntegerASN1_INTEGERParserRuleCall_2_0() { return cIntegerASN1_INTEGERParserRuleCall_2_0; }

		//sequenceOf=ASN1_SEQUENCE_OF
		public Assignment getSequenceOfAssignment_3() { return cSequenceOfAssignment_3; }

		//ASN1_SEQUENCE_OF
		public RuleCall getSequenceOfASN1_SEQUENCE_OFParserRuleCall_3_0() { return cSequenceOfASN1_SEQUENCE_OFParserRuleCall_3_0; }

		//{AttributeValue} "OBJECT IDENTIFIER"
		public Group getGroup_4() { return cGroup_4; }

		//{AttributeValue}
		public Action getAttributeValueAction_4_0() { return cAttributeValueAction_4_0; }

		//"OBJECT IDENTIFIER"
		public Keyword getOBJECTIDENTIFIERKeyword_4_1() { return cOBJECTIDENTIFIERKeyword_4_1; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdASN1_IDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Identifier:
		//	id=ASN1_ID;
		public ParserRule getRule() { return rule; }

		//id=ASN1_ID
		public Assignment getIdAssignment() { return cIdAssignment; }

		//ASN1_ID
		public RuleCall getIdASN1_IDTerminalRuleCall_0() { return cIdASN1_IDTerminalRuleCall_0; }
	}

	public class BracedObjectReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracedObjectReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cObjectRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cObjectRefObjectReferenceableCrossReference_1_0 = (CrossReference)cObjectRefAssignment_1.eContents().get(0);
		private final RuleCall cObjectRefObjectReferenceableASN1_IDTerminalRuleCall_1_0_1 = (RuleCall)cObjectRefObjectReferenceableCrossReference_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BracedObjectReference:
		//	"{" objectRef=[ObjectReferenceable|ASN1_ID] "}";
		public ParserRule getRule() { return rule; }

		//"{" objectRef=[ObjectReferenceable|ASN1_ID] "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//objectRef=[ObjectReferenceable|ASN1_ID]
		public Assignment getObjectRefAssignment_1() { return cObjectRefAssignment_1; }

		//[ObjectReferenceable|ASN1_ID]
		public CrossReference getObjectRefObjectReferenceableCrossReference_1_0() { return cObjectRefObjectReferenceableCrossReference_1_0; }

		//ASN1_ID
		public RuleCall getObjectRefObjectReferenceableASN1_IDTerminalRuleCall_1_0_1() { return cObjectRefObjectReferenceableASN1_IDTerminalRuleCall_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ReferenceableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Referenceable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMacroParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Referenceable:
		//	Macro | TypeDefinition;
		public ParserRule getRule() { return rule; }

		//Macro | TypeDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Macro
		public RuleCall getMacroParserRuleCall_0() { return cMacroParserRuleCall_0; }

		//TypeDefinition
		public RuleCall getTypeDefinitionParserRuleCall_1() { return cTypeDefinitionParserRuleCall_1; }
	}

	public class TypeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMODULE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		
		//// An ASN.1 Value assignment. 
		//TypeDefinition returns Referenceable:
		//	NEWLINE+ name=MODULE_ID "::=" values+=Value+;
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name=MODULE_ID "::=" values+=Value+
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name=MODULE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MODULE_ID
		public RuleCall getNameMODULE_IDTerminalRuleCall_1_0() { return cNameMODULE_IDTerminalRuleCall_1_0; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_2() { return cColonColonEqualsSignKeyword_2; }

		//values+=Value+
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//Value
		public RuleCall getValuesValueParserRuleCall_3_0() { return cValuesValueParserRuleCall_3_0; }
	}

	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameMODULE_IDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMACROKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cNEWLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cBEGINKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeNotationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeNotationTypeNotationParserRuleCall_6_0 = (RuleCall)cTypeNotationAssignment_6.eContents().get(0);
		private final Assignment cValueNotationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueNotationValueNotationParserRuleCall_7_0 = (RuleCall)cValueNotationAssignment_7.eContents().get(0);
		private final Assignment cInnerTypesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cInnerTypesTypeDefinitionParserRuleCall_8_0 = (RuleCall)cInnerTypesAssignment_8.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cENDKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//// An ASN.1 Macro structure
		//Macro returns Referenceable:
		//	NEWLINE+ name=MODULE_ID "MACRO" "::=" NEWLINE+ "BEGIN" typeNotation=TypeNotation valueNotation=ValueNotation // Define 1 or more type definitions
		//	innerTypes+=TypeDefinition+ NEWLINE+ "END";
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name=MODULE_ID "MACRO" "::=" NEWLINE+ "BEGIN" typeNotation=TypeNotation valueNotation=ValueNotation // Define 1 or more type definitions
		//innerTypes+=TypeDefinition+ NEWLINE+ "END"
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name=MODULE_ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//MODULE_ID
		public RuleCall getNameMODULE_IDTerminalRuleCall_1_0() { return cNameMODULE_IDTerminalRuleCall_1_0; }

		//"MACRO"
		public Keyword getMACROKeyword_2() { return cMACROKeyword_2; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_3() { return cColonColonEqualsSignKeyword_3; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_4() { return cNEWLINETerminalRuleCall_4; }

		//"BEGIN"
		public Keyword getBEGINKeyword_5() { return cBEGINKeyword_5; }

		//typeNotation=TypeNotation
		public Assignment getTypeNotationAssignment_6() { return cTypeNotationAssignment_6; }

		//TypeNotation
		public RuleCall getTypeNotationTypeNotationParserRuleCall_6_0() { return cTypeNotationTypeNotationParserRuleCall_6_0; }

		//valueNotation=ValueNotation
		public Assignment getValueNotationAssignment_7() { return cValueNotationAssignment_7; }

		//ValueNotation
		public RuleCall getValueNotationValueNotationParserRuleCall_7_0() { return cValueNotationValueNotationParserRuleCall_7_0; }

		//// Define 1 or more type definitions
		//innerTypes+=TypeDefinition+
		public Assignment getInnerTypesAssignment_8() { return cInnerTypesAssignment_8; }

		//TypeDefinition
		public RuleCall getInnerTypesTypeDefinitionParserRuleCall_8_0() { return cInnerTypesTypeDefinitionParserRuleCall_8_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_9() { return cNEWLINETerminalRuleCall_9; }

		//"END"
		public Keyword getENDKeyword_10() { return cENDKeyword_10; }
	}

	public class TypeNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameTYPEKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cNOTATIONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeNotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeNotationsTypeAssignmentParserRuleCall_4_0 = (RuleCall)cTypeNotationsAssignment_4.eContents().get(0);
		
		//TypeNotation:
		//	NEWLINE+ name="TYPE" "NOTATION" "::=" // Reference one or more type assignment.
		//	typeNotations+=TypeAssignment+;
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name="TYPE" "NOTATION" "::=" // Reference one or more type assignment.
		//typeNotations+=TypeAssignment+
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name="TYPE"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"TYPE"
		public Keyword getNameTYPEKeyword_1_0() { return cNameTYPEKeyword_1_0; }

		//"NOTATION"
		public Keyword getNOTATIONKeyword_2() { return cNOTATIONKeyword_2; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_3() { return cColonColonEqualsSignKeyword_3; }

		//// Reference one or more type assignment.
		//typeNotations+=TypeAssignment+
		public Assignment getTypeNotationsAssignment_4() { return cTypeNotationsAssignment_4; }

		//TypeAssignment
		public RuleCall getTypeNotationsTypeAssignmentParserRuleCall_4_0() { return cTypeNotationsTypeAssignmentParserRuleCall_4_0; }
	}

	public class ValueNotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueNotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameVALUEKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cNOTATIONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueNotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueNotationsValueAssignmentParserRuleCall_4_0 = (RuleCall)cValueNotationsAssignment_4.eContents().get(0);
		
		//ValueNotation:
		//	NEWLINE+ name="VALUE" "NOTATION" "::=" // Define one Macro value.
		//	valueNotations+=ValueAssignment+;
		public ParserRule getRule() { return rule; }

		//NEWLINE+ name="VALUE" "NOTATION" "::=" // Define one Macro value.
		//valueNotations+=ValueAssignment+
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//name="VALUE"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"VALUE"
		public Keyword getNameVALUEKeyword_1_0() { return cNameVALUEKeyword_1_0; }

		//"NOTATION"
		public Keyword getNOTATIONKeyword_2() { return cNOTATIONKeyword_2; }

		//"::="
		public Keyword getColonColonEqualsSignKeyword_3() { return cColonColonEqualsSignKeyword_3; }

		//// Define one Macro value.
		//valueNotations+=ValueAssignment+
		public Assignment getValueNotationsAssignment_4() { return cValueNotationsAssignment_4; }

		//ValueAssignment
		public RuleCall getValueNotationsValueAssignmentParserRuleCall_4_0() { return cValueNotationsValueAssignmentParserRuleCall_4_0; }
	}

	public class TypeAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cParamAssignmentParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeReferenceParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cMacroValueParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//// An ASN.1 Macro Type Notation, it's slightly different then  a type definition. 
		//TypeAssignment:
		//	NEWLINE+ (ParamAssignment | TypeReference | MacroValue);
		public ParserRule getRule() { return rule; }

		//NEWLINE+ (ParamAssignment | TypeReference | MacroValue)
		public Group getGroup() { return cGroup; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//ParamAssignment | TypeReference | MacroValue
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ParamAssignment
		public RuleCall getParamAssignmentParserRuleCall_1_0() { return cParamAssignmentParserRuleCall_1_0; }

		//TypeReference
		public RuleCall getTypeReferenceParserRuleCall_1_1() { return cTypeReferenceParserRuleCall_1_1; }

		//MacroValue
		public RuleCall getMacroValueParserRuleCall_1_2() { return cMacroValueParserRuleCall_1_2; }
	}

	public class ParamAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamePARAMETERTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cRightAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRightTypeNotationRightParserRuleCall_1_0 = (RuleCall)cRightAssignment_1.eContents().get(0);
		
		//// An ASN.1 Parameter assignment
		//ParamAssignment returns Referenceable:
		//	name=PARAMETER right=TypeNotationRight;
		public ParserRule getRule() { return rule; }

		//name=PARAMETER right=TypeNotationRight
		public Group getGroup() { return cGroup; }

		//name=PARAMETER
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//PARAMETER
		public RuleCall getNamePARAMETERTerminalRuleCall_0_0() { return cNamePARAMETERTerminalRuleCall_0_0; }

		//right=TypeNotationRight
		public Assignment getRightAssignment_1() { return cRightAssignment_1; }

		//TypeNotationRight
		public RuleCall getRightTypeNotationRightParserRuleCall_1_0() { return cRightTypeNotationRightParserRuleCall_1_0; }
	}

	public class TypeNotationRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeNotationRight");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueMacroValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//TypeNotationRight:
		//	TypeReference | value=MacroValue;
		public ParserRule getRule() { return rule; }

		//TypeReference | value=MacroValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypeReference
		public RuleCall getTypeReferenceParserRuleCall_0() { return cTypeReferenceParserRuleCall_0; }

		//value=MacroValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//MacroValue
		public RuleCall getValueMacroValueParserRuleCall_1_0() { return cValueMacroValueParserRuleCall_1_0; }
	}

	public class TypeReferenceExtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReferenceExt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParentRefTypeReferenceParserRuleCall_0_0 = (RuleCall)cParentRefAssignment_0.eContents().get(0);
		private final Assignment cChildRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildRefTypeReferenceParserRuleCall_1_0 = (RuleCall)cChildRefAssignment_1.eContents().get(0);
		
		//// Types can be referred once or twice. The right side is named a child reference.
		//// The Right-hand side can also be a 
		//TypeReferenceExt returns TypeAssignment:
		//	parentRef=TypeReference => childRef=TypeReference?;
		public ParserRule getRule() { return rule; }

		//parentRef=TypeReference => childRef=TypeReference?
		public Group getGroup() { return cGroup; }

		//parentRef=TypeReference
		public Assignment getParentRefAssignment_0() { return cParentRefAssignment_0; }

		//TypeReference
		public RuleCall getParentRefTypeReferenceParserRuleCall_0_0() { return cParentRefTypeReferenceParserRuleCall_0_0; }

		//=> childRef=TypeReference?
		public Assignment getChildRefAssignment_1() { return cChildRefAssignment_1; }

		//TypeReference
		public RuleCall getChildRefTypeReferenceParserRuleCall_1_0() { return cChildRefTypeReferenceParserRuleCall_1_0; }
	}

	public class TypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cTypeReferenceableCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeReferenceableMODULE_IDTerminalRuleCall_0_0_1 = (RuleCall)cTypeReferenceableCrossReference_0_0.eContents().get(1);
		private final RuleCall cBracedTypeReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeReference returns TypeAssignment:
		//	type=[Referenceable|MODULE_ID] | BracedTypeReference;
		public ParserRule getRule() { return rule; }

		//type=[Referenceable|MODULE_ID] | BracedTypeReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=[Referenceable|MODULE_ID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Referenceable|MODULE_ID]
		public CrossReference getTypeReferenceableCrossReference_0_0() { return cTypeReferenceableCrossReference_0_0; }

		//MODULE_ID
		public RuleCall getTypeReferenceableMODULE_IDTerminalRuleCall_0_0_1() { return cTypeReferenceableMODULE_IDTerminalRuleCall_0_0_1; }

		//BracedTypeReference
		public RuleCall getBracedTypeReferenceParserRuleCall_1() { return cBracedTypeReferenceParserRuleCall_1; }
	}

	public class BracedTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BracedTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkLeftCurlyBracketQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTypeReferenceParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cQuotationMarkRightCurlyBracketQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// A Type reference which is enclosed with "{" "}" 
		//BracedTypeReference returns TypeAssignment:
		//	"\"{\"" TypeReference "\"}\"";
		public ParserRule getRule() { return rule; }

		//"\"{\"" TypeReference "\"}\""
		public Group getGroup() { return cGroup; }

		//"\"{\""
		public Keyword getQuotationMarkLeftCurlyBracketQuotationMarkKeyword_0() { return cQuotationMarkLeftCurlyBracketQuotationMarkKeyword_0; }

		//TypeReference
		public RuleCall getTypeReferenceParserRuleCall_1() { return cTypeReferenceParserRuleCall_1; }

		//"\"}\""
		public Keyword getQuotationMarkRightCurlyBracketQuotationMarkKeyword_2() { return cQuotationMarkRightCurlyBracketQuotationMarkKeyword_2; }
	}

	public class ValueAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueNotationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNotationMacroValueParserRuleCall_1_0 = (RuleCall)cValueNotationAssignment_1.eContents().get(0);
		
		//ValueAssignment:
		//	NEWLINE? valueNotation=MacroValue;
		public ParserRule getRule() { return rule; }

		//NEWLINE? valueNotation=MacroValue
		public Group getGroup() { return cGroup; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//valueNotation=MacroValue
		public Assignment getValueNotationAssignment_1() { return cValueNotationAssignment_1; }

		//MacroValue
		public RuleCall getValueNotationMacroValueParserRuleCall_1_0() { return cValueNotationMacroValueParserRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagTagParserRuleCall_0_0 = (RuleCall)cTagAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cImplicitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cImplicitIMPLICITKeyword_2_0 = (Keyword)cImplicitAssignment_2.eContents().get(0);
		private final Assignment cValueTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueTypesValueTypeParserRuleCall_3_0 = (RuleCall)cValueTypesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cNEWLINETerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cVerticalLineKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueTypesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueTypesValueTypeParserRuleCall_4_2_0 = (RuleCall)cValueTypesAssignment_4_2.eContents().get(0);
		
		//Value:
		//	tag=Tag? NEWLINE* implicit?="IMPLICIT"? valueTypes+=ValueType (NEWLINE* "|" valueTypes+=ValueType)*;
		public ParserRule getRule() { return rule; }

		//tag=Tag? NEWLINE* implicit?="IMPLICIT"? valueTypes+=ValueType (NEWLINE* "|" valueTypes+=ValueType)*
		public Group getGroup() { return cGroup; }

		//tag=Tag?
		public Assignment getTagAssignment_0() { return cTagAssignment_0; }

		//Tag
		public RuleCall getTagTagParserRuleCall_0_0() { return cTagTagParserRuleCall_0_0; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }

		//implicit?="IMPLICIT"?
		public Assignment getImplicitAssignment_2() { return cImplicitAssignment_2; }

		//"IMPLICIT"
		public Keyword getImplicitIMPLICITKeyword_2_0() { return cImplicitIMPLICITKeyword_2_0; }

		//valueTypes+=ValueType
		public Assignment getValueTypesAssignment_3() { return cValueTypesAssignment_3; }

		//ValueType
		public RuleCall getValueTypesValueTypeParserRuleCall_3_0() { return cValueTypesValueTypeParserRuleCall_3_0; }

		//(NEWLINE* "|" valueTypes+=ValueType)*
		public Group getGroup_4() { return cGroup_4; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_4_0() { return cNEWLINETerminalRuleCall_4_0; }

		//"|"
		public Keyword getVerticalLineKeyword_4_1() { return cVerticalLineKeyword_4_1; }

		//valueTypes+=ValueType
		public Assignment getValueTypesAssignment_4_2() { return cValueTypesAssignment_4_2; }

		//ValueType
		public RuleCall getValueTypesValueTypeParserRuleCall_4_2_0() { return cValueTypesValueTypeParserRuleCall_4_2_0; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAPPLICATIONKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTagValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTagValueBIG_INTEGERTerminalRuleCall_2_0 = (RuleCall)cTagValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ASN1 Tagging
		//Tag:
		//	NEWLINE? "[APPLICATION" tagValue=BIG_INTEGER "]";
		public ParserRule getRule() { return rule; }

		//NEWLINE? "[APPLICATION" tagValue=BIG_INTEGER "]"
		public Group getGroup() { return cGroup; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_0() { return cNEWLINETerminalRuleCall_0; }

		//"[APPLICATION"
		public Keyword getAPPLICATIONKeyword_1() { return cAPPLICATIONKeyword_1; }

		//tagValue=BIG_INTEGER
		public Assignment getTagValueAssignment_2() { return cTagValueAssignment_2; }

		//BIG_INTEGER
		public RuleCall getTagValueBIG_INTEGERTerminalRuleCall_2_0() { return cTagValueBIG_INTEGERTerminalRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class ValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamParamAssignmentParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdASN1_IDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cTypesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cTypesTypeReferenceExtParserRuleCall_2_0 = (RuleCall)cTypesAssignment_2.eContents().get(0);
		private final Assignment cSimpleTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSimpleTypeASN1_TYPEParserRuleCall_3_0 = (RuleCall)cSimpleTypeAssignment_3.eContents().get(0);
		private final Assignment cMacroValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cMacroValueMacroValueParserRuleCall_4_0 = (RuleCall)cMacroValueAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cValueTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cOBJECTIDENTIFIERKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//ValueType:
		//	param=ParamAssignment | id=ASN1_ID | types=TypeReferenceExt | simpleType=ASN1_TYPE | macroValue=MacroValue |
		//	{ValueType} "OBJECT IDENTIFIER";
		public ParserRule getRule() { return rule; }

		//param=ParamAssignment | id=ASN1_ID | types=TypeReferenceExt | simpleType=ASN1_TYPE | macroValue=MacroValue | {ValueType}
		//"OBJECT IDENTIFIER"
		public Alternatives getAlternatives() { return cAlternatives; }

		//param=ParamAssignment
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }

		//ParamAssignment
		public RuleCall getParamParamAssignmentParserRuleCall_0_0() { return cParamParamAssignmentParserRuleCall_0_0; }

		//id=ASN1_ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ASN1_ID
		public RuleCall getIdASN1_IDTerminalRuleCall_1_0() { return cIdASN1_IDTerminalRuleCall_1_0; }

		//types=TypeReferenceExt
		public Assignment getTypesAssignment_2() { return cTypesAssignment_2; }

		//TypeReferenceExt
		public RuleCall getTypesTypeReferenceExtParserRuleCall_2_0() { return cTypesTypeReferenceExtParserRuleCall_2_0; }

		//simpleType=ASN1_TYPE
		public Assignment getSimpleTypeAssignment_3() { return cSimpleTypeAssignment_3; }

		//ASN1_TYPE
		public RuleCall getSimpleTypeASN1_TYPEParserRuleCall_3_0() { return cSimpleTypeASN1_TYPEParserRuleCall_3_0; }

		//macroValue=MacroValue
		public Assignment getMacroValueAssignment_4() { return cMacroValueAssignment_4; }

		//MacroValue
		public RuleCall getMacroValueMacroValueParserRuleCall_4_0() { return cMacroValueMacroValueParserRuleCall_4_0; }

		//{ValueType} "OBJECT IDENTIFIER"
		public Group getGroup_5() { return cGroup_5; }

		//{ValueType}
		public Action getValueTypeAction_5_0() { return cValueTypeAction_5_0; }

		//"OBJECT IDENTIFIER"
		public Keyword getOBJECTIDENTIFIERKeyword_5_1() { return cOBJECTIDENTIFIERKeyword_5_1; }
	}

	public class MacroValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MacroValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMacroValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cValueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueTypeMacroValueTypeParserRuleCall_3_0 = (RuleCall)cValueTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MacroValue returns Value:
		//	{MacroValue} "value" "(" valueType=MacroValueType ")";
		public ParserRule getRule() { return rule; }

		//{MacroValue} "value" "(" valueType=MacroValueType ")"
		public Group getGroup() { return cGroup; }

		//{MacroValue}
		public Action getMacroValueAction_0() { return cMacroValueAction_0; }

		//"value"
		public Keyword getValueKeyword_1() { return cValueKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//valueType=MacroValueType
		public Assignment getValueTypeAssignment_3() { return cValueTypeAssignment_3; }

		//MacroValueType
		public RuleCall getValueTypeMacroValueTypeParserRuleCall_3_0() { return cValueTypeMacroValueTypeParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MacroValueTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MacroValueType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cUpdateAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final Keyword cUpdateUpdateKeyword_0_0_0 = (Keyword)cUpdateAssignment_0_0.eContents().get(0);
		private final Assignment cValueCAPAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cValueCAPVALUEKeyword_0_1_0 = (Keyword)cValueCAPAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cRefTypeReferenceParserRuleCall_1_0_0 = (RuleCall)cRefAssignment_1_0.eContents().get(0);
		private final Assignment cOiAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cOiOBJECTIDENTIFIERKeyword_1_1_0 = (Keyword)cOiAssignment_1_1.eContents().get(0);
		private final Assignment cStringAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cStringIA5StringKeyword_1_2_0 = (Keyword)cStringAssignment_1_2.eContents().get(0);
		
		//// Note: Grammar should be 'Update' OR 'VALUE' but this gives a llc error.  
		//MacroValueType:
		//	(update?="Update"? & valueCAP?="VALUE"?) (ref=TypeReference | oi="OBJECT IDENTIFIER" | string="IA5String");
		public ParserRule getRule() { return rule; }

		//(update?="Update"? & valueCAP?="VALUE"?) (ref=TypeReference | oi="OBJECT IDENTIFIER" | string="IA5String")
		public Group getGroup() { return cGroup; }

		//update?="Update"? & valueCAP?="VALUE"?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//update?="Update"?
		public Assignment getUpdateAssignment_0_0() { return cUpdateAssignment_0_0; }

		//"Update"
		public Keyword getUpdateUpdateKeyword_0_0_0() { return cUpdateUpdateKeyword_0_0_0; }

		//valueCAP?="VALUE"?
		public Assignment getValueCAPAssignment_0_1() { return cValueCAPAssignment_0_1; }

		//"VALUE"
		public Keyword getValueCAPVALUEKeyword_0_1_0() { return cValueCAPVALUEKeyword_0_1_0; }

		//ref=TypeReference | oi="OBJECT IDENTIFIER" | string="IA5String"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ref=TypeReference
		public Assignment getRefAssignment_1_0() { return cRefAssignment_1_0; }

		//TypeReference
		public RuleCall getRefTypeReferenceParserRuleCall_1_0_0() { return cRefTypeReferenceParserRuleCall_1_0_0; }

		//oi="OBJECT IDENTIFIER"
		public Assignment getOiAssignment_1_1() { return cOiAssignment_1_1; }

		//"OBJECT IDENTIFIER"
		public Keyword getOiOBJECTIDENTIFIERKeyword_1_1_0() { return cOiOBJECTIDENTIFIERKeyword_1_1_0; }

		//string="IA5String"
		public Assignment getStringAssignment_1_2() { return cStringAssignment_1_2; }

		//"IA5String"
		public Keyword getStringIA5StringKeyword_1_2_0() { return cStringIA5StringKeyword_1_2_0; }
	}

	public class ASN1_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cASN1_SIMPLEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cASN1_CHOICEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cASN1_SEQUENCEParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Simple and structured types. 
		//ASN1_TYPE:
		//	ASN1_SIMPLE | ASN1_CHOICE | ASN1_SEQUENCE;
		public ParserRule getRule() { return rule; }

		//ASN1_SIMPLE | ASN1_CHOICE | ASN1_SEQUENCE
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASN1_SIMPLE
		public RuleCall getASN1_SIMPLEParserRuleCall_0() { return cASN1_SIMPLEParserRuleCall_0; }

		//ASN1_CHOICE
		public RuleCall getASN1_CHOICEParserRuleCall_1() { return cASN1_CHOICEParserRuleCall_1; }

		//ASN1_SEQUENCE
		public RuleCall getASN1_SEQUENCEParserRuleCall_2() { return cASN1_SEQUENCEParserRuleCall_2; }
	}

	public class ASN1_SIMPLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_SIMPLE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cASN1_SIMPLEAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEmptyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cASN1_SIMPLEAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cIA5STRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cASN1_OCTET_STRINGParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cConstraintAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConstraintASN1_SUBTYPEParserRuleCall_2_1_0 = (RuleCall)cConstraintAssignment_2_1.eContents().get(0);
		private final RuleCall cASN1_INTEGERParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// -- the "base types" defined here are:
		//// --   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER
		//ASN1_SIMPLE returns ASN1_TYPE:
		//	{ASN1_SIMPLE} "empty" | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER;
		public ParserRule getRule() { return rule; }

		//{ASN1_SIMPLE} "empty" | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ASN1_SIMPLE} "empty"
		public Group getGroup_0() { return cGroup_0; }

		//{ASN1_SIMPLE}
		public Action getASN1_SIMPLEAction_0_0() { return cASN1_SIMPLEAction_0_0; }

		//"empty"
		public Keyword getEmptyKeyword_0_1() { return cEmptyKeyword_0_1; }

		//{ASN1_SIMPLE} IA5STRING
		public Group getGroup_1() { return cGroup_1; }

		//{ASN1_SIMPLE}
		public Action getASN1_SIMPLEAction_1_0() { return cASN1_SIMPLEAction_1_0; }

		//IA5STRING
		public RuleCall getIA5STRINGTerminalRuleCall_1_1() { return cIA5STRINGTerminalRuleCall_1_1; }

		//ASN1_OCTET_STRING constraint=ASN1_SUBTYPE?
		public Group getGroup_2() { return cGroup_2; }

		//ASN1_OCTET_STRING
		public RuleCall getASN1_OCTET_STRINGParserRuleCall_2_0() { return cASN1_OCTET_STRINGParserRuleCall_2_0; }

		//constraint=ASN1_SUBTYPE?
		public Assignment getConstraintAssignment_2_1() { return cConstraintAssignment_2_1; }

		//ASN1_SUBTYPE
		public RuleCall getConstraintASN1_SUBTYPEParserRuleCall_2_1_0() { return cConstraintASN1_SUBTYPEParserRuleCall_2_1_0; }

		//ASN1_INTEGER
		public RuleCall getASN1_INTEGERParserRuleCall_3() { return cASN1_INTEGERParserRuleCall_3; }
	}

	public class ASN1_OCTET_STRINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_OCTET_STRING");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cASN1_OCTET_STRINGAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOCTETKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSTRINGKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ASN1_OCTET_STRING returns ASN1_SIMPLE:
		//	{ASN1_OCTET_STRING} "OCTET" "STRING";
		public ParserRule getRule() { return rule; }

		//{ASN1_OCTET_STRING} "OCTET" "STRING"
		public Group getGroup() { return cGroup; }

		//{ASN1_OCTET_STRING}
		public Action getASN1_OCTET_STRINGAction_0() { return cASN1_OCTET_STRINGAction_0; }

		//"OCTET"
		public Keyword getOCTETKeyword_1() { return cOCTETKeyword_1; }

		//"STRING"
		public Keyword getSTRINGKeyword_2() { return cSTRINGKeyword_2; }
	}

	public class ASN1_INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_INTEGER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameINTEGERKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRangeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRangeASN1_RANGEParserRuleCall_1_1_0 = (RuleCall)cRangeAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRefinementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefinementASN1_INTEGER_REFINEMENTParserRuleCall_2_0 = (RuleCall)cRefinementAssignment_2.eContents().get(0);
		
		//// Support for Type refinement, like in TEXTUAL-CONVENTION, SYNTAX type definition 
		//ASN1_INTEGER returns ASN1_SIMPLE:
		//	name="INTEGER" ("(" range=ASN1_RANGE ")")? refinement=ASN1_INTEGER_REFINEMENT?;
		public ParserRule getRule() { return rule; }

		//name="INTEGER" ("(" range=ASN1_RANGE ")")? refinement=ASN1_INTEGER_REFINEMENT?
		public Group getGroup() { return cGroup; }

		//name="INTEGER"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"INTEGER"
		public Keyword getNameINTEGERKeyword_0_0() { return cNameINTEGERKeyword_0_0; }

		//("(" range=ASN1_RANGE ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//range=ASN1_RANGE
		public Assignment getRangeAssignment_1_1() { return cRangeAssignment_1_1; }

		//ASN1_RANGE
		public RuleCall getRangeASN1_RANGEParserRuleCall_1_1_0() { return cRangeASN1_RANGEParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//refinement=ASN1_INTEGER_REFINEMENT?
		public Assignment getRefinementAssignment_2() { return cRefinementAssignment_2; }

		//ASN1_INTEGER_REFINEMENT
		public RuleCall getRefinementASN1_INTEGER_REFINEMENTParserRuleCall_2_0() { return cRefinementASN1_INTEGER_REFINEMENTParserRuleCall_2_0; }
	}

	public class ASN1_INTEGER_REFINEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_INTEGER_REFINEMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRefinementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRefinementsASN1_IDTerminalRuleCall_1_1_0 = (RuleCall)cRefinementsAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cIntsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cIntsBIG_INTEGERTerminalRuleCall_1_3_0 = (RuleCall)cIntsAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cRefinementsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRefinementsASN1_IDTerminalRuleCall_2_2_0 = (RuleCall)cRefinementsAssignment_2_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cIntsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cIntsBIG_INTEGERTerminalRuleCall_2_4_0 = (RuleCall)cIntsAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final RuleCall cNEWLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ASN1_INTEGER_REFINEMENT:
		//	"{" (NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER ")") ("," NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER
		//	")")* NEWLINE* "}";
		public ParserRule getRule() { return rule; }

		//"{" (NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER ")") ("," NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER
		//")")* NEWLINE* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER ")"
		public Group getGroup_1() { return cGroup_1; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_1_0() { return cNEWLINETerminalRuleCall_1_0; }

		//refinements+=ASN1_ID
		public Assignment getRefinementsAssignment_1_1() { return cRefinementsAssignment_1_1; }

		//ASN1_ID
		public RuleCall getRefinementsASN1_IDTerminalRuleCall_1_1_0() { return cRefinementsASN1_IDTerminalRuleCall_1_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//ints+=BIG_INTEGER
		public Assignment getIntsAssignment_1_3() { return cIntsAssignment_1_3; }

		//BIG_INTEGER
		public RuleCall getIntsBIG_INTEGERTerminalRuleCall_1_3_0() { return cIntsBIG_INTEGERTerminalRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }

		//("," NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER ")")*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_2_1() { return cNEWLINETerminalRuleCall_2_1; }

		//refinements+=ASN1_ID
		public Assignment getRefinementsAssignment_2_2() { return cRefinementsAssignment_2_2; }

		//ASN1_ID
		public RuleCall getRefinementsASN1_IDTerminalRuleCall_2_2_0() { return cRefinementsASN1_IDTerminalRuleCall_2_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_3() { return cLeftParenthesisKeyword_2_3; }

		//ints+=BIG_INTEGER
		public Assignment getIntsAssignment_2_4() { return cIntsAssignment_2_4; }

		//BIG_INTEGER
		public RuleCall getIntsBIG_INTEGERTerminalRuleCall_2_4_0() { return cIntsBIG_INTEGERTerminalRuleCall_2_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//NEWLINE*
		public RuleCall getNEWLINETerminalRuleCall_3() { return cNEWLINETerminalRuleCall_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ASN1_SUBTYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_SUBTYPE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSIZEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRangesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRangesASN1_RANGEParserRuleCall_3_0 = (RuleCall)cRangesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRangesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRangesASN1_RANGEParserRuleCall_4_1_0 = (RuleCall)cRangesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// Is this needed? 
		////	'{' (valuePairs+=ASN1_VALUEPAIR)+ '}';
		//ASN1_SUBTYPE returns ASN1_SIMPLE:
		//	"(" "SIZE" "(" ranges+=ASN1_RANGE ("|" ranges+=ASN1_RANGE)* ")" ")";
		public ParserRule getRule() { return rule; }

		//"(" "SIZE" "(" ranges+=ASN1_RANGE ("|" ranges+=ASN1_RANGE)* ")" ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"SIZE"
		public Keyword getSIZEKeyword_1() { return cSIZEKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//ranges+=ASN1_RANGE
		public Assignment getRangesAssignment_3() { return cRangesAssignment_3; }

		//ASN1_RANGE
		public RuleCall getRangesASN1_RANGEParserRuleCall_3_0() { return cRangesASN1_RANGEParserRuleCall_3_0; }

		//("|" ranges+=ASN1_RANGE)*
		public Group getGroup_4() { return cGroup_4; }

		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }

		//ranges+=ASN1_RANGE
		public Assignment getRangesAssignment_4_1() { return cRangesAssignment_4_1; }

		//ASN1_RANGE
		public RuleCall getRangesASN1_RANGEParserRuleCall_4_1_0() { return cRangesASN1_RANGEParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class ASN1_RANGEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_RANGE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cASN1_RANGEAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueBIG_INTEGERTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStartAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStartBIG_INTEGERTerminalRuleCall_1_0_0 = (RuleCall)cStartAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndBIG_INTEGERTerminalRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		
		//ASN1_RANGE:
		//	{ASN1_RANGE} value=BIG_INTEGER | start=BIG_INTEGER ".." end=BIG_INTEGER;
		public ParserRule getRule() { return rule; }

		//{ASN1_RANGE} value=BIG_INTEGER | start=BIG_INTEGER ".." end=BIG_INTEGER
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ASN1_RANGE} value=BIG_INTEGER
		public Group getGroup_0() { return cGroup_0; }

		//{ASN1_RANGE}
		public Action getASN1_RANGEAction_0_0() { return cASN1_RANGEAction_0_0; }

		//value=BIG_INTEGER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//BIG_INTEGER
		public RuleCall getValueBIG_INTEGERTerminalRuleCall_0_1_0() { return cValueBIG_INTEGERTerminalRuleCall_0_1_0; }

		//start=BIG_INTEGER ".." end=BIG_INTEGER
		public Group getGroup_1() { return cGroup_1; }

		//start=BIG_INTEGER
		public Assignment getStartAssignment_1_0() { return cStartAssignment_1_0; }

		//BIG_INTEGER
		public RuleCall getStartBIG_INTEGERTerminalRuleCall_1_0_0() { return cStartBIG_INTEGERTerminalRuleCall_1_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1_1() { return cFullStopFullStopKeyword_1_1; }

		//end=BIG_INTEGER
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//BIG_INTEGER
		public RuleCall getEndBIG_INTEGERTerminalRuleCall_1_2_0() { return cEndBIG_INTEGERTerminalRuleCall_1_2_0; }
	}

	public class ASN1_CHOICEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_CHOICE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCHOICEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cChoiceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_3_0 = (RuleCall)cChoiceTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cChoiceTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_4_2_0 = (RuleCall)cChoiceTypeAssignment_4_2.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//// TODO1 Requries further definition. 	
		////Choice:
		//// http://www.obj-sys.com/asn1tutorial/node11.html
		//ASN1_CHOICE:
		//	"CHOICE" "{" NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY ("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)* NEWLINE+ "}";
		public ParserRule getRule() { return rule; }

		//"CHOICE" "{" NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY ("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)* NEWLINE+ "}"
		public Group getGroup() { return cGroup; }

		//"CHOICE"
		public Keyword getCHOICEKeyword_0() { return cCHOICEKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }

		//choiceType+=ASN1_CHOICE_ENTRY
		public Assignment getChoiceTypeAssignment_3() { return cChoiceTypeAssignment_3; }

		//ASN1_CHOICE_ENTRY
		public RuleCall getChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_3_0() { return cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_3_0; }

		//("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_4_1() { return cNEWLINETerminalRuleCall_4_1; }

		//choiceType+=ASN1_CHOICE_ENTRY
		public Assignment getChoiceTypeAssignment_4_2() { return cChoiceTypeAssignment_4_2; }

		//ASN1_CHOICE_ENTRY
		public RuleCall getChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_4_2_0() { return cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_4_2_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ASN1_SEQUENCEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_SEQUENCE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSEQUENCEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNEWLINETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cChoiceTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_3_0 = (RuleCall)cChoiceTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Assignment cChoiceTypeAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_4_2_0 = (RuleCall)cChoiceTypeAssignment_4_2.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ASN1_SEQUENCE:
		//	"SEQUENCE" "{" NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY ("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)* NEWLINE+ "}";
		public ParserRule getRule() { return rule; }

		//"SEQUENCE" "{" NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY ("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)* NEWLINE+ "}"
		public Group getGroup() { return cGroup; }

		//"SEQUENCE"
		public Keyword getSEQUENCEKeyword_0() { return cSEQUENCEKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_2() { return cNEWLINETerminalRuleCall_2; }

		//choiceType+=ASN1_CHOICE_ENTRY
		public Assignment getChoiceTypeAssignment_3() { return cChoiceTypeAssignment_3; }

		//ASN1_CHOICE_ENTRY
		public RuleCall getChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_3_0() { return cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_3_0; }

		//("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_4_1() { return cNEWLINETerminalRuleCall_4_1; }

		//choiceType+=ASN1_CHOICE_ENTRY
		public Assignment getChoiceTypeAssignment_4_2() { return cChoiceTypeAssignment_4_2; }

		//ASN1_CHOICE_ENTRY
		public RuleCall getChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_4_2_0() { return cChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_4_2_0; }

		//NEWLINE+
		public RuleCall getNEWLINETerminalRuleCall_5() { return cNEWLINETerminalRuleCall_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ASN1_SEQUENCE_OFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_SEQUENCE_OF");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSEQUENCEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefTypeReferenceParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		
		//ASN1_SEQUENCE_OF:
		//	"SEQUENCE" "OF" ref=TypeReference;
		public ParserRule getRule() { return rule; }

		//"SEQUENCE" "OF" ref=TypeReference
		public Group getGroup() { return cGroup; }

		//"SEQUENCE"
		public Keyword getSEQUENCEKeyword_0() { return cSEQUENCEKeyword_0; }

		//"OF"
		public Keyword getOFKeyword_1() { return cOFKeyword_1; }

		//ref=TypeReference
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//TypeReference
		public RuleCall getRefTypeReferenceParserRuleCall_2_0() { return cRefTypeReferenceParserRuleCall_2_0; }
	}

	public class ASN1_CHOICE_ENTRYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_CHOICE_ENTRY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdASN1_IDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final RuleCall cNEWLINETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueTypeChoiceTypeParserRuleCall_2_0 = (RuleCall)cValueTypeAssignment_2.eContents().get(0);
		
		//// TODO1 The reference to a ValueType is indented by 4 WS on the next line. 
		////  
		//ASN1_CHOICE_ENTRY:
		//	id=ASN1_ID NEWLINE? valueType=ChoiceType;
		public ParserRule getRule() { return rule; }

		//id=ASN1_ID NEWLINE? valueType=ChoiceType
		public Group getGroup() { return cGroup; }

		//id=ASN1_ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ASN1_ID
		public RuleCall getIdASN1_IDTerminalRuleCall_0_0() { return cIdASN1_IDTerminalRuleCall_0_0; }

		//NEWLINE?
		public RuleCall getNEWLINETerminalRuleCall_1() { return cNEWLINETerminalRuleCall_1; }

		//valueType=ChoiceType
		public Assignment getValueTypeAssignment_2() { return cValueTypeAssignment_2; }

		//ChoiceType
		public RuleCall getValueTypeChoiceTypeParserRuleCall_2_0() { return cValueTypeChoiceTypeParserRuleCall_2_0; }
	}

	public class ChoiceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChoiceType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChoiceTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cTypeRefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cTypeRefTypeReferenceParserRuleCall_1_0_0 = (RuleCall)cTypeRefAssignment_1_0.eContents().get(0);
		private final Assignment cSimpleTypeAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSimpleTypeASN1_TYPEParserRuleCall_1_1_0 = (RuleCall)cSimpleTypeAssignment_1_1.eContents().get(0);
		private final Keyword cOBJECTIDENTIFIERKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//ChoiceType:
		//	{ChoiceType} (typeRef=TypeReference | simpleType=ASN1_TYPE | "OBJECT IDENTIFIER");
		public ParserRule getRule() { return rule; }

		//{ChoiceType} (typeRef=TypeReference | simpleType=ASN1_TYPE | "OBJECT IDENTIFIER")
		public Group getGroup() { return cGroup; }

		//{ChoiceType}
		public Action getChoiceTypeAction_0() { return cChoiceTypeAction_0; }

		//typeRef=TypeReference | simpleType=ASN1_TYPE | "OBJECT IDENTIFIER"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//typeRef=TypeReference
		public Assignment getTypeRefAssignment_1_0() { return cTypeRefAssignment_1_0; }

		//TypeReference
		public RuleCall getTypeRefTypeReferenceParserRuleCall_1_0_0() { return cTypeRefTypeReferenceParserRuleCall_1_0_0; }

		//simpleType=ASN1_TYPE
		public Assignment getSimpleTypeAssignment_1_1() { return cSimpleTypeAssignment_1_1; }

		//ASN1_TYPE
		public RuleCall getSimpleTypeASN1_TYPEParserRuleCall_1_1_0() { return cSimpleTypeASN1_TYPEParserRuleCall_1_1_0; }

		//"OBJECT IDENTIFIER"
		public Keyword getOBJECTIDENTIFIERKeyword_1_2() { return cOBJECTIDENTIFIERKeyword_1_2; }
	}
	
	
	private ModuleElements pModule;
	private ImportsElements pImports;
	private ImportClosureElements pImportClosure;
	private ImportRefsElements pImportRefs;
	private ImportRefElements pImportRef;
	private ObjectReferenceableElements pObjectReferenceable;
	private ObjectElements pObject;
	private ObjectReferenceElements pObjectReference;
	private AttributeElements pAttribute;
	private AttributeValueElements pAttributeValue;
	private IdentifierElements pIdentifier;
	private BracedObjectReferenceElements pBracedObjectReference;
	private ReferenceableElements pReferenceable;
	private TypeDefinitionElements pTypeDefinition;
	private MacroElements pMacro;
	private TypeNotationElements pTypeNotation;
	private ValueNotationElements pValueNotation;
	private TypeAssignmentElements pTypeAssignment;
	private ParamAssignmentElements pParamAssignment;
	private TypeNotationRightElements pTypeNotationRight;
	private TypeReferenceExtElements pTypeReferenceExt;
	private TypeReferenceElements pTypeReference;
	private BracedTypeReferenceElements pBracedTypeReference;
	private ValueAssignmentElements pValueAssignment;
	private ValueElements pValue;
	private TagElements pTag;
	private ValueTypeElements pValueType;
	private MacroValueElements pMacroValue;
	private MacroValueTypeElements pMacroValueType;
	private ASN1_TYPEElements pASN1_TYPE;
	private ASN1_SIMPLEElements pASN1_SIMPLE;
	private ASN1_OCTET_STRINGElements pASN1_OCTET_STRING;
	private ASN1_INTEGERElements pASN1_INTEGER;
	private ASN1_INTEGER_REFINEMENTElements pASN1_INTEGER_REFINEMENT;
	private ASN1_SUBTYPEElements pASN1_SUBTYPE;
	private ASN1_RANGEElements pASN1_RANGE;
	private ASN1_CHOICEElements pASN1_CHOICE;
	private ASN1_SEQUENCEElements pASN1_SEQUENCE;
	private ASN1_SEQUENCE_OFElements pASN1_SEQUENCE_OF;
	private ASN1_CHOICE_ENTRYElements pASN1_CHOICE_ENTRY;
	private ChoiceTypeElements pChoiceType;
	private TerminalRule tMODULE_ID;
	private TerminalRule tASN1_ID;
	private TerminalRule tPARAMETER;
	private TerminalRule tIA5STRING;
	private TerminalRule tALPHA;
	private TerminalRule tALPHA_CAP;
	private TerminalRule tNUMERIC;
	private TerminalRule tBIG_INTEGER;
	private TerminalRule tSL_ASN1_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tNEWLINE;
	private TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public SmiGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.netxforge.Smi".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Module:
	//	name=MODULE_ID "DEFINITIONS" "::=" "BEGIN" imports=Imports? (objects+=ObjectReferenceable | types+=Referenceable)+
	//	NEWLINE+ "END" NEWLINE*;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Imports:
	//	NEWLINE+ "IMPORTS" imports+=ImportClosure+ ";";
	public ImportsElements getImportsAccess() {
		return (pImports != null) ? pImports : (pImports = new ImportsElements());
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}

	////ImportClosure:
	////	'FROM' importURI=MODULE_ID;
	//ImportClosure:
	//	refs=ImportRefs NEWLINE* "FROM" importURI=MODULE_ID;
	public ImportClosureElements getImportClosureAccess() {
		return (pImportClosure != null) ? pImportClosure : (pImportClosure = new ImportClosureElements());
	}
	
	public ParserRule getImportClosureRule() {
		return getImportClosureAccess().getRule();
	}

	//// Consists of OID, Macro, Type usage Refs. 
	//ImportRefs:
	//	NEWLINE* refs+=ImportRef ("," NEWLINE* refs+=ImportRef)*;
	public ImportRefsElements getImportRefsAccess() {
		return (pImportRefs != null) ? pImportRefs : (pImportRefs = new ImportRefsElements());
	}
	
	public ParserRule getImportRefsRule() {
		return getImportRefsAccess().getRule();
	}

	//ImportRef:
	//	oiRef=[ObjectReferenceable|ASN1_ID] | typeRef=[Referenceable|MODULE_ID];
	public ImportRefElements getImportRefAccess() {
		return (pImportRef != null) ? pImportRef : (pImportRef = new ImportRefElements());
	}
	
	public ParserRule getImportRefRule() {
		return getImportRefAccess().getRule();
	}

	//ObjectReferenceable:
	//	NEWLINE+ name=ASN1_ID NEWLINE* ("OBJECT IDENTIFIER" | object=Object) NEWLINE* "::=" "{" objectValue=ObjectReference
	//	"}";
	public ObjectReferenceableElements getObjectReferenceableAccess() {
		return (pObjectReferenceable != null) ? pObjectReferenceable : (pObjectReferenceable = new ObjectReferenceableElements());
	}
	
	public ParserRule getObjectReferenceableRule() {
		return getObjectReferenceableAccess().getRule();
	}

	//Object:
	//	macroRef=[Referenceable|MODULE_ID] attributes+=Attribute+;
	public ObjectElements getObjectAccess() {
		return (pObject != null) ? pObject : (pObject = new ObjectElements());
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}

	//// The value of the Object identifier	
	//ObjectReference:
	//	(name=ASN1_ID | => descriptorRef=[ObjectReferenceable|ASN1_ID])? subIds+=BIG_INTEGER subIds+=BIG_INTEGER*;
	public ObjectReferenceElements getObjectReferenceAccess() {
		return (pObjectReference != null) ? pObjectReference : (pObjectReference = new ObjectReferenceElements());
	}
	
	public ParserRule getObjectReferenceRule() {
		return getObjectReferenceAccess().getRule();
	}

	//Attribute:
	//	NEWLINE+ paramRef=[Referenceable|MODULE_ID] value=AttributeValue;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//// The Identifier is very often an enum
	//AttributeValue:
	//	NEWLINE* (identifier=Identifier | text=IA5STRING | typeRef=[Referenceable|MODULE_ID] subType=ASN1_SUBTYPE?) |
	//	objectRef=BracedObjectReference | integer=ASN1_INTEGER | sequenceOf=ASN1_SEQUENCE_OF | {AttributeValue}
	//	"OBJECT IDENTIFIER";
	public AttributeValueElements getAttributeValueAccess() {
		return (pAttributeValue != null) ? pAttributeValue : (pAttributeValue = new AttributeValueElements());
	}
	
	public ParserRule getAttributeValueRule() {
		return getAttributeValueAccess().getRule();
	}

	//Identifier:
	//	id=ASN1_ID;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//BracedObjectReference:
	//	"{" objectRef=[ObjectReferenceable|ASN1_ID] "}";
	public BracedObjectReferenceElements getBracedObjectReferenceAccess() {
		return (pBracedObjectReference != null) ? pBracedObjectReference : (pBracedObjectReference = new BracedObjectReferenceElements());
	}
	
	public ParserRule getBracedObjectReferenceRule() {
		return getBracedObjectReferenceAccess().getRule();
	}

	//Referenceable:
	//	Macro | TypeDefinition;
	public ReferenceableElements getReferenceableAccess() {
		return (pReferenceable != null) ? pReferenceable : (pReferenceable = new ReferenceableElements());
	}
	
	public ParserRule getReferenceableRule() {
		return getReferenceableAccess().getRule();
	}

	//// An ASN.1 Value assignment. 
	//TypeDefinition returns Referenceable:
	//	NEWLINE+ name=MODULE_ID "::=" values+=Value+;
	public TypeDefinitionElements getTypeDefinitionAccess() {
		return (pTypeDefinition != null) ? pTypeDefinition : (pTypeDefinition = new TypeDefinitionElements());
	}
	
	public ParserRule getTypeDefinitionRule() {
		return getTypeDefinitionAccess().getRule();
	}

	//// An ASN.1 Macro structure
	//Macro returns Referenceable:
	//	NEWLINE+ name=MODULE_ID "MACRO" "::=" NEWLINE+ "BEGIN" typeNotation=TypeNotation valueNotation=ValueNotation // Define 1 or more type definitions
	//	innerTypes+=TypeDefinition+ NEWLINE+ "END";
	public MacroElements getMacroAccess() {
		return (pMacro != null) ? pMacro : (pMacro = new MacroElements());
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}

	//TypeNotation:
	//	NEWLINE+ name="TYPE" "NOTATION" "::=" // Reference one or more type assignment.
	//	typeNotations+=TypeAssignment+;
	public TypeNotationElements getTypeNotationAccess() {
		return (pTypeNotation != null) ? pTypeNotation : (pTypeNotation = new TypeNotationElements());
	}
	
	public ParserRule getTypeNotationRule() {
		return getTypeNotationAccess().getRule();
	}

	//ValueNotation:
	//	NEWLINE+ name="VALUE" "NOTATION" "::=" // Define one Macro value.
	//	valueNotations+=ValueAssignment+;
	public ValueNotationElements getValueNotationAccess() {
		return (pValueNotation != null) ? pValueNotation : (pValueNotation = new ValueNotationElements());
	}
	
	public ParserRule getValueNotationRule() {
		return getValueNotationAccess().getRule();
	}

	//// An ASN.1 Macro Type Notation, it's slightly different then  a type definition. 
	//TypeAssignment:
	//	NEWLINE+ (ParamAssignment | TypeReference | MacroValue);
	public TypeAssignmentElements getTypeAssignmentAccess() {
		return (pTypeAssignment != null) ? pTypeAssignment : (pTypeAssignment = new TypeAssignmentElements());
	}
	
	public ParserRule getTypeAssignmentRule() {
		return getTypeAssignmentAccess().getRule();
	}

	//// An ASN.1 Parameter assignment
	//ParamAssignment returns Referenceable:
	//	name=PARAMETER right=TypeNotationRight;
	public ParamAssignmentElements getParamAssignmentAccess() {
		return (pParamAssignment != null) ? pParamAssignment : (pParamAssignment = new ParamAssignmentElements());
	}
	
	public ParserRule getParamAssignmentRule() {
		return getParamAssignmentAccess().getRule();
	}

	//TypeNotationRight:
	//	TypeReference | value=MacroValue;
	public TypeNotationRightElements getTypeNotationRightAccess() {
		return (pTypeNotationRight != null) ? pTypeNotationRight : (pTypeNotationRight = new TypeNotationRightElements());
	}
	
	public ParserRule getTypeNotationRightRule() {
		return getTypeNotationRightAccess().getRule();
	}

	//// Types can be referred once or twice. The right side is named a child reference.
	//// The Right-hand side can also be a 
	//TypeReferenceExt returns TypeAssignment:
	//	parentRef=TypeReference => childRef=TypeReference?;
	public TypeReferenceExtElements getTypeReferenceExtAccess() {
		return (pTypeReferenceExt != null) ? pTypeReferenceExt : (pTypeReferenceExt = new TypeReferenceExtElements());
	}
	
	public ParserRule getTypeReferenceExtRule() {
		return getTypeReferenceExtAccess().getRule();
	}

	//TypeReference returns TypeAssignment:
	//	type=[Referenceable|MODULE_ID] | BracedTypeReference;
	public TypeReferenceElements getTypeReferenceAccess() {
		return (pTypeReference != null) ? pTypeReference : (pTypeReference = new TypeReferenceElements());
	}
	
	public ParserRule getTypeReferenceRule() {
		return getTypeReferenceAccess().getRule();
	}

	//// A Type reference which is enclosed with "{" "}" 
	//BracedTypeReference returns TypeAssignment:
	//	"\"{\"" TypeReference "\"}\"";
	public BracedTypeReferenceElements getBracedTypeReferenceAccess() {
		return (pBracedTypeReference != null) ? pBracedTypeReference : (pBracedTypeReference = new BracedTypeReferenceElements());
	}
	
	public ParserRule getBracedTypeReferenceRule() {
		return getBracedTypeReferenceAccess().getRule();
	}

	//ValueAssignment:
	//	NEWLINE? valueNotation=MacroValue;
	public ValueAssignmentElements getValueAssignmentAccess() {
		return (pValueAssignment != null) ? pValueAssignment : (pValueAssignment = new ValueAssignmentElements());
	}
	
	public ParserRule getValueAssignmentRule() {
		return getValueAssignmentAccess().getRule();
	}

	//Value:
	//	tag=Tag? NEWLINE* implicit?="IMPLICIT"? valueTypes+=ValueType (NEWLINE* "|" valueTypes+=ValueType)*;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//// ASN1 Tagging
	//Tag:
	//	NEWLINE? "[APPLICATION" tagValue=BIG_INTEGER "]";
	public TagElements getTagAccess() {
		return (pTag != null) ? pTag : (pTag = new TagElements());
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//ValueType:
	//	param=ParamAssignment | id=ASN1_ID | types=TypeReferenceExt | simpleType=ASN1_TYPE | macroValue=MacroValue |
	//	{ValueType} "OBJECT IDENTIFIER";
	public ValueTypeElements getValueTypeAccess() {
		return (pValueType != null) ? pValueType : (pValueType = new ValueTypeElements());
	}
	
	public ParserRule getValueTypeRule() {
		return getValueTypeAccess().getRule();
	}

	//MacroValue returns Value:
	//	{MacroValue} "value" "(" valueType=MacroValueType ")";
	public MacroValueElements getMacroValueAccess() {
		return (pMacroValue != null) ? pMacroValue : (pMacroValue = new MacroValueElements());
	}
	
	public ParserRule getMacroValueRule() {
		return getMacroValueAccess().getRule();
	}

	//// Note: Grammar should be 'Update' OR 'VALUE' but this gives a llc error.  
	//MacroValueType:
	//	(update?="Update"? & valueCAP?="VALUE"?) (ref=TypeReference | oi="OBJECT IDENTIFIER" | string="IA5String");
	public MacroValueTypeElements getMacroValueTypeAccess() {
		return (pMacroValueType != null) ? pMacroValueType : (pMacroValueType = new MacroValueTypeElements());
	}
	
	public ParserRule getMacroValueTypeRule() {
		return getMacroValueTypeAccess().getRule();
	}

	//// Simple and structured types. 
	//ASN1_TYPE:
	//	ASN1_SIMPLE | ASN1_CHOICE | ASN1_SEQUENCE;
	public ASN1_TYPEElements getASN1_TYPEAccess() {
		return (pASN1_TYPE != null) ? pASN1_TYPE : (pASN1_TYPE = new ASN1_TYPEElements());
	}
	
	public ParserRule getASN1_TYPERule() {
		return getASN1_TYPEAccess().getRule();
	}

	//// -- the "base types" defined here are:
	//// --   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER
	//ASN1_SIMPLE returns ASN1_TYPE:
	//	{ASN1_SIMPLE} "empty" | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER;
	public ASN1_SIMPLEElements getASN1_SIMPLEAccess() {
		return (pASN1_SIMPLE != null) ? pASN1_SIMPLE : (pASN1_SIMPLE = new ASN1_SIMPLEElements());
	}
	
	public ParserRule getASN1_SIMPLERule() {
		return getASN1_SIMPLEAccess().getRule();
	}

	//ASN1_OCTET_STRING returns ASN1_SIMPLE:
	//	{ASN1_OCTET_STRING} "OCTET" "STRING";
	public ASN1_OCTET_STRINGElements getASN1_OCTET_STRINGAccess() {
		return (pASN1_OCTET_STRING != null) ? pASN1_OCTET_STRING : (pASN1_OCTET_STRING = new ASN1_OCTET_STRINGElements());
	}
	
	public ParserRule getASN1_OCTET_STRINGRule() {
		return getASN1_OCTET_STRINGAccess().getRule();
	}

	//// Support for Type refinement, like in TEXTUAL-CONVENTION, SYNTAX type definition 
	//ASN1_INTEGER returns ASN1_SIMPLE:
	//	name="INTEGER" ("(" range=ASN1_RANGE ")")? refinement=ASN1_INTEGER_REFINEMENT?;
	public ASN1_INTEGERElements getASN1_INTEGERAccess() {
		return (pASN1_INTEGER != null) ? pASN1_INTEGER : (pASN1_INTEGER = new ASN1_INTEGERElements());
	}
	
	public ParserRule getASN1_INTEGERRule() {
		return getASN1_INTEGERAccess().getRule();
	}

	//ASN1_INTEGER_REFINEMENT:
	//	"{" (NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER ")") ("," NEWLINE* refinements+=ASN1_ID "(" ints+=BIG_INTEGER
	//	")")* NEWLINE* "}";
	public ASN1_INTEGER_REFINEMENTElements getASN1_INTEGER_REFINEMENTAccess() {
		return (pASN1_INTEGER_REFINEMENT != null) ? pASN1_INTEGER_REFINEMENT : (pASN1_INTEGER_REFINEMENT = new ASN1_INTEGER_REFINEMENTElements());
	}
	
	public ParserRule getASN1_INTEGER_REFINEMENTRule() {
		return getASN1_INTEGER_REFINEMENTAccess().getRule();
	}

	//// Is this needed? 
	////	'{' (valuePairs+=ASN1_VALUEPAIR)+ '}';
	//ASN1_SUBTYPE returns ASN1_SIMPLE:
	//	"(" "SIZE" "(" ranges+=ASN1_RANGE ("|" ranges+=ASN1_RANGE)* ")" ")";
	public ASN1_SUBTYPEElements getASN1_SUBTYPEAccess() {
		return (pASN1_SUBTYPE != null) ? pASN1_SUBTYPE : (pASN1_SUBTYPE = new ASN1_SUBTYPEElements());
	}
	
	public ParserRule getASN1_SUBTYPERule() {
		return getASN1_SUBTYPEAccess().getRule();
	}

	//ASN1_RANGE:
	//	{ASN1_RANGE} value=BIG_INTEGER | start=BIG_INTEGER ".." end=BIG_INTEGER;
	public ASN1_RANGEElements getASN1_RANGEAccess() {
		return (pASN1_RANGE != null) ? pASN1_RANGE : (pASN1_RANGE = new ASN1_RANGEElements());
	}
	
	public ParserRule getASN1_RANGERule() {
		return getASN1_RANGEAccess().getRule();
	}

	//// TODO1 Requries further definition. 	
	////Choice:
	//// http://www.obj-sys.com/asn1tutorial/node11.html
	//ASN1_CHOICE:
	//	"CHOICE" "{" NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY ("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)* NEWLINE+ "}";
	public ASN1_CHOICEElements getASN1_CHOICEAccess() {
		return (pASN1_CHOICE != null) ? pASN1_CHOICE : (pASN1_CHOICE = new ASN1_CHOICEElements());
	}
	
	public ParserRule getASN1_CHOICERule() {
		return getASN1_CHOICEAccess().getRule();
	}

	//ASN1_SEQUENCE:
	//	"SEQUENCE" "{" NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY ("," NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)* NEWLINE+ "}";
	public ASN1_SEQUENCEElements getASN1_SEQUENCEAccess() {
		return (pASN1_SEQUENCE != null) ? pASN1_SEQUENCE : (pASN1_SEQUENCE = new ASN1_SEQUENCEElements());
	}
	
	public ParserRule getASN1_SEQUENCERule() {
		return getASN1_SEQUENCEAccess().getRule();
	}

	//ASN1_SEQUENCE_OF:
	//	"SEQUENCE" "OF" ref=TypeReference;
	public ASN1_SEQUENCE_OFElements getASN1_SEQUENCE_OFAccess() {
		return (pASN1_SEQUENCE_OF != null) ? pASN1_SEQUENCE_OF : (pASN1_SEQUENCE_OF = new ASN1_SEQUENCE_OFElements());
	}
	
	public ParserRule getASN1_SEQUENCE_OFRule() {
		return getASN1_SEQUENCE_OFAccess().getRule();
	}

	//// TODO1 The reference to a ValueType is indented by 4 WS on the next line. 
	////  
	//ASN1_CHOICE_ENTRY:
	//	id=ASN1_ID NEWLINE? valueType=ChoiceType;
	public ASN1_CHOICE_ENTRYElements getASN1_CHOICE_ENTRYAccess() {
		return (pASN1_CHOICE_ENTRY != null) ? pASN1_CHOICE_ENTRY : (pASN1_CHOICE_ENTRY = new ASN1_CHOICE_ENTRYElements());
	}
	
	public ParserRule getASN1_CHOICE_ENTRYRule() {
		return getASN1_CHOICE_ENTRYAccess().getRule();
	}

	//ChoiceType:
	//	{ChoiceType} (typeRef=TypeReference | simpleType=ASN1_TYPE | "OBJECT IDENTIFIER");
	public ChoiceTypeElements getChoiceTypeAccess() {
		return (pChoiceType != null) ? pChoiceType : (pChoiceType = new ChoiceTypeElements());
	}
	
	public ParserRule getChoiceTypeRule() {
		return getChoiceTypeAccess().getRule();
	}

	//terminal MODULE_ID:
	//	ALPHA_CAP (ALPHA | ALPHA_CAP | "-" | NUMERIC)* (ALPHA_CAP | ALPHA | NUMERIC);
	public TerminalRule getMODULE_IDRule() {
		return (tMODULE_ID != null) ? tMODULE_ID : (tMODULE_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MODULE_ID"));
	} 

	//terminal ASN1_ID:
	//	ALPHA (ALPHA | ALPHA_CAP | "-" | NUMERIC)* (ALPHA_CAP | ALPHA | NUMERIC);
	public TerminalRule getASN1_IDRule() {
		return (tASN1_ID != null) ? tASN1_ID : (tASN1_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASN1_ID"));
	} 

	//terminal PARAMETER:
	//	"\"" MODULE_ID "\"";
	public TerminalRule getPARAMETERRule() {
		return (tPARAMETER != null) ? tPARAMETER : (tPARAMETER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PARAMETER"));
	} 

	//terminal IA5STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getIA5STRINGRule() {
		return (tIA5STRING != null) ? tIA5STRING : (tIA5STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IA5STRING"));
	} 

	//terminal fragment ALPHA:
	//	"a".."z";
	public TerminalRule getALPHARule() {
		return (tALPHA != null) ? tALPHA : (tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALPHA"));
	} 

	//terminal fragment ALPHA_CAP:
	//	"A".."Z";
	public TerminalRule getALPHA_CAPRule() {
		return (tALPHA_CAP != null) ? tALPHA_CAP : (tALPHA_CAP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ALPHA_CAP"));
	} 

	//terminal fragment NUMERIC:
	//	"0".."9";
	public TerminalRule getNUMERICRule() {
		return (tNUMERIC != null) ? tNUMERIC : (tNUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERIC"));
	} 

	//terminal BIG_INTEGER returns ecore::EBigInteger:
	//	"-"? "0".."9"+;
	public TerminalRule getBIG_INTEGERRule() {
		return (tBIG_INTEGER != null) ? tBIG_INTEGER : (tBIG_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BIG_INTEGER"));
	} 

	//// Section 3.4 
	//// ... ASN.1 comments commence with a pair of adjacent hyphens and end with
	//// the next pair of adjacent hyphens or at the end of the line,
	//// whichever occurs first.  Comments ended by a pair of hyphens have the
	//// effect of a single space character.
	//// TODO1 Comments ended by a pair of hyphens have the effect of a single space character.
	//terminal SL_ASN1_COMMENT:
	//	"--" !("\n" | "\r")*;
	public TerminalRule getSL_ASN1_COMMENTRule() {
		return (tSL_ASN1_COMMENT != null) ? tSL_ASN1_COMMENT : (tSL_ASN1_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_ASN1_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal NEWLINE:
	//	"\r"? | "\n";
	public TerminalRule getNEWLINERule() {
		return (tNEWLINE != null) ? tNEWLINE : (tNEWLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NEWLINE"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
