/*
* generated by Xtext
*/
grammar InternalSmi;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.netxforge.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.netxforge.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.netxforge.services.SmiGrammarAccess;

}

@parser::members {

 	private SmiGrammarAccess grammarAccess;
 	
    public InternalSmiParser(TokenStream input, SmiGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected SmiGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_MODULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getModuleAccess().getNameMODULE_IDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_1='DEFINITIONS' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getDEFINITIONSKeyword_0_1());
    }
	otherlv_2='::=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getColonColonEqualsSignKeyword_0_2());
    }
	otherlv_3='BEGIN' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getBEGINKeyword_0_3());
    }
this_CRNL_4=RULE_CRNL
    { 
    newLeafNode(this_CRNL_4, grammarAccess.getModuleAccess().getCRNLTerminalRuleCall_0_4()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIdentifiersObjectIdentifierParserRuleCall_0_5_0_0()); 
	    }
		lv_identifiers_5_0=ruleObjectIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"identifiers",
        		lv_identifiers_5_0, 
        		"ObjectIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getTypesTypeDefinitionParserRuleCall_0_5_1_0()); 
	    }
		lv_types_6_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_6_0, 
        		"TypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getMacrosMacroParserRuleCall_0_5_2_0()); 
	    }
		lv_macros_7_0=ruleMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"macros",
        		lv_macros_7_0, 
        		"Macro");
	        afterParserOrEnumRuleCall();
	    }

)
))+)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleAccess().getModuleAction_1_0(),
            $current);
    }
)(this_CRNL_9=RULE_CRNL
    { 
    newLeafNode(this_CRNL_9, grammarAccess.getModuleAccess().getCRNLTerminalRuleCall_1_1()); 
    }
)*	otherlv_10='END' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getModuleAccess().getENDKeyword_1_2());
    }
))
;





// Entry rule entryRuleObjectIdentifier
entryRuleObjectIdentifier returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_ASN1_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getObjectIdentifierRule()); }
	 iv_ruleObjectIdentifier=ruleObjectIdentifier 
	 { $current=$iv_ruleObjectIdentifier.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ObjectIdentifier
ruleObjectIdentifier returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_ASN1_COMMENT");
    }
    @after { leaveRule(); }:
(this_CRNL_0=RULE_CRNL
    { 
    newLeafNode(this_CRNL_0, grammarAccess.getObjectIdentifierAccess().getCRNLTerminalRuleCall_0()); 
    }
(
(
		lv_name_1_0=RULE_ASN1_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObjectIdentifierAccess().getNameASN1_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ASN1_ID");
	    }

)
)	otherlv_2='OBJECT IDENTIFIER' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectIdentifierAccess().getOBJECTIDENTIFIERKeyword_2());
    }
	otherlv_3='::=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getObjectIdentifierAccess().getColonColonEqualsSignKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjectIdentifierAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectIdentifierAccess().getOidValueObjectIdentifierValueParserRuleCall_5_0()); 
	    }
		lv_oidValue_5_0=ruleObjectIdentifierValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectIdentifierRule());
	        }
       		set(
       			$current, 
       			"oidValue",
        		lv_oidValue_5_0, 
        		"ObjectIdentifierValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getObjectIdentifierAccess().getRightCurlyBracketKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleObjectIdentifierValue
entryRuleObjectIdentifierValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectIdentifierValueRule()); }
	 iv_ruleObjectIdentifierValue=ruleObjectIdentifierValue 
	 { $current=$iv_ruleObjectIdentifierValue.current; } 
	 EOF 
;

// Rule ObjectIdentifierValue
ruleObjectIdentifierValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_root_0_0=RULE_ASN1_ID
		{
			newLeafNode(lv_root_0_0, grammarAccess.getObjectIdentifierValueAccess().getRootASN1_IDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"root",
        		lv_root_0_0, 
        		"ASN1_ID");
	    }

)
)
    |((
(
	RULE_ASN1_ID

)
)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
        }
	otherlv_1=RULE_ASN1_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getObjectIdentifierValueAccess().getDescriptorReferenceObjectIdentifierCrossReference_0_1_0()); 
	}

)
))?(
(
		lv_subIds_2_0=RULE_INT
		{
			newLeafNode(lv_subIds_2_0, grammarAccess.getObjectIdentifierValueAccess().getSubIdsINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"subIds",
        		lv_subIds_2_0, 
        		"INT");
	    }

)
)(
(
		lv_subIds_3_0=RULE_INT
		{
			newLeafNode(lv_subIds_3_0, grammarAccess.getObjectIdentifierValueAccess().getSubIdsINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"subIds",
        		lv_subIds_3_0, 
        		"INT");
	    }

)
)*)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_CRNL_0=RULE_CRNL
    { 
    newLeafNode(this_CRNL_0, grammarAccess.getTypeDefinitionAccess().getCRNLTerminalRuleCall_0()); 
    }
(
(
		lv_name_1_0=RULE_MODULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDefinitionAccess().getNameMODULE_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_2='::=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDefinitionAccess().getColonColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getScopeScopeParserRuleCall_3_0()); 
	    }
		lv_scope_3_0=ruleScope		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
	        }
       		set(
       			$current, 
       			"scope",
        		lv_scope_3_0, 
        		"Scope");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMacro
entryRuleMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroRule()); }
	 iv_ruleMacro=ruleMacro 
	 { $current=$iv_ruleMacro.current; } 
	 EOF 
;

// Rule Macro
ruleMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_CRNL_0=RULE_CRNL
    { 
    newLeafNode(this_CRNL_0, grammarAccess.getMacroAccess().getCRNLTerminalRuleCall_0()); 
    }
(
(
		lv_name_1_0=RULE_MODULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMacroAccess().getNameMODULE_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_2='MACRO' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMacroAccess().getMACROKeyword_2());
    }
	otherlv_3='::=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacroAccess().getColonColonEqualsSignKeyword_3());
    }
this_CRNL_4=RULE_CRNL
    { 
    newLeafNode(this_CRNL_4, grammarAccess.getMacroAccess().getCRNLTerminalRuleCall_4()); 
    }
	otherlv_5='BEGIN' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMacroAccess().getBEGINKeyword_5());
    }
this_CRNL_6=RULE_CRNL
    { 
    newLeafNode(this_CRNL_6, grammarAccess.getMacroAccess().getCRNLTerminalRuleCall_6()); 
    }
	otherlv_7='TYPE NOTATION' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMacroAccess().getTYPENOTATIONKeyword_7());
    }
	otherlv_8='::=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMacroAccess().getColonColonEqualsSignKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getTypeNotationsTypeAssignmentParserRuleCall_9_0()); 
	    }
		lv_typeNotations_9_0=ruleTypeAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		add(
       			$current, 
       			"typeNotations",
        		lv_typeNotations_9_0, 
        		"TypeAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_CRNL_10=RULE_CRNL
    { 
    newLeafNode(this_CRNL_10, grammarAccess.getMacroAccess().getCRNLTerminalRuleCall_10()); 
    }
	otherlv_11='VALUE NOTATION' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMacroAccess().getVALUENOTATIONKeyword_11());
    }
	otherlv_12='::=' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMacroAccess().getColonColonEqualsSignKeyword_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getValueNotationMacroValueParserRuleCall_13_0()); 
	    }
		lv_valueNotation_13_0=ruleMacroValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		set(
       			$current, 
       			"valueNotation",
        		lv_valueNotation_13_0, 
        		"MacroValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getInnerTypesTypeDefinitionParserRuleCall_14_0()); 
	    }
		lv_innerTypes_14_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		add(
       			$current, 
       			"innerTypes",
        		lv_innerTypes_14_0, 
        		"TypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_15='END' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMacroAccess().getENDKeyword_15());
    }
)
;





// Entry rule entryRuleTypeAssignment
entryRuleTypeAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeAssignmentRule()); }
	 iv_ruleTypeAssignment=ruleTypeAssignment 
	 { $current=$iv_ruleTypeAssignment.current; } 
	 EOF 
;

// Rule TypeAssignment
ruleTypeAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAssignmentAccess().getParamAssignmentParserRuleCall_0()); 
    }
    this_ParamAssignment_0=ruleParamAssignment
    { 
        $current = $this_ParamAssignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAssignmentAccess().getTypeReferenceParserRuleCall_1()); 
    }
    this_TypeReference_1=ruleTypeReference
    { 
        $current = $this_TypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParamAssignment
entryRuleParamAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamAssignmentRule()); }
	 iv_ruleParamAssignment=ruleParamAssignment 
	 { $current=$iv_ruleParamAssignment.current; } 
	 EOF 
;

// Rule ParamAssignment
ruleParamAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_param_0_0=RULE_PARAMETER
		{
			newLeafNode(lv_param_0_0, grammarAccess.getParamAssignmentAccess().getParamPARAMETERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"PARAMETER");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAssignmentAccess().getRightTypeNotationParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleTypeNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"TypeNotation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeNotation
entryRuleTypeNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNotationRule()); }
	 iv_ruleTypeNotation=ruleTypeNotation 
	 { $current=$iv_ruleTypeNotation.current; } 
	 EOF 
;

// Rule TypeNotation
ruleTypeNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeNotationAccess().getTypeReferenceParserRuleCall_0()); 
    }
    this_TypeReference_0=ruleTypeReference
    { 
        $current = $this_TypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeNotationAccess().getValueMacroValueParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleMacroValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeNotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"MacroValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeReferenceExt
entryRuleTypeReferenceExt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceExtRule()); }
	 iv_ruleTypeReferenceExt=ruleTypeReferenceExt 
	 { $current=$iv_ruleTypeReferenceExt.current; } 
	 EOF 
;

// Rule TypeReferenceExt
ruleTypeReferenceExt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceExtAccess().getParentRefTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parentRef_0_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceExtRule());
	        }
       		set(
       			$current, 
       			"parentRef",
        		lv_parentRef_0_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
ruleTypeReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceExtAccess().getChildRefTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_childRef_1_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceExtRule());
	        }
       		set(
       			$current, 
       			"childRef",
        		lv_childRef_1_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	 iv_ruleTypeReference=ruleTypeReference 
	 { $current=$iv_ruleTypeReference.current; } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeReferenceRule());
	        }
        }
	otherlv_0=RULE_MODULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypeReferenceAccess().getTypeTypeDefinitionCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleScope
entryRuleScope returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScopeRule()); }
	 iv_ruleScope=ruleScope 
	 { $current=$iv_ruleScope.current; } 
	 EOF 
;

// Rule Scope
ruleScope returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getScopeAccess().getValuesValueParserRuleCall_0_0()); 
	    }
		lv_values_0_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScopeRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_0_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)+this_CRNL_1=RULE_CRNL
    { 
    newLeafNode(this_CRNL_1, grammarAccess.getScopeAccess().getCRNLTerminalRuleCall_1()); 
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getValueTypesValueTypeParserRuleCall_0_0()); 
	    }
		lv_valueTypes_0_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		add(
       			$current, 
       			"valueTypes",
        		lv_valueTypes_0_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValueAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getValueTypesValueTypeParserRuleCall_1_1_0()); 
	    }
		lv_valueTypes_2_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		add(
       			$current, 
       			"valueTypes",
        		lv_valueTypes_2_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleValueType
entryRuleValueType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueTypeRule()); }
	 iv_ruleValueType=ruleValueType 
	 { $current=$iv_ruleValueType.current; } 
	 EOF 
;

// Rule ValueType
ruleValueType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getParamParamAssignmentParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleParamAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"ParamAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getTypeTypeReferenceExtParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeReferenceExt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeReferenceExt");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getSimpleTypeASN1_TYPEParserRuleCall_2_0()); 
	    }
		lv_simpleType_2_0=ruleASN1_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"simpleType",
        		lv_simpleType_2_0, 
        		"ASN1_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getMacroValueMacroValueParserRuleCall_3_0()); 
	    }
		lv_macroValue_3_0=ruleMacroValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"macroValue",
        		lv_macroValue_3_0, 
        		"MacroValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_oi_4_0=	'OBJECT IDENTIFIER' 
    {
        newLeafNode(lv_oi_4_0, grammarAccess.getValueTypeAccess().getOiOBJECTIDENTIFIERKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueTypeRule());
	        }
       		setWithLastConsumed($current, "oi", lv_oi_4_0, "OBJECT IDENTIFIER");
	    }

)
))
;





// Entry rule entryRuleMacroValue
entryRuleMacroValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroValueRule()); }
	 iv_ruleMacroValue=ruleMacroValue 
	 { $current=$iv_ruleMacroValue.current; } 
	 EOF 
;

// Rule MacroValue
ruleMacroValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMacroValueAccess().getMacroValueAction_0(),
            $current);
    }
)	otherlv_1='value' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacroValueAccess().getValueKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMacroValueAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroValueAccess().getTypeMACRO_VALUE_TYPEParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleMACRO_VALUE_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroValueRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"MACRO_VALUE_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMacroValueAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMACRO_VALUE_TYPE
entryRuleMACRO_VALUE_TYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMACRO_VALUE_TYPERule()); }
	 iv_ruleMACRO_VALUE_TYPE=ruleMACRO_VALUE_TYPE 
	 { $current=$iv_ruleMACRO_VALUE_TYPE.current; } 
	 EOF 
;

// Rule MACRO_VALUE_TYPE
ruleMACRO_VALUE_TYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMACRO_VALUE_TYPEAccess().getUpdateUpdateTypeParserRuleCall_0_0()); 
	    }
		lv_update_0_0=ruleUpdateType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMACRO_VALUE_TYPERule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_0_0, 
        		"UpdateType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMACRO_VALUE_TYPEAccess().getLiteralMACRO_VALUE_CAPParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleMACRO_VALUE_CAP		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMACRO_VALUE_TYPERule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"MACRO_VALUE_CAP");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleUpdateType
entryRuleUpdateType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateTypeRule()); }
	 iv_ruleUpdateType=ruleUpdateType 
	 { $current=$iv_ruleUpdateType.current; } 
	 EOF 
;

// Rule UpdateType
ruleUpdateType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Update' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUpdateTypeAccess().getUpdateKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateTypeRule());
	        }
        }
	otherlv_1=RULE_MODULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getUpdateTypeAccess().getTypeTypeDefinitionCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleMACRO_VALUE_CAP
entryRuleMACRO_VALUE_CAP returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMACRO_VALUE_CAPRule()); } 
	 iv_ruleMACRO_VALUE_CAP=ruleMACRO_VALUE_CAP 
	 { $current=$iv_ruleMACRO_VALUE_CAP.current.getText(); }  
	 EOF 
;

// Rule MACRO_VALUE_CAP
ruleMACRO_VALUE_CAP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='VALUE OBJECT IDENTIFIER' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMACRO_VALUE_CAPAccess().getVALUEOBJECTIDENTIFIERKeyword_0()); 
    }

    |
	kw='IA5String' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMACRO_VALUE_CAPAccess().getIA5StringKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleASN1_TYPE
entryRuleASN1_TYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_TYPERule()); }
	 iv_ruleASN1_TYPE=ruleASN1_TYPE 
	 { $current=$iv_ruleASN1_TYPE.current; } 
	 EOF 
;

// Rule ASN1_TYPE
ruleASN1_TYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getASN1_TYPEAccess().getASN1_SIMPLEParserRuleCall_0()); 
    }
    this_ASN1_SIMPLE_0=ruleASN1_SIMPLE
    { 
        $current = $this_ASN1_SIMPLE_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getASN1_TYPEAccess().getASN1_CHOICEParserRuleCall_1()); 
    }
    this_ASN1_CHOICE_1=ruleASN1_CHOICE
    { 
        $current = $this_ASN1_CHOICE_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleASN1_SIMPLE
entryRuleASN1_SIMPLE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_SIMPLERule()); }
	 iv_ruleASN1_SIMPLE=ruleASN1_SIMPLE 
	 { $current=$iv_ruleASN1_SIMPLE.current; } 
	 EOF 
;

// Rule ASN1_SIMPLE
ruleASN1_SIMPLE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_SIMPLEAccess().getASN1_SIMPLEAction_0_0(),
            $current);
    }
)	otherlv_1='empty' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_SIMPLEAccess().getEmptyKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_SIMPLEAccess().getASN1_SIMPLEAction_1_0(),
            $current);
    }
)this_IA5STRING_3=RULE_IA5STRING
    { 
    newLeafNode(this_IA5STRING_3, grammarAccess.getASN1_SIMPLEAccess().getIA5STRINGTerminalRuleCall_1_1()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getASN1_OCTET_STRINGParserRuleCall_2_0()); 
    }
    this_ASN1_OCTET_STRING_4=ruleASN1_OCTET_STRING
    { 
        $current = $this_ASN1_OCTET_STRING_4.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getConstraintASN1_SUBTYPEParserRuleCall_2_1_0()); 
	    }
		lv_constraint_5_0=ruleASN1_SUBTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SIMPLERule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_5_0, 
        		"ASN1_SUBTYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getASN1_INTEGERParserRuleCall_3_0()); 
    }
    this_ASN1_INTEGER_6=ruleASN1_INTEGER
    { 
        $current = $this_ASN1_INTEGER_6.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getConstraintASN1_RANGEParserRuleCall_3_1_0()); 
	    }
		lv_constraint_7_0=ruleASN1_RANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SIMPLERule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_7_0, 
        		"ASN1_RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleASN1_OCTET_STRING
entryRuleASN1_OCTET_STRING returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_OCTET_STRINGRule()); }
	 iv_ruleASN1_OCTET_STRING=ruleASN1_OCTET_STRING 
	 { $current=$iv_ruleASN1_OCTET_STRING.current; } 
	 EOF 
;

// Rule ASN1_OCTET_STRING
ruleASN1_OCTET_STRING returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_OCTET_STRINGAccess().getASN1_OCTET_STRINGAction_0(),
            $current);
    }
)	otherlv_1='OCTET STRING' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_OCTET_STRINGAccess().getOCTETSTRINGKeyword_1());
    }
)
;





// Entry rule entryRuleASN1_INTEGER
entryRuleASN1_INTEGER returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_INTEGERRule()); }
	 iv_ruleASN1_INTEGER=ruleASN1_INTEGER 
	 { $current=$iv_ruleASN1_INTEGER.current; } 
	 EOF 
;

// Rule ASN1_INTEGER
ruleASN1_INTEGER returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='INTEGER' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_INTEGERAccess().getINTEGERKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_INTEGERAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_INTEGERAccess().getValuePairsASN1_VALUEPAIRParserRuleCall_2_0()); 
	    }
		lv_valuePairs_2_0=ruleASN1_VALUEPAIR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_INTEGERRule());
	        }
       		add(
       			$current, 
       			"valuePairs",
        		lv_valuePairs_2_0, 
        		"ASN1_VALUEPAIR");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_INTEGERAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleASN1_SUBTYPE
entryRuleASN1_SUBTYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_SUBTYPERule()); }
	 iv_ruleASN1_SUBTYPE=ruleASN1_SUBTYPE 
	 { $current=$iv_ruleASN1_SUBTYPE.current; } 
	 EOF 
;

// Rule ASN1_SUBTYPE
ruleASN1_SUBTYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_SUBTYPEAccess().getLeftParenthesisKeyword_0());
    }
	otherlv_1='SIZE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_SUBTYPEAccess().getSIZEKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getASN1_SUBTYPEAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SUBTYPEAccess().getRangesASN1_RANGEParserRuleCall_3_0()); 
	    }
		lv_ranges_3_0=ruleASN1_RANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SUBTYPERule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_3_0, 
        		"ASN1_RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getASN1_SUBTYPEAccess().getVerticalLineKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SUBTYPEAccess().getRangesASN1_RANGEParserRuleCall_4_1_0()); 
	    }
		lv_ranges_5_0=ruleASN1_RANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SUBTYPERule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_5_0, 
        		"ASN1_RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getASN1_SUBTYPEAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getASN1_SUBTYPEAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleASN1_RANGE
entryRuleASN1_RANGE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_RANGERule()); }
	 iv_ruleASN1_RANGE=ruleASN1_RANGE 
	 { $current=$iv_ruleASN1_RANGE.current; } 
	 EOF 
;

// Rule ASN1_RANGE
ruleASN1_RANGE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_RANGEAccess().getASN1_RANGEAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getASN1_RANGEAccess().getValueINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
    |((
(
		lv_start_2_0=RULE_INT
		{
			newLeafNode(lv_start_2_0, grammarAccess.getASN1_RANGEAccess().getStartINTTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"start",
        		lv_start_2_0, 
        		"INT");
	    }

)
)	otherlv_3='..' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_RANGEAccess().getFullStopFullStopKeyword_1_1());
    }
(
(
		lv_end_4_0=RULE_INT
		{
			newLeafNode(lv_end_4_0, grammarAccess.getASN1_RANGEAccess().getEndINTTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"end",
        		lv_end_4_0, 
        		"INT");
	    }

)
)))
;





// Entry rule entryRuleASN1_VALUEPAIR
entryRuleASN1_VALUEPAIR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_VALUEPAIRRule()); } 
	 iv_ruleASN1_VALUEPAIR=ruleASN1_VALUEPAIR 
	 { $current=$iv_ruleASN1_VALUEPAIR.current.getText(); }  
	 EOF 
;

// Rule ASN1_VALUEPAIR
ruleASN1_VALUEPAIR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ASN1_ID_0=RULE_ASN1_ID    {
		$current.merge(this_ASN1_ID_0);
    }

    { 
    newLeafNode(this_ASN1_ID_0, grammarAccess.getASN1_VALUEPAIRAccess().getASN1_IDTerminalRuleCall_0()); 
    }
)?
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASN1_VALUEPAIRAccess().getLeftParenthesisKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getASN1_VALUEPAIRAccess().getINTTerminalRuleCall_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getASN1_VALUEPAIRAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleASN1_CHOICE
entryRuleASN1_CHOICE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_CHOICERule()); }
	 iv_ruleASN1_CHOICE=ruleASN1_CHOICE 
	 { $current=$iv_ruleASN1_CHOICE.current; } 
	 EOF 
;

// Rule ASN1_CHOICE
ruleASN1_CHOICE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CHOICE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_CHOICEAccess().getCHOICEKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_CHOICEAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_CHOICEAccess().getChoicesASN1_CHOICE_ENTRYParserRuleCall_2_0()); 
	    }
		lv_choices_2_0=ruleASN1_CHOICE_ENTRY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_CHOICERule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_2_0, 
        		"ASN1_CHOICE_ENTRY");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_CHOICEAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_CHOICEAccess().getChoicesASN1_CHOICE_ENTRYParserRuleCall_3_1_0()); 
	    }
		lv_choices_4_0=ruleASN1_CHOICE_ENTRY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_CHOICERule());
	        }
       		add(
       			$current, 
       			"choices",
        		lv_choices_4_0, 
        		"ASN1_CHOICE_ENTRY");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getASN1_CHOICEAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleASN1_CHOICE_ENTRY
entryRuleASN1_CHOICE_ENTRY returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_CHOICE_ENTRYRule()); }
	 iv_ruleASN1_CHOICE_ENTRY=ruleASN1_CHOICE_ENTRY 
	 { $current=$iv_ruleASN1_CHOICE_ENTRY.current; } 
	 EOF 
;

// Rule ASN1_CHOICE_ENTRY
ruleASN1_CHOICE_ENTRY returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ASN1_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getASN1_CHOICE_ENTRYAccess().getIdASN1_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_CHOICE_ENTRYRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ASN1_ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_CHOICE_ENTRYRule());
	        }
        }
	otherlv_1=RULE_ASN1_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getASN1_CHOICE_ENTRYAccess().getValueTypeValueCrossReference_1_0()); 
	}

)
))
;





RULE_MODULE_ID : RULE_ALPHA_CAP (RULE_ALPHA|RULE_ALPHA_CAP|'-'|RULE_NUMERIC)* (RULE_ALPHA_CAP|RULE_ALPHA|RULE_NUMERIC);

RULE_ASN1_ID : RULE_ALPHA (RULE_ALPHA|RULE_ALPHA_CAP|'-'|RULE_NUMERIC)*;

RULE_PARAMETER : '"' RULE_MODULE_ID '"';

RULE_IA5STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

fragment RULE_NUMERIC : '0'..'9';

fragment RULE_ALPHA : 'a'..'z';

fragment RULE_ALPHA_CAP : 'A'..'Z';

RULE_INT : ('0'..'9')+;

RULE_SL_ASN1_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_CRNL : ('\r'|'\n')+;

RULE_WS : (' '|'\t')+;

RULE_ANY_OTHER : .;


