/*
* generated by Xtext
*/
grammar InternalSmi;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.netxforge.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.netxforge.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.netxforge.services.SmiGrammarAccess;

}

@parser::members {

 	private SmiGrammarAccess grammarAccess;
 	
    public InternalSmiParser(TokenStream input, SmiGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected SmiGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_MODULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getModuleAccess().getNameMODULE_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_1='DEFINITIONS' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getDEFINITIONSKeyword_1());
    }
	otherlv_2='::=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getColonColonEqualsSignKeyword_2());
    }
	otherlv_3='BEGIN' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getBEGINKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getImportsImportsParserRuleCall_4_0()); 
	    }
		lv_imports_4_0=ruleImports		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"imports",
        		lv_imports_4_0, 
        		"Imports");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getObjectsObjectParserRuleCall_5_0_0()); 
	    }
		lv_objects_5_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"objects",
        		lv_objects_5_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getIdentifiersObjectIdentifierParserRuleCall_5_1_0()); 
	    }
		lv_identifiers_6_0=ruleObjectIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"identifiers",
        		lv_identifiers_6_0, 
        		"ObjectIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getTypesTypeDefinitionParserRuleCall_5_2_0()); 
	    }
		lv_types_7_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_7_0, 
        		"TypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getMacrosMacroParserRuleCall_5_3_0()); 
	    }
		lv_macros_8_0=ruleMacro		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"macros",
        		lv_macros_8_0, 
        		"Macro");
	        afterParserOrEnumRuleCall();
	    }

)
))+(this_NEWLINE_9=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_9, grammarAccess.getModuleAccess().getNEWLINETerminalRuleCall_6()); 
    }
)+	otherlv_10='END' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getModuleAccess().getENDKeyword_7());
    }
(this_NEWLINE_11=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_11, grammarAccess.getModuleAccess().getNEWLINETerminalRuleCall_8()); 
    }
)*)
;





// Entry rule entryRuleImports
entryRuleImports returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	 iv_ruleImports=ruleImports 
	 { $current=$iv_ruleImports.current; } 
	 EOF 
;

// Rule Imports
ruleImports returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getImportsAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+	otherlv_1='IMPORTS' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportsAccess().getIMPORTSKeyword_1());
    }

    { 
        newCompositeNode(grammarAccess.getImportsAccess().getImportClosureParserRuleCall_2()); 
    }
    this_ImportClosure_2=ruleImportClosure
    { 
        $current = $this_ImportClosure_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportsAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleImportClosure
entryRuleImportClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportClosureRule()); }
	 iv_ruleImportClosure=ruleImportClosure 
	 { $current=$iv_ruleImportClosure.current; } 
	 EOF 
;

// Rule ImportClosure
ruleImportClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getImportClosureAccess().getRefsImportRefsParserRuleCall_0_0()); 
	    }
		lv_refs_0_0=ruleImportRefs		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportClosureRule());
	        }
       		set(
       			$current, 
       			"refs",
        		lv_refs_0_0, 
        		"ImportRefs");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='FROM' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getImportClosureAccess().getFROMKeyword_1());
    }
(
(
		lv_importURI_2_0=RULE_MODULE_ID
		{
			newLeafNode(lv_importURI_2_0, grammarAccess.getImportClosureAccess().getImportURIMODULE_IDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportClosureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_2_0, 
        		"MODULE_ID");
	    }

)
))
;





// Entry rule entryRuleImportRefs
entryRuleImportRefs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRefsRule()); }
	 iv_ruleImportRefs=ruleImportRefs 
	 { $current=$iv_ruleImportRefs.current; } 
	 EOF 
;

// Rule ImportRefs
ruleImportRefs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getImportRefsAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getImportRefsAccess().getRefsImportRefParserRuleCall_1_0()); 
	    }
		lv_refs_1_0=ruleImportRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRefsRule());
	        }
       		add(
       			$current, 
       			"refs",
        		lv_refs_1_0, 
        		"ImportRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportRefsAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportRefsAccess().getRefsImportRefParserRuleCall_2_1_0()); 
	    }
		lv_refs_3_0=ruleImportRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRefsRule());
	        }
       		add(
       			$current, 
       			"refs",
        		lv_refs_3_0, 
        		"ImportRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImportRef
entryRuleImportRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRefRule()); }
	 iv_ruleImportRef=ruleImportRef 
	 { $current=$iv_ruleImportRef.current; } 
	 EOF 
;

// Rule ImportRef
ruleImportRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRefRule());
	        }
        }
	otherlv_0=RULE_ASN1_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getImportRefAccess().getOiRefObjectIdentifierCrossReference_0_0()); 
	}

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRefRule());
	        }
        }
	otherlv_1=RULE_MODULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getImportRefAccess().getTypeRefTypeDefinitionCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleObjectIdentifier
entryRuleObjectIdentifier returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_ASN1_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getObjectIdentifierRule()); }
	 iv_ruleObjectIdentifier=ruleObjectIdentifier 
	 { $current=$iv_ruleObjectIdentifier.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ObjectIdentifier
ruleObjectIdentifier returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_ASN1_COMMENT");
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getObjectIdentifierAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		lv_name_1_0=RULE_ASN1_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObjectIdentifierAccess().getNameASN1_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ASN1_ID");
	    }

)
)	otherlv_2='OBJECT IDENTIFIER' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectIdentifierAccess().getOBJECTIDENTIFIERKeyword_2());
    }
	otherlv_3='::=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getObjectIdentifierAccess().getColonColonEqualsSignKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjectIdentifierAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectIdentifierAccess().getOidValueObjectIdentifierValueParserRuleCall_5_0()); 
	    }
		lv_oidValue_5_0=ruleObjectIdentifierValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectIdentifierRule());
	        }
       		set(
       			$current, 
       			"oidValue",
        		lv_oidValue_5_0, 
        		"ObjectIdentifierValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getObjectIdentifierAccess().getRightCurlyBracketKeyword_6());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleObjectIdentifierValue
entryRuleObjectIdentifierValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectIdentifierValueRule()); }
	 iv_ruleObjectIdentifierValue=ruleObjectIdentifierValue 
	 { $current=$iv_ruleObjectIdentifierValue.current; } 
	 EOF 
;

// Rule ObjectIdentifierValue
ruleObjectIdentifierValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ASN1_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getObjectIdentifierValueAccess().getNameASN1_IDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ASN1_ID");
	    }

)
)
    |((
(
	RULE_ASN1_ID

)
)=>
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
        }
	otherlv_1=RULE_ASN1_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getObjectIdentifierValueAccess().getDescriptorReferenceObjectIdentifierCrossReference_0_1_0()); 
	}

)
))?(
(
		lv_subIds_2_0=RULE_BIG_INTEGER
		{
			newLeafNode(lv_subIds_2_0, grammarAccess.getObjectIdentifierValueAccess().getSubIdsBIG_INTEGERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"subIds",
        		lv_subIds_2_0, 
        		"BIG_INTEGER");
	    }

)
)(
(
		lv_subIds_3_0=RULE_BIG_INTEGER
		{
			newLeafNode(lv_subIds_3_0, grammarAccess.getObjectIdentifierValueAccess().getSubIdsBIG_INTEGERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectIdentifierValueRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"subIds",
        		lv_subIds_3_0, 
        		"BIG_INTEGER");
	    }

)
)*)
;





// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getTypeDefinitionAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		lv_name_1_0=RULE_MODULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeDefinitionAccess().getNameMODULE_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_2='::=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDefinitionAccess().getColonColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getValuesValueParserRuleCall_3_0()); 
	    }
		lv_values_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefinitionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	 iv_ruleObject=ruleObject 
	 { $current=$iv_ruleObject.current; } 
	 EOF 
;

// Rule Object
ruleObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getObjectAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		lv_name_1_0=RULE_ASN1_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObjectAccess().getNameASN1_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ASN1_ID");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectRule());
	        }
        }
	otherlv_2=RULE_MODULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getObjectAccess().getMacroRefMacroCrossReference_2_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getAttributesAttributeParserRuleCall_3_0()); 
	    }
		lv_attributes_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)+(this_NEWLINE_4=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_4, grammarAccess.getObjectAccess().getNEWLINETerminalRuleCall_4()); 
    }
)+	otherlv_5='::=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getObjectAccess().getColonColonEqualsSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getObjectValueObjectValueParserRuleCall_6_0()); 
	    }
		lv_objectValue_6_0=ruleObjectValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		set(
       			$current, 
       			"objectValue",
        		lv_objectValue_6_0, 
        		"ObjectValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getAttributeAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
        }
	otherlv_1=RULE_MODULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAttributeAccess().getParamRefParamAssignmentCrossReference_1_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeAccess().getValueAttributeValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleAttributeValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"AttributeValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeValue
entryRuleAttributeValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueRule()); }
	 iv_ruleAttributeValue=ruleAttributeValue 
	 { $current=$iv_ruleAttributeValue.current; } 
	 EOF 
;

// Rule AttributeValue
ruleAttributeValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getAttributeValueAccess().getNEWLINETerminalRuleCall_0()); 
    }
)?((
(
		lv_id_1_0=RULE_ASN1_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getAttributeValueAccess().getIdASN1_IDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ASN1_ID");
	    }

)
)
    |(
(
		lv_text_2_0=RULE_IA5STRING
		{
			newLeafNode(lv_text_2_0, grammarAccess.getAttributeValueAccess().getTextIA5STRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_0, 
        		"IA5STRING");
	    }

)
)))
;





// Entry rule entryRuleObjectValue
entryRuleObjectValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectValueRule()); }
	 iv_ruleObjectValue=ruleObjectValue 
	 { $current=$iv_ruleObjectValue.current; } 
	 EOF 
;

// Rule ObjectValue
ruleObjectValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObjectValueAccess().getLeftCurlyBracketKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getObjectValueAccess().getObjectIdentifierValueParserRuleCall_1()); 
    }
    this_ObjectIdentifierValue_1=ruleObjectIdentifierValue
    { 
        $current = $this_ObjectIdentifierValue_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectValueAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleMacro
entryRuleMacro returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroRule()); }
	 iv_ruleMacro=ruleMacro 
	 { $current=$iv_ruleMacro.current; } 
	 EOF 
;

// Rule Macro
ruleMacro returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getMacroAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		lv_name_1_0=RULE_MODULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMacroAccess().getNameMODULE_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"MODULE_ID");
	    }

)
)	otherlv_2='MACRO' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMacroAccess().getMACROKeyword_2());
    }
	otherlv_3='::=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacroAccess().getColonColonEqualsSignKeyword_3());
    }
(this_NEWLINE_4=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_4, grammarAccess.getMacroAccess().getNEWLINETerminalRuleCall_4()); 
    }
)+	otherlv_5='BEGIN' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMacroAccess().getBEGINKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getTypeNotationTypeNotationParserRuleCall_6_0()); 
	    }
		lv_typeNotation_6_0=ruleTypeNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		set(
       			$current, 
       			"typeNotation",
        		lv_typeNotation_6_0, 
        		"TypeNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getValueNotationValueNotationParserRuleCall_7_0()); 
	    }
		lv_valueNotation_7_0=ruleValueNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		set(
       			$current, 
       			"valueNotation",
        		lv_valueNotation_7_0, 
        		"ValueNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroAccess().getInnerTypesTypeDefinitionParserRuleCall_8_0()); 
	    }
		lv_innerTypes_8_0=ruleTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroRule());
	        }
       		add(
       			$current, 
       			"innerTypes",
        		lv_innerTypes_8_0, 
        		"TypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+(this_NEWLINE_9=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_9, grammarAccess.getMacroAccess().getNEWLINETerminalRuleCall_9()); 
    }
)+	otherlv_10='END' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMacroAccess().getENDKeyword_10());
    }
)
;





// Entry rule entryRuleTypeNotation
entryRuleTypeNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNotationRule()); }
	 iv_ruleTypeNotation=ruleTypeNotation 
	 { $current=$iv_ruleTypeNotation.current; } 
	 EOF 
;

// Rule TypeNotation
ruleTypeNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getTypeNotationAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		lv_name_1_0=	'TYPE' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getTypeNotationAccess().getNameTYPEKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeNotationRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "TYPE");
	    }

)
)	otherlv_2='NOTATION' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeNotationAccess().getNOTATIONKeyword_2());
    }
	otherlv_3='::=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeNotationAccess().getColonColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeNotationAccess().getTypeNotationsTypeAssignmentParserRuleCall_4_0()); 
	    }
		lv_typeNotations_4_0=ruleTypeAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeNotationRule());
	        }
       		add(
       			$current, 
       			"typeNotations",
        		lv_typeNotations_4_0, 
        		"TypeAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleValueNotation
entryRuleValueNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueNotationRule()); }
	 iv_ruleValueNotation=ruleValueNotation 
	 { $current=$iv_ruleValueNotation.current; } 
	 EOF 
;

// Rule ValueNotation
ruleValueNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getValueNotationAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
(
		lv_name_1_0=	'VALUE' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getValueNotationAccess().getNameVALUEKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueNotationRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "VALUE");
	    }

)
)	otherlv_2='NOTATION' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValueNotationAccess().getNOTATIONKeyword_2());
    }
	otherlv_3='::=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getValueNotationAccess().getColonColonEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueNotationAccess().getValueNotationsValueAssignmentParserRuleCall_4_0()); 
	    }
		lv_valueNotations_4_0=ruleValueAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueNotationRule());
	        }
       		add(
       			$current, 
       			"valueNotations",
        		lv_valueNotations_4_0, 
        		"ValueAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTypeAssignment
entryRuleTypeAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeAssignmentRule()); }
	 iv_ruleTypeAssignment=ruleTypeAssignment 
	 { $current=$iv_ruleTypeAssignment.current; } 
	 EOF 
;

// Rule TypeAssignment
ruleTypeAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getTypeAssignmentAccess().getNEWLINETerminalRuleCall_0()); 
    }
)+(
    { 
        newCompositeNode(grammarAccess.getTypeAssignmentAccess().getParamAssignmentParserRuleCall_1_0()); 
    }
    this_ParamAssignment_1=ruleParamAssignment
    { 
        $current = $this_ParamAssignment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAssignmentAccess().getTypeReferenceParserRuleCall_1_1()); 
    }
    this_TypeReference_2=ruleTypeReference
    { 
        $current = $this_TypeReference_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAssignmentAccess().getMacroValueParserRuleCall_1_2()); 
    }
    this_MacroValue_3=ruleMacroValue
    { 
        $current = $this_MacroValue_3.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleParamAssignment
entryRuleParamAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamAssignmentRule()); }
	 iv_ruleParamAssignment=ruleParamAssignment 
	 { $current=$iv_ruleParamAssignment.current; } 
	 EOF 
;

// Rule ParamAssignment
ruleParamAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_PARAMETER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParamAssignmentAccess().getNamePARAMETERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamAssignmentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"PARAMETER");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParamAssignmentAccess().getRightTypeNotationRightParserRuleCall_1_0()); 
	    }
		lv_right_1_0=ruleTypeNotationRight		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamAssignmentRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"TypeNotationRight");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeNotationRight
entryRuleTypeNotationRight returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNotationRightRule()); }
	 iv_ruleTypeNotationRight=ruleTypeNotationRight 
	 { $current=$iv_ruleTypeNotationRight.current; } 
	 EOF 
;

// Rule TypeNotationRight
ruleTypeNotationRight returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeNotationRightAccess().getTypeReferenceParserRuleCall_0()); 
    }
    this_TypeReference_0=ruleTypeReference
    { 
        $current = $this_TypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeNotationRightAccess().getValueMacroValueParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleMacroValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeNotationRightRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"MacroValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeReferenceExt
entryRuleTypeReferenceExt returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceExtRule()); }
	 iv_ruleTypeReferenceExt=ruleTypeReferenceExt 
	 { $current=$iv_ruleTypeReferenceExt.current; } 
	 EOF 
;

// Rule TypeReferenceExt
ruleTypeReferenceExt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceExtAccess().getParentRefTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parentRef_0_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceExtRule());
	        }
       		set(
       			$current, 
       			"parentRef",
        		lv_parentRef_0_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
ruleTypeReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getTypeReferenceExtAccess().getChildRefTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_childRef_1_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeReferenceExtRule());
	        }
       		set(
       			$current, 
       			"childRef",
        		lv_childRef_1_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleTypeReference
entryRuleTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeReferenceRule()); }
	 iv_ruleTypeReference=ruleTypeReference 
	 { $current=$iv_ruleTypeReference.current; } 
	 EOF 
;

// Rule TypeReference
ruleTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeReferenceRule());
	        }
        }
	otherlv_0=RULE_MODULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypeReferenceAccess().getTypeTypeDefinitionCrossReference_0_0()); 
	}

)
)
    |
    { 
        newCompositeNode(grammarAccess.getTypeReferenceAccess().getBracedTypeReferenceParserRuleCall_1()); 
    }
    this_BracedTypeReference_1=ruleBracedTypeReference
    { 
        $current = $this_BracedTypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBracedTypeReference
entryRuleBracedTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracedTypeReferenceRule()); }
	 iv_ruleBracedTypeReference=ruleBracedTypeReference 
	 { $current=$iv_ruleBracedTypeReference.current; } 
	 EOF 
;

// Rule BracedTypeReference
ruleBracedTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='"{"' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBracedTypeReferenceAccess().getQuotationMarkLeftCurlyBracketQuotationMarkKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getBracedTypeReferenceAccess().getTypeReferenceParserRuleCall_1()); 
    }
    this_TypeReference_1=ruleTypeReference
    { 
        $current = $this_TypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2='"}"' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBracedTypeReferenceAccess().getQuotationMarkRightCurlyBracketQuotationMarkKeyword_2());
    }
)
;





// Entry rule entryRuleValueAssignment
entryRuleValueAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueAssignmentRule()); }
	 iv_ruleValueAssignment=ruleValueAssignment 
	 { $current=$iv_ruleValueAssignment.current; } 
	 EOF 
;

// Rule ValueAssignment
ruleValueAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getValueAssignmentAccess().getNEWLINETerminalRuleCall_0()); 
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAssignmentAccess().getValueNotationMacroValueParserRuleCall_1_0()); 
	    }
		lv_valueNotation_1_0=ruleMacroValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueAssignmentRule());
	        }
       		set(
       			$current, 
       			"valueNotation",
        		lv_valueNotation_1_0, 
        		"MacroValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getTagTagParserRuleCall_0_0()); 
	    }
		lv_tag_0_0=ruleTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		set(
       			$current, 
       			"tag",
        		lv_tag_0_0, 
        		"Tag");
	        afterParserOrEnumRuleCall();
	    }

)
)?(this_NEWLINE_1=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_1, grammarAccess.getValueAccess().getNEWLINETerminalRuleCall_1()); 
    }
)*(
(
		lv_implicit_2_0=	'IMPLICIT' 
    {
        newLeafNode(lv_implicit_2_0, grammarAccess.getValueAccess().getImplicitIMPLICITKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed($current, "implicit", true, "IMPLICIT");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getValueTypesValueTypeParserRuleCall_3_0()); 
	    }
		lv_valueTypes_3_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		add(
       			$current, 
       			"valueTypes",
        		lv_valueTypes_3_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_NEWLINE_4=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_4, grammarAccess.getValueAccess().getNEWLINETerminalRuleCall_4_0()); 
    }
)*	otherlv_5='|' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getValueAccess().getVerticalLineKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueAccess().getValueTypesValueTypeParserRuleCall_4_2_0()); 
	    }
		lv_valueTypes_6_0=ruleValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueRule());
	        }
       		add(
       			$current, 
       			"valueTypes",
        		lv_valueTypes_6_0, 
        		"ValueType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTag
entryRuleTag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	 iv_ruleTag=ruleTag 
	 { $current=$iv_ruleTag.current; } 
	 EOF 
;

// Rule Tag
ruleTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_NEWLINE_0=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_0, grammarAccess.getTagAccess().getNEWLINETerminalRuleCall_0()); 
    }
)?	otherlv_1='[APPLICATION' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTagAccess().getAPPLICATIONKeyword_1());
    }
(
(
		lv_tagValue_2_0=RULE_BIG_INTEGER
		{
			newLeafNode(lv_tagValue_2_0, grammarAccess.getTagAccess().getTagValueBIG_INTEGERTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTagRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"tagValue",
        		lv_tagValue_2_0, 
        		"BIG_INTEGER");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTagAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleValueType
entryRuleValueType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueTypeRule()); }
	 iv_ruleValueType=ruleValueType 
	 { $current=$iv_ruleValueType.current; } 
	 EOF 
;

// Rule ValueType
ruleValueType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getParamParamAssignmentParserRuleCall_0_0()); 
	    }
		lv_param_0_0=ruleParamAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_0_0, 
        		"ParamAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_id_1_0=RULE_ASN1_ID
		{
			newLeafNode(lv_id_1_0, grammarAccess.getValueTypeAccess().getIdASN1_IDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_1_0, 
        		"ASN1_ID");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getTypesTypeReferenceExtParserRuleCall_2_0()); 
	    }
		lv_types_2_0=ruleTypeReferenceExt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TypeReferenceExt");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getSimpleTypeASN1_TYPEParserRuleCall_3_0()); 
	    }
		lv_simpleType_3_0=ruleASN1_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"simpleType",
        		lv_simpleType_3_0, 
        		"ASN1_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueTypeAccess().getMacroValueMacroValueParserRuleCall_4_0()); 
	    }
		lv_macroValue_4_0=ruleMacroValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueTypeRule());
	        }
       		set(
       			$current, 
       			"macroValue",
        		lv_macroValue_4_0, 
        		"MacroValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueTypeAccess().getValueTypeAction_5_0(),
            $current);
    }
)	otherlv_6='OBJECT IDENTIFIER' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getValueTypeAccess().getOBJECTIDENTIFIERKeyword_5_1());
    }
))
;





// Entry rule entryRuleMacroValue
entryRuleMacroValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroValueRule()); }
	 iv_ruleMacroValue=ruleMacroValue 
	 { $current=$iv_ruleMacroValue.current; } 
	 EOF 
;

// Rule MacroValue
ruleMacroValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMacroValueAccess().getMacroValueAction_0(),
            $current);
    }
)	otherlv_1='value' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMacroValueAccess().getValueKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMacroValueAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroValueAccess().getValueTypeMacroValueTypeParserRuleCall_3_0()); 
	    }
		lv_valueType_3_0=ruleMacroValueType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroValueRule());
	        }
       		set(
       			$current, 
       			"valueType",
        		lv_valueType_3_0, 
        		"MacroValueType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMacroValueAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleMacroValueType
entryRuleMacroValueType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroValueTypeRule()); }
	 iv_ruleMacroValueType=ruleMacroValueType 
	 { $current=$iv_ruleMacroValueType.current; } 
	 EOF 
;

// Rule MacroValueType
ruleMacroValueType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMacroValueTypeAccess().getUpdateUpdateTypeParserRuleCall_0_0()); 
	    }
		lv_update_0_0=ruleUpdateType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroValueTypeRule());
	        }
       		set(
       			$current, 
       			"update",
        		lv_update_0_0, 
        		"UpdateType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroValueTypeAccess().getLiteralValueCapTypeParserRuleCall_1_0()); 
	    }
		lv_literal_1_0=ruleValueCapType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroValueTypeRule());
	        }
       		set(
       			$current, 
       			"literal",
        		lv_literal_1_0, 
        		"ValueCapType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_string_2_0=	'IA5String' 
    {
        newLeafNode(lv_string_2_0, grammarAccess.getMacroValueTypeAccess().getStringIA5StringKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroValueTypeRule());
	        }
       		setWithLastConsumed($current, "string", lv_string_2_0, "IA5String");
	    }

)
))
;





// Entry rule entryRuleUpdateType
entryRuleUpdateType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateTypeRule()); }
	 iv_ruleUpdateType=ruleUpdateType 
	 { $current=$iv_ruleUpdateType.current; } 
	 EOF 
;

// Rule UpdateType
ruleUpdateType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_update_0_0=	'Update' 
    {
        newLeafNode(lv_update_0_0, grammarAccess.getUpdateTypeAccess().getUpdateUpdateKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateTypeRule());
	        }
       		setWithLastConsumed($current, "update", true, "Update");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateTypeAccess().getRefTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_ref_1_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateTypeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_1_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValueCapType
entryRuleValueCapType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueCapTypeRule()); }
	 iv_ruleValueCapType=ruleValueCapType 
	 { $current=$iv_ruleValueCapType.current; } 
	 EOF 
;

// Rule ValueCapType
ruleValueCapType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getValueCapTypeAccess().getMACRO_VALUE_CAPAction_0(),
            $current);
    }
)	otherlv_1='VALUE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getValueCapTypeAccess().getVALUEKeyword_1());
    }
(	otherlv_2='OBJECT IDENTIFIER' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getValueCapTypeAccess().getOBJECTIDENTIFIERKeyword_2_0());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getValueCapTypeAccess().getRefTypeReferenceParserRuleCall_2_1_0()); 
	    }
		lv_ref_3_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueCapTypeRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_3_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleASN1_TYPE
entryRuleASN1_TYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_TYPERule()); }
	 iv_ruleASN1_TYPE=ruleASN1_TYPE 
	 { $current=$iv_ruleASN1_TYPE.current; } 
	 EOF 
;

// Rule ASN1_TYPE
ruleASN1_TYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getASN1_TYPEAccess().getASN1_SIMPLEParserRuleCall_0()); 
    }
    this_ASN1_SIMPLE_0=ruleASN1_SIMPLE
    { 
        $current = $this_ASN1_SIMPLE_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getASN1_TYPEAccess().getASN1_CHOICEParserRuleCall_1()); 
    }
    this_ASN1_CHOICE_1=ruleASN1_CHOICE
    { 
        $current = $this_ASN1_CHOICE_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleASN1_SIMPLE
entryRuleASN1_SIMPLE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_SIMPLERule()); }
	 iv_ruleASN1_SIMPLE=ruleASN1_SIMPLE 
	 { $current=$iv_ruleASN1_SIMPLE.current; } 
	 EOF 
;

// Rule ASN1_SIMPLE
ruleASN1_SIMPLE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_SIMPLEAccess().getASN1_SIMPLEAction_0_0(),
            $current);
    }
)	otherlv_1='empty' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_SIMPLEAccess().getEmptyKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_SIMPLEAccess().getASN1_SIMPLEAction_1_0(),
            $current);
    }
)this_IA5STRING_3=RULE_IA5STRING
    { 
    newLeafNode(this_IA5STRING_3, grammarAccess.getASN1_SIMPLEAccess().getIA5STRINGTerminalRuleCall_1_1()); 
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getASN1_OCTET_STRINGParserRuleCall_2_0()); 
    }
    this_ASN1_OCTET_STRING_4=ruleASN1_OCTET_STRING
    { 
        $current = $this_ASN1_OCTET_STRING_4.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getConstraintASN1_SUBTYPEParserRuleCall_2_1_0()); 
	    }
		lv_constraint_5_0=ruleASN1_SUBTYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SIMPLERule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_5_0, 
        		"ASN1_SUBTYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
    |
    { 
        newCompositeNode(grammarAccess.getASN1_SIMPLEAccess().getASN1_INTEGERParserRuleCall_3()); 
    }
    this_ASN1_INTEGER_6=ruleASN1_INTEGER
    { 
        $current = $this_ASN1_INTEGER_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleASN1_OCTET_STRING
entryRuleASN1_OCTET_STRING returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_OCTET_STRINGRule()); }
	 iv_ruleASN1_OCTET_STRING=ruleASN1_OCTET_STRING 
	 { $current=$iv_ruleASN1_OCTET_STRING.current; } 
	 EOF 
;

// Rule ASN1_OCTET_STRING
ruleASN1_OCTET_STRING returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_OCTET_STRINGAccess().getASN1_OCTET_STRINGAction_0(),
            $current);
    }
)	otherlv_1='OCTET' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_OCTET_STRINGAccess().getOCTETKeyword_1());
    }
	otherlv_2='STRING' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getASN1_OCTET_STRINGAccess().getSTRINGKeyword_2());
    }
)
;





// Entry rule entryRuleASN1_INTEGER
entryRuleASN1_INTEGER returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_INTEGERRule()); }
	 iv_ruleASN1_INTEGER=ruleASN1_INTEGER 
	 { $current=$iv_ruleASN1_INTEGER.current; } 
	 EOF 
;

// Rule ASN1_INTEGER
ruleASN1_INTEGER returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'INTEGER' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getASN1_INTEGERAccess().getNameINTEGERKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_INTEGERRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "INTEGER");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_INTEGERAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_INTEGERAccess().getRangeASN1_RANGEParserRuleCall_1_1_0()); 
	    }
		lv_range_2_0=ruleASN1_RANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_INTEGERRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"ASN1_RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_INTEGERAccess().getRightParenthesisKeyword_1_2());
    }
)?)
;





// Entry rule entryRuleASN1_SUBTYPE
entryRuleASN1_SUBTYPE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_SUBTYPERule()); }
	 iv_ruleASN1_SUBTYPE=ruleASN1_SUBTYPE 
	 { $current=$iv_ruleASN1_SUBTYPE.current; } 
	 EOF 
;

// Rule ASN1_SUBTYPE
ruleASN1_SUBTYPE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_SUBTYPEAccess().getLeftParenthesisKeyword_0());
    }
	otherlv_1='SIZE' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_SUBTYPEAccess().getSIZEKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getASN1_SUBTYPEAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SUBTYPEAccess().getRangesASN1_RANGEParserRuleCall_3_0()); 
	    }
		lv_ranges_3_0=ruleASN1_RANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SUBTYPERule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_3_0, 
        		"ASN1_RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='|' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getASN1_SUBTYPEAccess().getVerticalLineKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_SUBTYPEAccess().getRangesASN1_RANGEParserRuleCall_4_1_0()); 
	    }
		lv_ranges_5_0=ruleASN1_RANGE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_SUBTYPERule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_5_0, 
        		"ASN1_RANGE");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getASN1_SUBTYPEAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getASN1_SUBTYPEAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleASN1_RANGE
entryRuleASN1_RANGE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_RANGERule()); }
	 iv_ruleASN1_RANGE=ruleASN1_RANGE 
	 { $current=$iv_ruleASN1_RANGE.current; } 
	 EOF 
;

// Rule ASN1_RANGE
ruleASN1_RANGE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getASN1_RANGEAccess().getASN1_RANGEAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_BIG_INTEGER
		{
			newLeafNode(lv_value_1_0, grammarAccess.getASN1_RANGEAccess().getValueBIG_INTEGERTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"BIG_INTEGER");
	    }

)
))
    |((
(
		lv_start_2_0=RULE_BIG_INTEGER
		{
			newLeafNode(lv_start_2_0, grammarAccess.getASN1_RANGEAccess().getStartBIG_INTEGERTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"start",
        		lv_start_2_0, 
        		"BIG_INTEGER");
	    }

)
)	otherlv_3='..' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getASN1_RANGEAccess().getFullStopFullStopKeyword_1_1());
    }
(
(
		lv_end_4_0=RULE_BIG_INTEGER
		{
			newLeafNode(lv_end_4_0, grammarAccess.getASN1_RANGEAccess().getEndBIG_INTEGERTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_RANGERule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"end",
        		lv_end_4_0, 
        		"BIG_INTEGER");
	    }

)
)))
;





// Entry rule entryRuleASN1_CHOICE
entryRuleASN1_CHOICE returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_CHOICERule()); }
	 iv_ruleASN1_CHOICE=ruleASN1_CHOICE 
	 { $current=$iv_ruleASN1_CHOICE.current; } 
	 EOF 
;

// Rule ASN1_CHOICE
ruleASN1_CHOICE returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CHOICE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASN1_CHOICEAccess().getCHOICEKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getASN1_CHOICEAccess().getLeftCurlyBracketKeyword_1());
    }
(this_NEWLINE_2=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_2, grammarAccess.getASN1_CHOICEAccess().getNEWLINETerminalRuleCall_2()); 
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_CHOICEAccess().getChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_3_0()); 
	    }
		lv_choiceType_3_0=ruleASN1_CHOICE_ENTRY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_CHOICERule());
	        }
       		add(
       			$current, 
       			"choiceType",
        		lv_choiceType_3_0, 
        		"ASN1_CHOICE_ENTRY");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getASN1_CHOICEAccess().getCommaKeyword_4_0());
    }
(this_NEWLINE_5=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_5, grammarAccess.getASN1_CHOICEAccess().getNEWLINETerminalRuleCall_4_1()); 
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_CHOICEAccess().getChoiceTypeASN1_CHOICE_ENTRYParserRuleCall_4_2_0()); 
	    }
		lv_choiceType_6_0=ruleASN1_CHOICE_ENTRY		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_CHOICERule());
	        }
       		add(
       			$current, 
       			"choiceType",
        		lv_choiceType_6_0, 
        		"ASN1_CHOICE_ENTRY");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_NEWLINE_7=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_7, grammarAccess.getASN1_CHOICEAccess().getNEWLINETerminalRuleCall_5()); 
    }
)+	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getASN1_CHOICEAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleASN1_CHOICE_ENTRY
entryRuleASN1_CHOICE_ENTRY returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASN1_CHOICE_ENTRYRule()); }
	 iv_ruleASN1_CHOICE_ENTRY=ruleASN1_CHOICE_ENTRY 
	 { $current=$iv_ruleASN1_CHOICE_ENTRY.current; } 
	 EOF 
;

// Rule ASN1_CHOICE_ENTRY
ruleASN1_CHOICE_ENTRY returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ASN1_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getASN1_CHOICE_ENTRYAccess().getIdASN1_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getASN1_CHOICE_ENTRYRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ASN1_ID");
	    }

)
)(this_NEWLINE_1=RULE_NEWLINE
    { 
    newLeafNode(this_NEWLINE_1, grammarAccess.getASN1_CHOICE_ENTRYAccess().getNEWLINETerminalRuleCall_1()); 
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getASN1_CHOICE_ENTRYAccess().getValueTypeChoiceTypeParserRuleCall_2_0()); 
	    }
		lv_valueType_2_0=ruleChoiceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getASN1_CHOICE_ENTRYRule());
	        }
       		set(
       			$current, 
       			"valueType",
        		lv_valueType_2_0, 
        		"ChoiceType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChoiceType
entryRuleChoiceType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceTypeRule()); }
	 iv_ruleChoiceType=ruleChoiceType 
	 { $current=$iv_ruleChoiceType.current; } 
	 EOF 
;

// Rule ChoiceType
ruleChoiceType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getChoiceTypeAccess().getChoiceTypeAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceTypeAccess().getTypeRefTypeReferenceParserRuleCall_1_0_0()); 
	    }
		lv_typeRef_1_0=ruleTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceTypeRule());
	        }
       		set(
       			$current, 
       			"typeRef",
        		lv_typeRef_1_0, 
        		"TypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceTypeAccess().getSimpleTypeASN1_TYPEParserRuleCall_1_1_0()); 
	    }
		lv_simpleType_2_0=ruleASN1_TYPE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceTypeRule());
	        }
       		set(
       			$current, 
       			"simpleType",
        		lv_simpleType_2_0, 
        		"ASN1_TYPE");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_3='OBJECT IDENTIFIER' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChoiceTypeAccess().getOBJECTIDENTIFIERKeyword_1_2());
    }
))
;





RULE_MODULE_ID : RULE_ALPHA_CAP (RULE_ALPHA|RULE_ALPHA_CAP|'-'|RULE_NUMERIC)* (RULE_ALPHA_CAP|RULE_ALPHA|RULE_NUMERIC);

RULE_ASN1_ID : RULE_ALPHA (RULE_ALPHA|RULE_ALPHA_CAP|'-'|RULE_NUMERIC)* (RULE_ALPHA_CAP|RULE_ALPHA|RULE_NUMERIC);

RULE_PARAMETER : '"' RULE_MODULE_ID '"';

RULE_IA5STRING : '"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"';

fragment RULE_ALPHA : 'a'..'z';

fragment RULE_ALPHA_CAP : 'A'..'Z';

fragment RULE_NUMERIC : '0'..'9';

RULE_BIG_INTEGER : '-'? ('0'..'9')+;

RULE_SL_ASN1_COMMENT : '--' ~(('\n'|'\r'))*;

RULE_WS : (' '|'\t')+;

RULE_NEWLINE : ('\r'?|'\n');

RULE_ANY_OTHER : .;


