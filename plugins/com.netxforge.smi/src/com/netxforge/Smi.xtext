/**
 * 
 * Xtext grammar for:  
 *
 * Structure of Management Information Version 2 (SMIv2)
 * http://tools.ietf.org/html/rfc2578
 * 
 * ASN.1 Notation from: 
 * 
 * Author: Christophe Bouhier
 * 2013
 * 
 * This grammar defines SMIv2 but is also capable to process SMIv2 Information Modules.
 *  
 * 
 * Disclaimer
 * 
 * Design
 * ------
 * ASN1 has grammar constraints for where type, value assignments, Macro's etc... should start (On a new line) 
 * There for we do not hide the CR/LF tokens when lexing. As new line occurences elsewhere in the grammar are
 * included in various rules. lile befor a 'BEGIN' keyword. Although this doesn't improve the readability it allows 
 * very detailed control on each rule. 
 * 
 * Version History
 * ---------------
 * 1.0 Initial version 
 * - Support for Macro's 
 * - Support for Object Identifiers
 * 
 * 
 */
grammar com.netxforge.Smi hidden(WS, SL_ASN1_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate smi "http://www.netxforge.com/Smi"

Module:
	name=MODULE_ID 'DEFINITIONS' '::=' 'BEGIN'
	imports=Imports? (objects+=ObjectReferenceable |
	types+=Referenceable)+
	NEWLINE+ 'END' NEWLINE*;

Imports:
	NEWLINE+ 'IMPORTS' imports+=ImportClosure+ ';';

	//ImportClosure:
//	'FROM' importURI=MODULE_ID;
ImportClosure:
	refs=ImportRefs NEWLINE* 'FROM' importURI=MODULE_ID;

	// Consists of OID, Macro, Type usage Refs. 
ImportRefs:
	NEWLINE* refs+=ImportRef (',' NEWLINE* refs+=ImportRef)*;

ImportRef:
	oiRef=[ObjectReferenceable|ASN1_ID] | typeRef=[Referenceable|MODULE_ID];

ObjectReferenceable:
	NEWLINE+ name=ASN1_ID NEWLINE* ('OBJECT IDENTIFIER' | object=Object) NEWLINE* '::=' '{' objectValue=ObjectReference '}';

Object:
	macroRef=[Referenceable|MODULE_ID] attributes+=Attribute+;

	// The value of the Object identifier	
ObjectReference:
	(name=ASN1_ID | => descriptorRef=[ObjectReferenceable|ASN1_ID] )? subIds+=BIG_INTEGER (subIds+=BIG_INTEGER)*;

Attribute:
	NEWLINE+ paramRef=[Referenceable|MODULE_ID] value=AttributeValue;

	// The Identifier is very often an enum
AttributeValue:
	NEWLINE* (identifier=Identifier | text=IA5STRING | typeRef=[Referenceable|MODULE_ID] (subType=ASN1_SUBTYPE)?) |
	objectRef=BracedObjectReference | integer=ASN1_INTEGER |
	sequenceOf=ASN1_SEQUENCE_OF | {AttributeValue} 'OBJECT IDENTIFIER';

Identifier:
	id=ASN1_ID;

BracedObjectReference:
	'{' objectRef=[ObjectReferenceable|ASN1_ID] '}';

Referenceable:
	Macro | TypeDefinition;

	// An ASN.1 Value assignment. 
TypeDefinition returns Referenceable:
	NEWLINE+ name=MODULE_ID '::=' values+=Value+;

	// An ASN.1 Macro structure
Macro returns Referenceable:
	NEWLINE+ name=MODULE_ID 'MACRO' '::=' NEWLINE+ 'BEGIN' typeNotation=TypeNotation valueNotation=ValueNotation
	innerTypes+=TypeDefinition+ // Define 1 or more type definitions
	NEWLINE+ 'END';

TypeNotation:
	NEWLINE+ name='TYPE' 'NOTATION' '::=' typeNotations+=TypeAssignment+ // Reference one or more type assignment.
;

ValueNotation:
	NEWLINE+ name='VALUE' 'NOTATION' '::=' valueNotations+=ValueAssignment+ // Define one Macro value.
;

// An ASN.1 Macro Type Notation, it's slightly different then  a type definition. 
TypeAssignment:
	NEWLINE+ (ParamAssignment | TypeReference | MacroValue);

	// An ASN.1 Parameter assignment
ParamAssignment returns Referenceable:
	name=PARAMETER right=TypeNotationRight;

TypeNotationRight:
	TypeReference | value=MacroValue;

	// Types can be referred once or twice. The right side is named a child reference.
// The Right-hand side can also be a 
TypeReferenceExt returns TypeAssignment:
	parentRef=TypeReference (=> childRef=TypeReference)?;

TypeReference returns TypeAssignment:
	type=[Referenceable|MODULE_ID] | BracedTypeReference;

	// A Type reference which is enclosed with "{" "}" 
BracedTypeReference returns TypeAssignment:
	'"{"' TypeReference '"}"';

ValueAssignment:
	NEWLINE? valueNotation=MacroValue;

Value:
	(tag=Tag)? NEWLINE* (implicit?='IMPLICIT')? valueTypes+=ValueType (NEWLINE* '|'
	valueTypes+=ValueType)*;

	// ASN1 Tagging
Tag:
	NEWLINE? '[APPLICATION' tagValue=BIG_INTEGER ']';

ValueType:
	(param=ParamAssignment | id=ASN1_ID | types=TypeReferenceExt | simpleType=ASN1_TYPE |
	macroValue=MacroValue |
	{ValueType} 'OBJECT IDENTIFIER');

MacroValue returns Value:
	{MacroValue} 'value' '(' valueType=MacroValueType ')';

	// Note: Grammar should be 'Update' OR 'VALUE' but this gives a llc error.  
MacroValueType:
	(update?='Update'? & valueCAP?='VALUE'?) (ref=TypeReference | oi='OBJECT IDENTIFIER' | string='IA5String');

	// Simple and structured types. 
ASN1_TYPE:
	ASN1_SIMPLE | ASN1_CHOICE | ASN1_SEQUENCE;

	// -- the "base types" defined here are:
// --   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER
ASN1_SIMPLE returns ASN1_TYPE:
	{ASN1_SIMPLE} 'empty' | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER;

ASN1_OCTET_STRING returns ASN1_SIMPLE:
	{ASN1_OCTET_STRING} 'OCTET' 'STRING';

	// Support for Type refinement, like in TEXTUAL-CONVENTION, SYNTAX type definition 
ASN1_INTEGER returns ASN1_SIMPLE:
	name='INTEGER' ('(' range=ASN1_RANGE ')')? refinement=ASN1_INTEGER_REFINEMENT?;

ASN1_INTEGER_REFINEMENT:
	'{' (NEWLINE* refinements+=ASN1_ID '(' ints+=BIG_INTEGER ')') (',' NEWLINE* refinements+=ASN1_ID '(' ints+=BIG_INTEGER
	')')* NEWLINE* '}';

	// Is this needed? 
//	'{' (valuePairs+=ASN1_VALUEPAIR)+ '}';
ASN1_SUBTYPE returns ASN1_SIMPLE:
	'(' 'SIZE' '(' ranges+=ASN1_RANGE ('|' ranges+=ASN1_RANGE)* ')' ')';

ASN1_RANGE:
	{ASN1_RANGE} value=BIG_INTEGER | (start=BIG_INTEGER '..' end=BIG_INTEGER);

	// TODO1 Requries further definition. 	

//Choice:
// http://www.obj-sys.com/asn1tutorial/node11.html
ASN1_CHOICE:
	'CHOICE' '{' NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY (',' NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)*
	NEWLINE+ '}';

ASN1_SEQUENCE:
	'SEQUENCE' '{' NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY (',' NEWLINE+ choiceType+=ASN1_CHOICE_ENTRY)*
	NEWLINE+ '}';

ASN1_SEQUENCE_OF:
	'SEQUENCE' 'OF' ref=TypeReference;

	// TODO1 The reference to a ValueType is indented by 4 WS on the next line. 
//  
ASN1_CHOICE_ENTRY:
	id=ASN1_ID NEWLINE? valueType=ChoiceType;

ChoiceType:
	{ChoiceType} (typeRef=TypeReference | simpleType=ASN1_TYPE | 'OBJECT IDENTIFIER');

terminal MODULE_ID:
	(ALPHA_CAP) (ALPHA | ALPHA_CAP
	| '-' | NUMERIC)* (ALPHA_CAP | ALPHA | NUMERIC);

terminal ASN1_ID:
	(ALPHA) (ALPHA | ALPHA_CAP | '-' | NUMERIC)* (ALPHA_CAP | ALPHA | NUMERIC);

terminal PARAMETER:
	'"' MODULE_ID '"';

terminal IA5STRING:
	'"' ('\\' ('b' |
	't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"';

terminal fragment ALPHA:
	'a'..'z';

terminal fragment ALPHA_CAP:
	'A'..'Z';

terminal fragment NUMERIC:
	'0'..'9';

terminal BIG_INTEGER returns ecore::EBigInteger:
	'-'? ('0'..'9')+;

	// Section 3.4 
// ... ASN.1 comments commence with a pair of adjacent hyphens and end with
// the next pair of adjacent hyphens or at the end of the line,
// whichever occurs first.  Comments ended by a pair of hyphens have the
// effect of a single space character.

// TODO1 Comments ended by a pair of hyphens have the effect of a single space character.
terminal SL_ASN1_COMMENT:
	'--' !('\n' | '\r')*;

terminal WS:
	(' ' | '\t')+;

terminal NEWLINE:
	'\r'? | '\n';

terminal ANY_OTHER:
	.;