/**
 * 
 * Xtext grammar for:  

 * Structure of Management Information Version 2 (SMIv2)
 * http://tools.ietf.org/html/rfc2578
 * 
 * ASN.1 Notation from: 
 * 
 * TODO: Refer to the specifications, not this tutorial. 
 * http://www.obj-sys.com/asn1tutorial/node4.html
 * 
 * Author: Christophe Bouhier
 * 2013
 * 
 * This grammar defines SMIv2 but is also capable to process SMIv2 Information Modules. 
 * 
 * Disclaimer
 * 
 */
grammar com.netxforge.Smi with org.eclipse.xtext.common.Terminals hidden(WS, SL_ASN1_COMMENT)

generate smi "http://www.netxforge.com/Smi"

Module:
	id=MODULE_ID 'DEFINITIONS' '::=' 'BEGIN'
	(assignments+=Assignment)*
	'END';

	// General Structure
Assignment:
	identifier=ObjectIdentifier | type=TypeDefinition | macro=Macro;

	// Object Identifier
ObjectIdentifier:
	name=ASN1_ID 'OBJECT IDENTIFIER' '::=' '{' oidValue=ObjectIdentifierValue '}';

ObjectIdentifierValue:
	(descriptorReference=[ObjectIdentifier] | ASN1_ID)? subIds+=INT (subIds+=INT)*;

	// An ASN.1 Value assignment. 
TypeDefinition:
	name=(MODULE_ID) '::=' scope=Scope;

	// Macro
Macro:
	name=MODULE_ID 'MACRO' '::='
	'BEGIN'
	'TYPE NOTATION' '::=' typeNotations+=TypeAssignment+ // Reference one or more type assignment. 
	'VALUE NOTATION' '::=' valueNotation=MacroValue // Define one Macro value. 
	innerTypes+=TypeDefinition+ // Define 1 or more type definitions
	'END';


	// An ASN.1 Macro Type Notation
TypeAssignment:
	(ParamAssignment | TypeReference);

ParamAssignment:
	param=PARAMETER (=> right=TypeNotation);

TypeNotation:
	TypeReference | value=MacroValue;

TypeReferenceExt:
	TypeReference (=> right=TypeReference)?;

TypeReference:
	type=[TypeDefinition|MODULE_ID];

Scope:
	scope=Value;

	// TODO, no closing symbol like '{', determine based on indentation. 
// A Value can not be determined for the next type definition. 

Value:
	valueTypes+=ValueType ('|' valueTypes+=ValueType)*;

ValueType:
	(name=IA5STRING)? (param=ParamAssignment | type=TypeReferenceExt | simpleType=ASN1_TYPE | macroValue=MacroValue |
	oi='OBJECT IDENTIFIER');

MacroValue:
	{MacroValue} 'value' '(' type=MACRO_VALUE_TYPE ')';

MACRO_VALUE_TYPE:
	valLiteral=MACRO_VALUE_CAP
	| update=UpdateType;

UpdateType:
	'Update' type=[TypeDefinition|MODULE_ID];


MACRO_VALUE_CAP:
	value='VALUE' literal=VALUE_CAP_LITERALS;

enum VALUE_CAP_LITERALS:
	oiLiteral='OBJECT IDENTIFIER' | ia5StringLiteral='IA5String';

	// Simple and structured types. 
ASN1_TYPE:
	ASN1_SIMPLE | ASN1_CHOICE;

	// -- the "base types" defined here are:
// --   3 built-in ASN.1 types: INTEGER, OCTET STRING, OBJECT IDENTIFIER
ASN1_SIMPLE:
	{ASN1_SIMPLE} 'empty' | {ASN1_SIMPLE} IA5STRING | ASN1_OCTET_STRING constraint=ASN1_SUBTYPE? | ASN1_INTEGER
	constraint=ASN1_RANGE?;

ASN1_OCTET_STRING returns ASN1_SIMPLE:
	{ASN1_OCTET_STRING} 'OCTET STRING';

ASN1_INTEGER returns ASN1_SIMPLE:
	'INTEGER' '{' (valuePairs+=ASN1_VALUEPAIR)+ '}';

ASN1_SUBTYPE:
	'(' 'SIZE' '(' ranges+=ASN1_RANGE
	('|' ranges+=ASN1_RANGE)* ')' ')';

ASN1_RANGE:
	{ASN1_RANGE} value=INT | (start=INT '..' end=INT);

	// TODO1 Requries further definition. 	

// TODO1 further specify id, as enum entry in the vp
ASN1_VALUEPAIR:
	(ID)? '(' INT ')';

	//Choice:
// http://www.obj-sys.com/asn1tutorial/node11.html
ASN1_CHOICE:
	'CHOICE' '{' choices+=ASN1_CHOICE_ENTRY (',' choices+=ASN1_CHOICE_ENTRY)* '}';

	// TODO1 The reference to a ValueType is indented by 4 WS on the next line. 
//  
ASN1_CHOICE_ENTRY:
	id=ASN1_ID valueType=[ValueType];


terminal MODULE_ID:
	(ALPHA_CAP) (ALPHA | ALPHA_CAP | '-' | NUMERIC)* (ALPHA_CAP | ALPHA | NUMERIC);

terminal ASN1_ID:
	(ALPHA) (ALPHA | ALPHA_CAP | '-' | NUMERIC)*;

terminal PARAMETER:
	'"' MODULE_ID '"';

terminal IA5STRING:
	'"' ('\\' ('b'
	| 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"';

	// Fragments.
terminal fragment NUMERIC:
	'0'..'9';

terminal fragment ALPHA:
	'a'..'z';

terminal fragment ALPHA_CAP:
	'A'..'Z';

	// Section 3.4 
// ... ASN.1 comments commence with a pair of adjacent hyphens and end with
// the next pair of adjacent hyphens or at the end of the line,
// whichever occurs first.  Comments ended by a pair of hyphens have the
// effect of a single space character.

// TODO1 Comments ended by a pair of hyphens have the effect of a single space character.
terminal SL_ASN1_COMMENT:
	'--' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;
