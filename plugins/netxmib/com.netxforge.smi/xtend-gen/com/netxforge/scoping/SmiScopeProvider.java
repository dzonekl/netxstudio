/**
 * generated by Xtext
 */
package com.netxforge.scoping;

import com.netxforge.smi.Attribute;
import com.netxforge.smi.AttributeValue;
import com.netxforge.smi.ObjectReferenceable;
import com.netxforge.smi.Referenceable;
import com.netxforge.smi.SmiPackage;
import com.netxforge.smi.TypeNotation;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class SmiScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Attribute_paramRef(final Attribute attr, final EReference eRef) {
    IScope _xblockexpression = null;
    {
      EObject _eContainer = attr.eContainer();
      final ObjectReferenceable o = ((ObjectReferenceable) _eContainer);
      com.netxforge.smi.Object _object = o.getObject();
      Referenceable _macroRef = _object.getMacroRef();
      TypeNotation _typeNotation = _macroRef.getTypeNotation();
      _xblockexpression = super.getScope(_typeNotation, SmiPackage.Literals.TYPE_NOTATION__TYPE_NOTATIONS);
    }
    return _xblockexpression;
  }
  
  public IScope scope_AttributeValue_ref(final AttributeValue attrValue, final EReference eRef) {
    IScope _xblockexpression = null;
    {
      EObject _eContainer = attrValue.eContainer();
      final Attribute attr = ((Attribute) _eContainer);
      final Referenceable ref = attr.getParamRef();
      IScope _xifexpression = null;
      boolean _eIsSet = ref.eIsSet(SmiPackage.Literals.REFERENCEABLE__RIGHT);
      if (_eIsSet) {
        _xifexpression = super.getScope(ref, SmiPackage.Literals.REFERENCEABLE__RIGHT);
      } else {
        Object _eGet = ref.eGet(SmiPackage.Literals.REFERENCEABLE__VALUES);
        final List<?> values = ((List<?>) _eGet);
        boolean _isEmpty = values.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          return super.getScope(ref, SmiPackage.Literals.REFERENCEABLE__VALUES);
        }
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
