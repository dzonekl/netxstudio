/*
* generated by Xtext
*/
package com.netxforge.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.netxforge.services.SmiGrammarAccess;

public class SmiParser extends AbstractContentAssistParser {
	
	@Inject
	private SmiGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.netxforge.ui.contentassist.antlr.internal.InternalSmiParser createParser() {
		com.netxforge.ui.contentassist.antlr.internal.InternalSmiParser result = new com.netxforge.ui.contentassist.antlr.internal.InternalSmiParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAssignmentAccess().getAlternatives(), "rule__Assignment__Alternatives");
					put(grammarAccess.getValueTypeAccess().getAlternatives_1(), "rule__ValueType__Alternatives_1");
					put(grammarAccess.getASN1_TYPEAccess().getAlternatives(), "rule__ASN1_TYPE__Alternatives");
					put(grammarAccess.getASN1_SIMPLEAccess().getAlternatives(), "rule__ASN1_SIMPLE__Alternatives");
					put(grammarAccess.getASN1_SUBTYPEAccess().getAlternatives(), "rule__ASN1_SUBTYPE__Alternatives");
					put(grammarAccess.getMACRO_VALUE_TYPEAccess().getAlternatives(), "rule__MACRO_VALUE_TYPE__Alternatives");
					put(grammarAccess.getWELL_KNOWN_NAMESAccess().getAlternatives(), "rule__WELL_KNOWN_NAMES__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getMacroAccess().getGroup(), "rule__Macro__Group__0");
					put(grammarAccess.getMacroValueAccess().getGroup(), "rule__MacroValue__Group__0");
					put(grammarAccess.getValueAssignmentAccess().getGroup(), "rule__ValueAssignment__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup_1_0(), "rule__Or__Group_1_0__0");
					put(grammarAccess.getValueTypeAccess().getGroup(), "rule__ValueType__Group__0");
					put(grammarAccess.getASN1_SIMPLEAccess().getGroup_0(), "rule__ASN1_SIMPLE__Group_0__0");
					put(grammarAccess.getASN1_SIMPLEAccess().getGroup_2(), "rule__ASN1_SIMPLE__Group_2__0");
					put(grammarAccess.getASN1_SIMPLEAccess().getGroup_2_1(), "rule__ASN1_SIMPLE__Group_2_1__0");
					put(grammarAccess.getASN1_OCTET_STRINGAccess().getGroup(), "rule__ASN1_OCTET_STRING__Group__0");
					put(grammarAccess.getASN1_INTEGERAccess().getGroup(), "rule__ASN1_INTEGER__Group__0");
					put(grammarAccess.getASN1_VALUEPAIRAccess().getGroup(), "rule__ASN1_VALUEPAIR__Group__0");
					put(grammarAccess.getASN1_CHOICEAccess().getGroup(), "rule__ASN1_CHOICE__Group__0");
					put(grammarAccess.getASN1_CHOICEAccess().getGroup_3(), "rule__ASN1_CHOICE__Group_3__0");
					put(grammarAccess.getASN1_CHOICE_ENTRYAccess().getGroup(), "rule__ASN1_CHOICE_ENTRY__Group__0");
					put(grammarAccess.getASN1_SUBTYPEAccess().getGroup_0(), "rule__ASN1_SUBTYPE__Group_0__0");
					put(grammarAccess.getASN1_RANGEAccess().getGroup(), "rule__ASN1_RANGE__Group__0");
					put(grammarAccess.getASN1_RANGEAccess().getGroup_2(), "rule__ASN1_RANGE__Group_2__0");
					put(grammarAccess.getObjectIdentifierAccess().getGroup(), "rule__ObjectIdentifier__Group__0");
					put(grammarAccess.getObjectIdentifierValueAccess().getGroup(), "rule__ObjectIdentifierValue__Group__0");
					put(grammarAccess.getModuleAccess().getIdAssignment_0(), "rule__Module__IdAssignment_0");
					put(grammarAccess.getModuleAccess().getAssignmentsAssignment_4(), "rule__Module__AssignmentsAssignment_4");
					put(grammarAccess.getAssignmentAccess().getMacrosAssignment_0(), "rule__Assignment__MacrosAssignment_0");
					put(grammarAccess.getAssignmentAccess().getTypesAssignment_1(), "rule__Assignment__TypesAssignment_1");
					put(grammarAccess.getMacroAccess().getDescriptorAssignment_0(), "rule__Macro__DescriptorAssignment_0");
					put(grammarAccess.getMacroAccess().getTypeNotationsAssignment_5(), "rule__Macro__TypeNotationsAssignment_5");
					put(grammarAccess.getMacroAccess().getValueNotationAssignment_7(), "rule__Macro__ValueNotationAssignment_7");
					put(grammarAccess.getMacroAccess().getInnerTypesAssignment_8(), "rule__Macro__InnerTypesAssignment_8");
					put(grammarAccess.getMacroValueAccess().getTypeAssignment_2(), "rule__MacroValue__TypeAssignment_2");
					put(grammarAccess.getValueAssignmentAccess().getTypeReferenceAssignment_0(), "rule__ValueAssignment__TypeReferenceAssignment_0");
					put(grammarAccess.getValueAssignmentAccess().getValueAssignment_2(), "rule__ValueAssignment__ValueAssignment_2");
					put(grammarAccess.getOrAccess().getRightAssignment_1_1(), "rule__Or__RightAssignment_1_1");
					put(grammarAccess.getValueTypeAccess().getNameAssignment_0(), "rule__ValueType__NameAssignment_0");
					put(grammarAccess.getValueTypeAccess().getTypeAssignment_1_0(), "rule__ValueType__TypeAssignment_1_0");
					put(grammarAccess.getValueTypeAccess().getSimpleTypeAssignment_1_1(), "rule__ValueType__SimpleTypeAssignment_1_1");
					put(grammarAccess.getASN1_SIMPLEAccess().getConstraintAssignment_2_1_1(), "rule__ASN1_SIMPLE__ConstraintAssignment_2_1_1");
					put(grammarAccess.getASN1_INTEGERAccess().getValuePairsAssignment_2(), "rule__ASN1_INTEGER__ValuePairsAssignment_2");
					put(grammarAccess.getASN1_CHOICEAccess().getChoicesAssignment_2(), "rule__ASN1_CHOICE__ChoicesAssignment_2");
					put(grammarAccess.getASN1_CHOICEAccess().getChoicesAssignment_3_1(), "rule__ASN1_CHOICE__ChoicesAssignment_3_1");
					put(grammarAccess.getASN1_CHOICE_ENTRYAccess().getIdAssignment_0(), "rule__ASN1_CHOICE_ENTRY__IdAssignment_0");
					put(grammarAccess.getASN1_CHOICE_ENTRYAccess().getValueTypeAssignment_1(), "rule__ASN1_CHOICE_ENTRY__ValueTypeAssignment_1");
					put(grammarAccess.getASN1_SUBTYPEAccess().getRangeAssignment_0_1(), "rule__ASN1_SUBTYPE__RangeAssignment_0_1");
					put(grammarAccess.getASN1_SUBTYPEAccess().getValueAssignment_1(), "rule__ASN1_SUBTYPE__ValueAssignment_1");
					put(grammarAccess.getASN1_RANGEAccess().getStartAssignment_2_0(), "rule__ASN1_RANGE__StartAssignment_2_0");
					put(grammarAccess.getASN1_RANGEAccess().getEndAssignment_2_2(), "rule__ASN1_RANGE__EndAssignment_2_2");
					put(grammarAccess.getObjectIdentifierAccess().getDescriptorAssignment_0(), "rule__ObjectIdentifier__DescriptorAssignment_0");
					put(grammarAccess.getObjectIdentifierAccess().getOidValueAssignment_4(), "rule__ObjectIdentifier__OidValueAssignment_4");
					put(grammarAccess.getObjectIdentifierValueAccess().getDescriptorReferenceAssignment_0(), "rule__ObjectIdentifierValue__DescriptorReferenceAssignment_0");
					put(grammarAccess.getObjectIdentifierValueAccess().getSubIdsAssignment_1(), "rule__ObjectIdentifierValue__SubIdsAssignment_1");
					put(grammarAccess.getObjectIdentifierValueAccess().getSubIdsAssignment_2(), "rule__ObjectIdentifierValue__SubIdsAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.netxforge.ui.contentassist.antlr.internal.InternalSmiParser typedParser = (com.netxforge.ui.contentassist.antlr.internal.InternalSmiParser) parser;
			typedParser.entryRuleModule();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_SL_ASN1_COMMENT" };
	}
	
	public SmiGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SmiGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
