/*
* generated by Xtext
*/
grammar InternalNetxscript;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.netxforge.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.netxforge.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.netxforge.services.NetxscriptGrammarAccess;

}

@parser::members {
 
 	private NetxscriptGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(NetxscriptGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMod
entryRuleMod 
:
{ before(grammarAccess.getModRule()); }
	 ruleMod
{ after(grammarAccess.getModRule()); } 
	 EOF 
;

// Rule Mod
ruleMod
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModAccess().getGroup()); }
(rule__Mod__Group__0)
{ after(grammarAccess.getModAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArgument
entryRuleArgument 
:
{ before(grammarAccess.getArgumentRule()); }
	 ruleArgument
{ after(grammarAccess.getArgumentRule()); } 
	 EOF 
;

// Rule Argument
ruleArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArgumentAccess().getNameAssignment()); }
(rule__Argument__NameAssignment)
{ after(grammarAccess.getArgumentAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableStatement
entryRuleVariableStatement 
:
{ before(grammarAccess.getVariableStatementRule()); }
	 ruleVariableStatement
{ after(grammarAccess.getVariableStatementRule()); } 
	 EOF 
;

// Rule VariableStatement
ruleVariableStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableStatementAccess().getGroup()); }
(rule__VariableStatement__Group__0)
{ after(grammarAccess.getVariableStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement 
:
{ before(grammarAccess.getAssignmentStatementRule()); }
	 ruleAssignmentStatement
{ after(grammarAccess.getAssignmentStatementRule()); } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentStatementAccess().getGroup()); }
(rule__AssignmentStatement__Group__0)
{ after(grammarAccess.getAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlusAssignmentStatement
entryRulePlusAssignmentStatement 
:
{ before(grammarAccess.getPlusAssignmentStatementRule()); }
	 rulePlusAssignmentStatement
{ after(grammarAccess.getPlusAssignmentStatementRule()); } 
	 EOF 
;

// Rule PlusAssignmentStatement
rulePlusAssignmentStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getGroup()); }
(rule__PlusAssignmentStatement__Group__0)
{ after(grammarAccess.getPlusAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReferenceAssignmentStatement
entryRuleReferenceAssignmentStatement 
:
{ before(grammarAccess.getReferenceAssignmentStatementRule()); }
	 ruleReferenceAssignmentStatement
{ after(grammarAccess.getReferenceAssignmentStatementRule()); } 
	 EOF 
;

// Rule ReferenceAssignmentStatement
ruleReferenceAssignmentStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getGroup()); }
(rule__ReferenceAssignmentStatement__Group__0)
{ after(grammarAccess.getReferenceAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLogicalParserRuleCall()); }
	ruleLogical
{ after(grammarAccess.getExpressionAccess().getLogicalParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLogical
entryRuleLogical 
:
{ before(grammarAccess.getLogicalRule()); }
	 ruleLogical
{ after(grammarAccess.getLogicalRule()); } 
	 EOF 
;

// Rule Logical
ruleLogical
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogicalAccess().getGroup()); }
(rule__Logical__Group__0)
{ after(grammarAccess.getLogicalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquality
entryRuleEquality 
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityAccess().getGroup()); }
(rule__Equality__Group__0)
{ after(grammarAccess.getEqualityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddition
entryRuleAddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnary
entryRuleUnary 
:
{ before(grammarAccess.getUnaryRule()); }
	 ruleUnary
{ after(grammarAccess.getUnaryRule()); } 
	 EOF 
;

// Rule Unary
ruleUnary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryAccess().getAlternatives()); }
(rule__Unary__Alternatives)
{ after(grammarAccess.getUnaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOperator
entryRuleUnaryOperator 
:
{ before(grammarAccess.getUnaryOperatorRule()); }
	 ruleUnaryOperator
{ after(grammarAccess.getUnaryOperatorRule()); } 
	 EOF 
;

// Rule UnaryOperator
ruleUnaryOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
(rule__UnaryOperator__Alternatives)
{ after(grammarAccess.getUnaryOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getGroup()); }
(rule__NumberLiteral__Group__0)
{ after(grammarAccess.getNumberLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIndexedCall
entryRuleIndexedCall 
:
{ before(grammarAccess.getIndexedCallRule()); }
	 ruleIndexedCall
{ after(grammarAccess.getIndexedCallRule()); } 
	 EOF 
;

// Rule IndexedCall
ruleIndexedCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIndexedCallAccess().getGroup()); }
(rule__IndexedCall__Group__0)
{ after(grammarAccess.getIndexedCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNativeExpression
entryRuleNativeExpression 
:
{ before(grammarAccess.getNativeExpressionRule()); }
	 ruleNativeExpression
{ after(grammarAccess.getNativeExpressionRule()); } 
	 EOF 
;

// Rule NativeExpression
ruleNativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNativeExpressionAccess().getGroup()); }
(rule__NativeExpression__Group__0)
{ after(grammarAccess.getNativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarOrArgumentCall
entryRuleVarOrArgumentCall 
:
{ before(grammarAccess.getVarOrArgumentCallRule()); }
	 ruleVarOrArgumentCall
{ after(grammarAccess.getVarOrArgumentCallRule()); } 
	 EOF 
;

// Rule VarOrArgumentCall
ruleVarOrArgumentCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getGroup()); }
(rule__VarOrArgumentCall__Group__0)
{ after(grammarAccess.getVarOrArgumentCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRange
entryRuleRange 
:
{ before(grammarAccess.getRangeRule()); }
	 ruleRange
{ after(grammarAccess.getRangeRule()); } 
	 EOF 
;

// Rule Range
ruleRange
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeAccess().getRangeLiteralParserRuleCall()); }
	ruleRangeLiteral
{ after(grammarAccess.getRangeAccess().getRangeLiteralParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeLiteral
entryRuleRangeLiteral 
:
{ before(grammarAccess.getRangeLiteralRule()); }
	 ruleRangeLiteral
{ after(grammarAccess.getRangeLiteralRule()); } 
	 EOF 
;

// Rule RangeLiteral
ruleRangeLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeLiteralAccess().getGroup()); }
(rule__RangeLiteral__Group__0)
{ after(grammarAccess.getRangeLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReference
entryRuleReference 
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReferenceAccess().getAlternatives()); }
(rule__Reference__Alternatives)
{ after(grammarAccess.getReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParamRef
entryRuleParamRef 
:
{ before(grammarAccess.getParamRefRule()); }
	 ruleParamRef
{ after(grammarAccess.getParamRefRule()); } 
	 EOF 
;

// Rule ParamRef
ruleParamRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParamRefAccess().getGroup()); }
(rule__ParamRef__Group__0)
{ after(grammarAccess.getParamRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeTypeRef
entryRuleNodeTypeRef 
:
{ before(grammarAccess.getNodeTypeRefRule()); }
	 ruleNodeTypeRef
{ after(grammarAccess.getNodeTypeRefRule()); } 
	 EOF 
;

// Rule NodeTypeRef
ruleNodeTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeTypeRefAccess().getGroup()); }
(rule__NodeTypeRef__Group__0)
{ after(grammarAccess.getNodeTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNodeRef
entryRuleNodeRef 
:
{ before(grammarAccess.getNodeRefRule()); }
	 ruleNodeRef
{ after(grammarAccess.getNodeRefRule()); } 
	 EOF 
;

// Rule NodeRef
ruleNodeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeRefAccess().getGroup()); }
(rule__NodeRef__Group__0)
{ after(grammarAccess.getNodeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContextRef
entryRuleContextRef 
:
{ before(grammarAccess.getContextRefRule()); }
	 ruleContextRef
{ after(grammarAccess.getContextRefRule()); } 
	 EOF 
;

// Rule ContextRef
ruleContextRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContextRefAccess().getGroup()); }
(rule__ContextRef__Group__0)
{ after(grammarAccess.getContextRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryRef
entryRulePrimaryRef 
:
{ before(grammarAccess.getPrimaryRefRule()); }
	 rulePrimaryRef
{ after(grammarAccess.getPrimaryRefRule()); } 
	 EOF 
;

// Rule PrimaryRef
rulePrimaryRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryRefAccess().getGroup()); }
(rule__PrimaryRef__Group__0)
{ after(grammarAccess.getPrimaryRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorRef
entryRuleOperatorRef 
:
{ before(grammarAccess.getOperatorRefRule()); }
	 ruleOperatorRef
{ after(grammarAccess.getOperatorRefRule()); } 
	 EOF 
;

// Rule OperatorRef
ruleOperatorRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorRefAccess().getGroup()); }
(rule__OperatorRef__Group__0)
{ after(grammarAccess.getOperatorRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLeafReference
entryRuleLeafReference 
:
{ before(grammarAccess.getLeafReferenceRule()); }
	 ruleLeafReference
{ after(grammarAccess.getLeafReferenceRule()); } 
	 EOF 
;

// Rule LeafReference
ruleLeafReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLeafReferenceAccess().getAlternatives()); }
(rule__LeafReference__Alternatives)
{ after(grammarAccess.getLeafReferenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleResourceRef
entryRuleResourceRef 
:
{ before(grammarAccess.getResourceRefRule()); }
	 ruleResourceRef
{ after(grammarAccess.getResourceRefRule()); } 
	 EOF 
;

// Rule ResourceRef
ruleResourceRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getResourceRefAccess().getGroup()); }
(rule__ResourceRef__Group__0)
{ after(grammarAccess.getResourceRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatusRef
entryRuleStatusRef 
:
{ before(grammarAccess.getStatusRefRule()); }
	 ruleStatusRef
{ after(grammarAccess.getStatusRefRule()); } 
	 EOF 
;

// Rule StatusRef
ruleStatusRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatusRefAccess().getGroup()); }
(rule__StatusRef__Group__0)
{ after(grammarAccess.getStatusRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRangeRef
entryRuleRangeRef 
:
{ before(grammarAccess.getRangeRefRule()); }
	 ruleRangeRef
{ after(grammarAccess.getRangeRefRule()); } 
	 EOF 
;

// Rule RangeRef
ruleRangeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRangeRefAccess().getGroup()); }
(rule__RangeRef__Group__0)
{ after(grammarAccess.getRangeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterval
entryRuleInterval 
:
{ before(grammarAccess.getIntervalRule()); }
	 ruleInterval
{ after(grammarAccess.getIntervalRule()); } 
	 EOF 
;

// Rule Interval
ruleInterval
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntervalAccess().getAlternatives()); }
(rule__Interval__Alternatives)
{ after(grammarAccess.getIntervalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLinkRef
entryRuleLinkRef 
:
{ before(grammarAccess.getLinkRefRule()); }
	 ruleLinkRef
{ after(grammarAccess.getLinkRefRule()); } 
	 EOF 
;

// Rule LinkRef
ruleLinkRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinkRefAccess().getGroup()); }
(rule__LinkRef__Group__0)
{ after(grammarAccess.getLinkRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule NativeFunction
ruleNativeFunction
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeFunctionAccess().getAlternatives()); }
(rule__NativeFunction__Alternatives)
{ after(grammarAccess.getNativeFunctionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule IntervalKind
ruleIntervalKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalKindAccess().getAlternatives()); }
(rule__IntervalKind__Alternatives)
{ after(grammarAccess.getIntervalKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ToleranceLevel
ruleToleranceLevel
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToleranceLevelAccess().getAlternatives()); }
(rule__ToleranceLevel__Alternatives)
{ after(grammarAccess.getToleranceLevelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueRange
ruleValueRange
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueRangeAccess().getAlternatives()); }
(rule__ValueRange__Alternatives)
{ after(grammarAccess.getValueRangeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ValueKind
ruleValueKind
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueKindAccess().getAlternatives()); }
(rule__ValueKind__Alternatives)
{ after(grammarAccess.getValueKindAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Mod__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModAccess().getFunctionsAssignment_2_0()); }
(rule__Mod__FunctionsAssignment_2_0)
{ after(grammarAccess.getModAccess().getFunctionsAssignment_2_0()); }
)
(
{ before(grammarAccess.getModAccess().getFunctionsAssignment_2_0()); }
(rule__Mod__FunctionsAssignment_2_0)*
{ after(grammarAccess.getModAccess().getFunctionsAssignment_2_0()); }
)
)

    |(
(
{ before(grammarAccess.getModAccess().getStatementsAssignment_2_1()); }
(rule__Mod__StatementsAssignment_2_1)
{ after(grammarAccess.getModAccess().getStatementsAssignment_2_1()); }
)
(
{ before(grammarAccess.getModAccess().getStatementsAssignment_2_1()); }
(rule__Mod__StatementsAssignment_2_1)*
{ after(grammarAccess.getModAccess().getStatementsAssignment_2_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_0()); }
(rule__Statement__Group_0__0)
{ after(grammarAccess.getStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_1()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBlockParserRuleCall_3()); }
	ruleBlock
{ after(grammarAccess.getStatementAccess().getBlockParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVariableStatementParserRuleCall_0_0_0()); }
	ruleVariableStatement
{ after(grammarAccess.getStatementAccess().getVariableStatementParserRuleCall_0_0_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0_0_1()); }
	ruleAssignmentStatement
{ after(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0_0_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getPlusAssignmentStatementParserRuleCall_0_0_2()); }
	rulePlusAssignmentStatement
{ after(grammarAccess.getStatementAccess().getPlusAssignmentStatementParserRuleCall_0_0_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReferenceAssignmentStatementParserRuleCall_0_0_3()); }
	ruleReferenceAssignmentStatement
{ after(grammarAccess.getStatementAccess().getReferenceAssignmentStatementParserRuleCall_0_0_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getExpressionAssignment_0_0_4()); }
(rule__Statement__ExpressionAssignment_0_0_4)
{ after(grammarAccess.getStatementAccess().getExpressionAssignment_0_0_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_0_5()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_0_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceAssignmentStatement__AssignmentRefAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefContextRefParserRuleCall_1_0_0()); }
	ruleContextRef
{ after(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefContextRefParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefNodeTypeRefParserRuleCall_1_0_1()); }
	ruleNodeTypeRef
{ after(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefNodeTypeRefParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getGroup_1_0_0()); }
(rule__Logical__Group_1_0_0__0)
{ after(grammarAccess.getLogicalAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getLogicalAccess().getGroup_1_0_1()); }
(rule__Logical__Group_1_0_1__0)
{ after(grammarAccess.getLogicalAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_1_0_0()); }
(rule__Equality__Group_1_0_0__0)
{ after(grammarAccess.getEqualityAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_1_0_1()); }
(rule__Equality__Group_1_0_1__0)
{ after(grammarAccess.getEqualityAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
(rule__Comparison__Group_1_0_0__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
(rule__Comparison__Group_1_0_1__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
(rule__Comparison__Group_1_0_2__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
(rule__Comparison__Group_1_0_3__0)
{ after(grammarAccess.getComparisonAccess().getGroup_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
(rule__Addition__Group_1_0_0__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
(rule__Addition__Group_1_0_1__0)
{ after(grammarAccess.getAdditionAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
(rule__Multiplication__Group_1_0_0__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
(rule__Multiplication__Group_1_0_1__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_1()); }
)

    |(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
(rule__Multiplication__Group_1_0_2__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getUnaryAccess().getPrimaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryAccess().getGroup_1()); }
(rule__Unary__Group_1__0)
{ after(grammarAccess.getUnaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getGroup_1_0_0()); }
(rule__Unary__Group_1_0_0__0)
{ after(grammarAccess.getUnaryAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryAccess().getGroup_1_0_1()); }
(rule__Unary__Group_1_0_1__0)
{ after(grammarAccess.getUnaryAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_0()); }

	'-' 

{ after(grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_0()); }
)

    |(
{ before(grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_1()); }

	'+' 

{ after(grammarAccess.getUnaryOperatorAccess().getPlusSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getRangeParserRuleCall_1()); }
	ruleRange
{ after(grammarAccess.getPrimaryExpressionAccess().getRangeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getNativeExpressionParserRuleCall_2()); }
	ruleNativeExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getNativeExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getReferenceParserRuleCall_3()); }
	ruleReference
{ after(grammarAccess.getPrimaryExpressionAccess().getReferenceParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_4()); }
	ruleFunctionCall
{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIndexedCallParserRuleCall_5()); }
	ruleIndexedCall
{ after(grammarAccess.getPrimaryExpressionAccess().getIndexedCallParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_6()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_1()); }
(rule__Literal__Group_1__0)
{ after(grammarAccess.getLiteralAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getConditionAssignment_1_1_0()); }
(rule__Literal__ConditionAssignment_1_1_0)
{ after(grammarAccess.getLiteralAccess().getConditionAssignment_1_1_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFalseKeyword_1_1_1()); }

	'false' 

{ after(grammarAccess.getLiteralAccess().getFalseKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getRangeAssignment_1_0()); }
(rule__NativeExpression__RangeAssignment_1_0)
{ after(grammarAccess.getNativeExpressionAccess().getRangeAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getNativeExpressionAccess().getRefAssignment_1_1()); }
(rule__NativeExpression__RefAssignment_1_1)
{ after(grammarAccess.getNativeExpressionAccess().getRefAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getNativeExpressionAccess().getVarAssignment_1_2()); }
(rule__NativeExpression__VarAssignment_1_2)
{ after(grammarAccess.getNativeExpressionAccess().getVarAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAccess().getContextRefParserRuleCall_0()); }
	ruleContextRef
{ after(grammarAccess.getReferenceAccess().getContextRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getReferenceAccess().getNodeTypeRefParserRuleCall_1()); }
	ruleNodeTypeRef
{ after(grammarAccess.getReferenceAccess().getNodeTypeRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getReferenceAccess().getNodeRefParserRuleCall_2()); }
	ruleNodeRef
{ after(grammarAccess.getReferenceAccess().getNodeRefParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getReferenceAccess().getParamRefParserRuleCall_3()); }
	ruleParamRef
{ after(grammarAccess.getReferenceAccess().getParamRefParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextRef__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextRefAccess().getPrimaryRefAssignment_2_0()); }
(rule__ContextRef__PrimaryRefAssignment_2_0)
{ after(grammarAccess.getContextRefAccess().getPrimaryRefAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getContextRefAccess().getRangeRefAssignment_2_1()); }
(rule__ContextRef__RangeRefAssignment_2_1)
{ after(grammarAccess.getContextRefAccess().getRangeRefAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getGroup_2_0()); }
(rule__OperatorRef__Group_2_0__0)
{ after(grammarAccess.getOperatorRefAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getOperatorRefAccess().getGroup_2_1()); }
(rule__OperatorRef__Group_2_1__0)
{ after(grammarAccess.getOperatorRefAccess().getGroup_2_1()); }
)

    |(
{ before(grammarAccess.getOperatorRefAccess().getPROFILEKeyword_2_2()); }

	'PROFILE' 

{ after(grammarAccess.getOperatorRefAccess().getPROFILEKeyword_2_2()); }
)

    |(
{ before(grammarAccess.getOperatorRefAccess().getSTATUSKeyword_2_3()); }

	'STATUS' 

{ after(grammarAccess.getOperatorRefAccess().getSTATUSKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LeafReference__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLeafReferenceAccess().getResourceRefParserRuleCall_0()); }
	ruleResourceRef
{ after(grammarAccess.getLeafReferenceAccess().getResourceRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLeafReferenceAccess().getLinkRefParserRuleCall_1()); }
	ruleLinkRef
{ after(grammarAccess.getLeafReferenceAccess().getLinkRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLeafReferenceAccess().getStatusRefParserRuleCall_2()); }
	ruleStatusRef
{ after(grammarAccess.getLeafReferenceAccess().getStatusRefParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceRef__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceRefAccess().getResourceAssignment_2_0()); }
(rule__ResourceRef__ResourceAssignment_2_0)
{ after(grammarAccess.getResourceRefAccess().getResourceAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getResourceRefAccess().getALLKeyword_2_1()); }

	'ALL' 

{ after(grammarAccess.getResourceRefAccess().getALLKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getIntervalAssignment_0()); }
(rule__Interval__IntervalAssignment_0)
{ after(grammarAccess.getIntervalAccess().getIntervalAssignment_0()); }
)

    |(
{ before(grammarAccess.getIntervalAccess().getKindAssignment_1()); }
(rule__Interval__KindAssignment_1)
{ after(grammarAccess.getIntervalAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeFunction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeFunctionAccess().getCOUNTEnumLiteralDeclaration_0()); }
(	'count()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getCOUNTEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNativeFunctionAccess().getSUMEnumLiteralDeclaration_1()); }
(	'sum()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getSUMEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getNativeFunctionAccess().getMINEnumLiteralDeclaration_2()); }
(	'min()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getMINEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getNativeFunctionAccess().getMAXEnumLiteralDeclaration_3()); }
(	'max()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getMAXEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getNativeFunctionAccess().getMEANEnumLiteralDeclaration_4()); }
(	'mean()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getMEANEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getNativeFunctionAccess().getDEVIATIONEnumLiteralDeclaration_5()); }
(	'deviation()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getDEVIATIONEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getNativeFunctionAccess().getERLANGBEnumLiteralDeclaration_6()); }
(	'erlangB()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getERLANGBEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getNativeFunctionAccess().getCLEAREnumLiteralDeclaration_7()); }
(	'clear()' 
)
{ after(grammarAccess.getNativeFunctionAccess().getCLEAREnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntervalKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalKindAccess().getMONTHEnumLiteralDeclaration_0()); }
(	'MONTH' 
)
{ after(grammarAccess.getIntervalKindAccess().getMONTHEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getIntervalKindAccess().getWEEKEnumLiteralDeclaration_1()); }
(	'WEEK' 
)
{ after(grammarAccess.getIntervalKindAccess().getWEEKEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getIntervalKindAccess().getDAYEnumLiteralDeclaration_2()); }
(	'DAY' 
)
{ after(grammarAccess.getIntervalKindAccess().getDAYEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getIntervalKindAccess().getHOUREnumLiteralDeclaration_3()); }
(	'HOUR' 
)
{ after(grammarAccess.getIntervalKindAccess().getHOUREnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ToleranceLevel__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToleranceLevelAccess().getREDEnumLiteralDeclaration_0()); }
(	'RED' 
)
{ after(grammarAccess.getToleranceLevelAccess().getREDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getToleranceLevelAccess().getAMBEREnumLiteralDeclaration_1()); }
(	'AMBER' 
)
{ after(grammarAccess.getToleranceLevelAccess().getAMBEREnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getToleranceLevelAccess().getGREENEnumLiteralDeclaration_2()); }
(	'GREEN' 
)
{ after(grammarAccess.getToleranceLevelAccess().getGREENEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getToleranceLevelAccess().getYELLOWEnumLiteralDeclaration_3()); }
(	'YELLOW' 
)
{ after(grammarAccess.getToleranceLevelAccess().getYELLOWEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueRange__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueRangeAccess().getMETRICEnumLiteralDeclaration_0()); }
(	'METRIC' 
)
{ after(grammarAccess.getValueRangeAccess().getMETRICEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getValueRangeAccess().getCAPEnumLiteralDeclaration_1()); }
(	'CAP' 
)
{ after(grammarAccess.getValueRangeAccess().getCAPEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getValueRangeAccess().getFORECASTEnumLiteralDeclaration_2()); }
(	'FORECAST' 
)
{ after(grammarAccess.getValueRangeAccess().getFORECASTEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getValueRangeAccess().getFORECAST_CAPEnumLiteralDeclaration_3()); }
(	'FORECAST_CAP' 
)
{ after(grammarAccess.getValueRangeAccess().getFORECAST_CAPEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getValueRangeAccess().getTRENDEDEnumLiteralDeclaration_4()); }
(	'TRENDED' 
)
{ after(grammarAccess.getValueRangeAccess().getTRENDEDEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getValueRangeAccess().getUTILIZATIONEnumLiteralDeclaration_5()); }
(	'UTILIZATION' 
)
{ after(grammarAccess.getValueRangeAccess().getUTILIZATIONEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getValueRangeAccess().getTOLERANCEEnumLiteralDeclaration_6()); }
(	'TOLERANCE' 
)
{ after(grammarAccess.getValueRangeAccess().getTOLERANCEEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getValueRangeAccess().getDERIVEDEnumLiteralDeclaration_7()); }
(	'DERIVED' 
)
{ after(grammarAccess.getValueRangeAccess().getDERIVEDEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueKind__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueKindAccess().getAVGEnumLiteralDeclaration_0()); }
(	'AVG' 
)
{ after(grammarAccess.getValueKindAccess().getAVGEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getValueKindAccess().getBHEnumLiteralDeclaration_1()); }
(	'BH' 
)
{ after(grammarAccess.getValueKindAccess().getBHEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Mod__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__0__Impl
	rule__Mod__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getGroup_0()); }
(rule__Mod__Group_0__0)?
{ after(grammarAccess.getModAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__1__Impl
	rule__Mod__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getImportsAssignment_1()); }
(rule__Mod__ImportsAssignment_1)*
{ after(grammarAccess.getModAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getAlternatives_2()); }
(rule__Mod__Alternatives_2)
{ after(grammarAccess.getModAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Mod__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group_0__0__Impl
	rule__Mod__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getModKeyword_0_0()); }

	'mod' 

{ after(grammarAccess.getModAccess().getModKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Mod__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Mod__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getNameAssignment_0_1()); }
(rule__Mod__NameAssignment_0_1)
{ after(grammarAccess.getModAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDefKeyword_0()); }

	'def' 

{ after(grammarAccess.getFunctionAccess().getDefKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
(rule__Function__NameAssignment_1)
{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3()); }
(rule__Function__Group_3__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getBlockAssignment_5()); }
(rule__Function__BlockAssignment_5)
{ after(grammarAccess.getFunctionAccess().getBlockAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Function__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__0__Impl
	rule__Function__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsAssignment_3_0()); }
(rule__Function__ArgsAssignment_3_0)
{ after(grammarAccess.getFunctionAccess().getArgsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_3_1()); }
(rule__Function__Group_3_1__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_1__0__Impl
	rule__Function__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsAssignment_3_1_1()); }
(rule__Function__ArgsAssignment_3_1_1)
{ after(grammarAccess.getFunctionAccess().getArgsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
(rule__Block__StatementsAssignment_2)*
{ after(grammarAccess.getBlockAccess().getStatementsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Statement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAlternatives_0_0()); }
(rule__Statement__Alternatives_0_0)
{ after(grammarAccess.getStatementAccess().getAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnAction_0()); }
(

)
{ after(grammarAccess.getReturnStatementAccess().getReturnAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
(rule__ReturnStatement__ExpressionAssignment_2)?
{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfAction_0()); }
(

)
{ after(grammarAccess.getIfStatementAccess().getIfAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfAssignment_3()); }
(rule__IfStatement__IfAssignment_3)
{ after(grammarAccess.getIfStatementAccess().getIfAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__5__Impl
	rule__IfStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getThenAssignment_5()); }
(rule__IfStatement__ThenAssignment_5)
{ after(grammarAccess.getIfStatementAccess().getThenAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_6()); }
(rule__IfStatement__Group_6__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IfStatement__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__0__Impl
	rule__IfStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseAssignment_6_1()); }
(rule__IfStatement__ElseAssignment_6_1)
{ after(grammarAccess.getIfStatementAccess().getElseAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileAction_0()); }
(

)
{ after(grammarAccess.getWhileStatementAccess().getWhileAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getPredicateAssignment_3()); }
(rule__WhileStatement__PredicateAssignment_3)
{ after(grammarAccess.getWhileStatementAccess().getPredicateAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__4__Impl
	rule__WhileStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyAssignment_5()); }
(rule__WhileStatement__BodyAssignment_5)
{ after(grammarAccess.getWhileStatementAccess().getBodyAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__VariableStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group__0__Impl
	rule__VariableStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getVariableAction_0()); }
(

)
{ after(grammarAccess.getVariableStatementAccess().getVariableAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group__1__Impl
	rule__VariableStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getVarKeyword_1()); }

	'var' 

{ after(grammarAccess.getVariableStatementAccess().getVarKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group__2__Impl
	rule__VariableStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getNameAssignment_2()); }
(rule__VariableStatement__NameAssignment_2)
{ after(grammarAccess.getVariableStatementAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getGroup_3()); }
(rule__VariableStatement__Group_3__0)?
{ after(grammarAccess.getVariableStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VariableStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group_3__0__Impl
	rule__VariableStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getEqualsSignKeyword_3_0()); }

	'=' 

{ after(grammarAccess.getVariableStatementAccess().getEqualsSignKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getExpressionAssignment_3_1()); }
(rule__VariableStatement__ExpressionAssignment_3_1)
{ after(grammarAccess.getVariableStatementAccess().getExpressionAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__0__Impl
	rule__AssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getAssignmentAction_0()); }
(

)
{ after(grammarAccess.getAssignmentStatementAccess().getAssignmentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__1__Impl
	rule__AssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getVarAssignment_1()); }
(rule__AssignmentStatement__VarAssignment_1)
{ after(grammarAccess.getAssignmentStatementAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__2__Impl
	rule__AssignmentStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAssignmentStatementAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getExpressionAssignment_3()); }
(rule__AssignmentStatement__ExpressionAssignment_3)
{ after(grammarAccess.getAssignmentStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PlusAssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusAssignmentStatement__Group__0__Impl
	rule__PlusAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusAssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getPlusAssignmentAction_0()); }
(

)
{ after(grammarAccess.getPlusAssignmentStatementAccess().getPlusAssignmentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusAssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusAssignmentStatement__Group__1__Impl
	rule__PlusAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusAssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getVarAssignment_1()); }
(rule__PlusAssignmentStatement__VarAssignment_1)
{ after(grammarAccess.getPlusAssignmentStatementAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusAssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusAssignmentStatement__Group__2__Impl
	rule__PlusAssignmentStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusAssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getPlusSignEqualsSignKeyword_2()); }

	'+=' 

{ after(grammarAccess.getPlusAssignmentStatementAccess().getPlusSignEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusAssignmentStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusAssignmentStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusAssignmentStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getExpressionAssignment_3()); }
(rule__PlusAssignmentStatement__ExpressionAssignment_3)
{ after(grammarAccess.getPlusAssignmentStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ReferenceAssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceAssignmentStatement__Group__0__Impl
	rule__ReferenceAssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceAssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getRefAssignmentAction_0()); }
(

)
{ after(grammarAccess.getReferenceAssignmentStatementAccess().getRefAssignmentAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceAssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceAssignmentStatement__Group__1__Impl
	rule__ReferenceAssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceAssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefAssignment_1()); }
(rule__ReferenceAssignmentStatement__AssignmentRefAssignment_1)
{ after(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceAssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceAssignmentStatement__Group__2__Impl
	rule__ReferenceAssignmentStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceAssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getReferenceAssignmentStatementAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReferenceAssignmentStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReferenceAssignmentStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceAssignmentStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getExpressionAssignment_3()); }
(rule__ReferenceAssignmentStatement__ExpressionAssignment_3)
{ after(grammarAccess.getReferenceAssignmentStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Logical__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group__0__Impl
	rule__Logical__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getEqualityParserRuleCall_0()); }
	ruleEquality
{ after(grammarAccess.getLogicalAccess().getEqualityParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getGroup_1()); }
(rule__Logical__Group_1__0)*
{ after(grammarAccess.getLogicalAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1__0__Impl
	rule__Logical__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getAlternatives_1_0()); }
(rule__Logical__Alternatives_1_0)
{ after(grammarAccess.getLogicalAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getRightAssignment_1_1()); }
(rule__Logical__RightAssignment_1_1)
{ after(grammarAccess.getLogicalAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_0__0__Impl
	rule__Logical__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getAndLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getLogicalAccess().getAndLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getAmpersandAmpersandKeyword_1_0_0_1()); }

	'&&' 

{ after(grammarAccess.getLogicalAccess().getAmpersandAmpersandKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_1__0__Impl
	rule__Logical__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getOrLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getLogicalAccess().getOrLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getVerticalLineVerticalLineKeyword_1_0_1_1()); }

	'||' 

{ after(grammarAccess.getLogicalAccess().getVerticalLineVerticalLineKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__0__Impl
	rule__Equality__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
{ after(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
(rule__Equality__Group_1__0)*
{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getAlternatives_1_0()); }
(rule__Equality__Alternatives_1_0)
{ after(grammarAccess.getEqualityAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_1()); }
(rule__Equality__RightAssignment_1_1)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_0__0__Impl
	rule__Equality__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getEqualLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_0_1()); }

	'==' 

{ after(grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_1__0__Impl
	rule__Equality__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getUnequalLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getUnequalLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1()); }

	'!=' 

{ after(grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
	ruleAddition
{ after(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)*
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
(rule__Comparison__Alternatives_1_0)
{ after(grammarAccess.getComparisonAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
(rule__Comparison__RightAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLesserLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getLesserLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1()); }

	'<' 

{ after(grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_1__0__Impl
	rule__Comparison__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLesserEqualLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getLesserEqualLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1()); }

	'<=' 

{ after(grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_2__0__Impl
	rule__Comparison__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getGreaterLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_1()); }

	'>' 

{ after(grammarAccess.getComparisonAccess().getGreaterThanSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1_0_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_3__0__Impl
	rule__Comparison__Group_1_0_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterEqualLeftAction_1_0_3_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getGreaterEqualLeftAction_1_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1_0_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_3_1()); }

	'>=' 

{ after(grammarAccess.getComparisonAccess().getGreaterThanSignEqualsSignKeyword_1_0_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
(rule__Addition__Alternatives_1_0)
{ after(grammarAccess.getAdditionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
(rule__Addition__RightAssignment_1_1)
{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__0__Impl
	rule__Addition__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__0__Impl
	rule__Addition__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getUnaryParserRuleCall_0()); }
	ruleUnary
{ after(grammarAccess.getMultiplicationAccess().getUnaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
(rule__Multiplication__Alternatives_1_0)
{ after(grammarAccess.getMultiplicationAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
(rule__Multiplication__RightAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__0__Impl
	rule__Multiplication__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }

	'*' 

{ after(grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__0__Impl
	rule__Multiplication__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }

	'/' 

{ after(grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__0__Impl
	rule__Multiplication__Group_1_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getModuloLeftAction_1_0_2_0()); }
(

)
{ after(grammarAccess.getMultiplicationAccess().getModuloLeftAction_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }

	'%' 

{ after(grammarAccess.getMultiplicationAccess().getPercentSignKeyword_1_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1__0__Impl
	rule__Unary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getAlternatives_1_0()); }
(rule__Unary__Alternatives_1_0)
{ after(grammarAccess.getUnaryAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getRightAssignment_1_1()); }
(rule__Unary__RightAssignment_1_1)
{ after(grammarAccess.getUnaryAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unary__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_0__0__Impl
	rule__Unary__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getNegationAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getUnaryAccess().getNegationAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpAssignment_1_0_0_1()); }
(rule__Unary__OpAssignment_1_0_0_1)
{ after(grammarAccess.getUnaryAccess().getOpAssignment_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Unary__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_1__0__Impl
	rule__Unary__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getUnaryPlusMinusAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getUnaryAccess().getUnaryPlusMinusAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unary__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unary__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpAssignment_1_0_1_1()); }
(rule__Unary__OpAssignment_1_0_1_1)
{ after(grammarAccess.getUnaryAccess().getOpAssignment_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_1__0__Impl
	rule__Literal__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives_1_1()); }
(rule__Literal__Alternatives_1_1)
{ after(grammarAccess.getLiteralAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NumberLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberLiteral__Group__0__Impl
	rule__NumberLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0()); }
(

)
{ after(grammarAccess.getNumberLiteralAccess().getNumberLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NumberLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment_1()); }
(rule__NumberLiteral__ValueAssignment_1)
{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
(

)
{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFuncAssignment_1()); }
(rule__FunctionCall__FuncAssignment_1)
{ after(grammarAccess.getFunctionCallAccess().getFuncAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
(rule__FunctionCall__Group_3__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__FunctionCall__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0()); }
(rule__FunctionCall__ArgsAssignment_3_0)
{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
(rule__FunctionCall__Group_3_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3_1__0__Impl
	rule__FunctionCall__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1()); }
(rule__FunctionCall__ArgsAssignment_3_1_1)
{ after(grammarAccess.getFunctionCallAccess().getArgsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndexedCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexedCall__Group__0__Impl
	rule__IndexedCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedCallAccess().getVarOrArgumentCallParserRuleCall_0()); }
	ruleVarOrArgumentCall
{ after(grammarAccess.getIndexedCallAccess().getVarOrArgumentCallParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexedCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexedCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedCallAccess().getGroup_1()); }
(rule__IndexedCall__Group_1__0)?
{ after(grammarAccess.getIndexedCallAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IndexedCall__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexedCall__Group_1__0__Impl
	rule__IndexedCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedCall__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedCallAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getIndexedCallAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexedCall__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexedCall__Group_1__1__Impl
	rule__IndexedCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedCall__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedCallAccess().getIndexAssignment_1_1()); }
(rule__IndexedCall__IndexAssignment_1_1)
{ after(grammarAccess.getIndexedCallAccess().getIndexAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IndexedCall__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IndexedCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedCall__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedCallAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getIndexedCallAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeExpression__Group__0__Impl
	rule__NativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getNativeExpressionAction_0()); }
(

)
{ after(grammarAccess.getNativeExpressionAccess().getNativeExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeExpression__Group__1__Impl
	rule__NativeExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getAlternatives_1()); }
(rule__NativeExpression__Alternatives_1)
{ after(grammarAccess.getNativeExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeExpression__Group__2__Impl
	rule__NativeExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getNativeExpressionAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NativeExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NativeExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getNativeFunctionAssignment_3()); }
(rule__NativeExpression__NativeFunctionAssignment_3)
{ after(grammarAccess.getNativeExpressionAccess().getNativeFunctionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VarOrArgumentCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarOrArgumentCall__Group__0__Impl
	rule__VarOrArgumentCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOrArgumentCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getVarOrArgumentCallAction_0()); }
(

)
{ after(grammarAccess.getVarOrArgumentCallAccess().getVarOrArgumentCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarOrArgumentCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarOrArgumentCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarOrArgumentCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getCallAssignment_1()); }
(rule__VarOrArgumentCall__CallAssignment_1)
{ after(grammarAccess.getVarOrArgumentCallAccess().getCallAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group__0__Impl
	rule__RangeLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); }
(

)
{ after(grammarAccess.getRangeLiteralAccess().getRangeLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group__1__Impl
	rule__RangeLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getRangeLiteralAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group__2__Impl
	rule__RangeLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getGroup_2()); }
(rule__RangeLiteral__Group_2__0)?
{ after(grammarAccess.getRangeLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getRangeLiteralAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__RangeLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group_2__0__Impl
	rule__RangeLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getValuesAssignment_2_0()); }
(rule__RangeLiteral__ValuesAssignment_2_0)
{ after(grammarAccess.getRangeLiteralAccess().getValuesAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); }
(rule__RangeLiteral__Group_2_1__0)*
{ after(grammarAccess.getRangeLiteralAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeLiteral__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group_2_1__0__Impl
	rule__RangeLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getRangeLiteralAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeLiteral__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getValuesAssignment_2_1_1()); }
(rule__RangeLiteral__ValuesAssignment_2_1_1)
{ after(grammarAccess.getRangeLiteralAccess().getValuesAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParamRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamRef__Group__0__Impl
	rule__ParamRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamRefAccess().getParamRefAction_0()); }
(

)
{ after(grammarAccess.getParamRefAccess().getParamRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamRef__Group__1__Impl
	rule__ParamRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamRefAccess().getPARAMKeyword_1()); }

	'PARAM' 

{ after(grammarAccess.getParamRefAccess().getPARAMKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParamRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParamRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamRefAccess().getParamAssignment_2()); }
(rule__ParamRef__ParamAssignment_2)
{ after(grammarAccess.getParamRefAccess().getParamAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__NodeTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeTypeRef__Group__0__Impl
	rule__NodeTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeRefAccess().getNodeTypeRefAction_0()); }
(

)
{ after(grammarAccess.getNodeTypeRefAccess().getNodeTypeRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeTypeRef__Group__1__Impl
	rule__NodeTypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeRefAccess().getNETYPEKeyword_1()); }

	'NETYPE' 

{ after(grammarAccess.getNodeTypeRefAccess().getNETYPEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeTypeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeTypeRef__Group__2__Impl
	rule__NodeTypeRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeRefAccess().getNodetypeAssignment_2()); }
(rule__NodeTypeRef__NodetypeAssignment_2)
{ after(grammarAccess.getNodeTypeRefAccess().getNodetypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeTypeRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeTypeRef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeRefAccess().getPrimaryRefAssignment_3()); }
(rule__NodeTypeRef__PrimaryRefAssignment_3)
{ after(grammarAccess.getNodeTypeRefAccess().getPrimaryRefAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NodeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeRef__Group__0__Impl
	rule__NodeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeRefAccess().getNodeRefAction_0()); }
(

)
{ after(grammarAccess.getNodeRefAccess().getNodeRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeRef__Group__1__Impl
	rule__NodeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeRefAccess().getNEKeyword_1()); }

	'NE' 

{ after(grammarAccess.getNodeRefAccess().getNEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeRef__Group__2__Impl
	rule__NodeRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeRefAccess().getNodeAssignment_2()); }
(rule__NodeRef__NodeAssignment_2)
{ after(grammarAccess.getNodeRefAccess().getNodeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NodeRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NodeRef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeRefAccess().getPrimaryRefAssignment_3()); }
(rule__NodeRef__PrimaryRefAssignment_3)
{ after(grammarAccess.getNodeRefAccess().getPrimaryRefAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ContextRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextRef__Group__0__Impl
	rule__ContextRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextRefAccess().getContextRefAction_0()); }
(

)
{ after(grammarAccess.getContextRefAccess().getContextRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextRef__Group__1__Impl
	rule__ContextRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextRefAccess().getThisKeyword_1()); }

	'this' 

{ after(grammarAccess.getContextRefAccess().getThisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContextRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContextRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContextRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextRefAccess().getAlternatives_2()); }
(rule__ContextRef__Alternatives_2)
{ after(grammarAccess.getContextRefAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PrimaryRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryRef__Group__0__Impl
	rule__PrimaryRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPrimaryRefAccess().getComponentsAssignment_0()); }
(rule__PrimaryRef__ComponentsAssignment_0)
{ after(grammarAccess.getPrimaryRefAccess().getComponentsAssignment_0()); }
)
(
{ before(grammarAccess.getPrimaryRefAccess().getComponentsAssignment_0()); }
(rule__PrimaryRef__ComponentsAssignment_0)*
{ after(grammarAccess.getPrimaryRefAccess().getComponentsAssignment_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryRefAccess().getGroup_1()); }
(rule__PrimaryRef__Group_1__0)?
{ after(grammarAccess.getPrimaryRefAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrimaryRef__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryRef__Group_1__0__Impl
	rule__PrimaryRef__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryRef__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryRefAccess().getHyphenMinusGreaterThanSignKeyword_1_0()); }

	'->' 

{ after(grammarAccess.getPrimaryRefAccess().getHyphenMinusGreaterThanSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryRef__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrimaryRef__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryRef__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryRefAccess().getLeafRefAssignment_1_1()); }
(rule__PrimaryRef__LeafRefAssignment_1_1)
{ after(grammarAccess.getPrimaryRefAccess().getLeafRefAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorRef__Group__0__Impl
	rule__OperatorRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getOperatorRefAction_0()); }
(

)
{ after(grammarAccess.getOperatorRefAccess().getOperatorRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorRef__Group__1__Impl
	rule__OperatorRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getOperatorRefAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getAlternatives_2()); }
(rule__OperatorRef__Alternatives_2)
{ after(grammarAccess.getOperatorRefAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperatorRef__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorRef__Group_2_0__0__Impl
	rule__OperatorRef__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getFUNCTIONKeyword_2_0_0()); }

	'FUNCTION' 

{ after(grammarAccess.getOperatorRefAccess().getFUNCTIONKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorRef__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorRef__Group_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getFunctionAssignment_2_0_1()); }
(rule__OperatorRef__FunctionAssignment_2_0_1)
{ after(grammarAccess.getOperatorRefAccess().getFunctionAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorRef__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorRef__Group_2_1__0__Impl
	rule__OperatorRef__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getEQUIPMENTKeyword_2_1_0()); }

	'EQUIPMENT' 

{ after(grammarAccess.getOperatorRefAccess().getEQUIPMENTKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorRef__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorRef__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getEquipmentAssignment_2_1_1()); }
(rule__OperatorRef__EquipmentAssignment_2_1_1)
{ after(grammarAccess.getOperatorRefAccess().getEquipmentAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ResourceRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceRef__Group__0__Impl
	rule__ResourceRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceRefAccess().getResourceRefAction_0()); }
(

)
{ after(grammarAccess.getResourceRefAccess().getResourceRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceRef__Group__1__Impl
	rule__ResourceRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceRefAccess().getRESOURCEKeyword_1()); }

	'RESOURCE' 

{ after(grammarAccess.getResourceRefAccess().getRESOURCEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceRef__Group__2__Impl
	rule__ResourceRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceRefAccess().getAlternatives_2()); }
(rule__ResourceRef__Alternatives_2)
{ after(grammarAccess.getResourceRefAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ResourceRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ResourceRef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceRefAccess().getRangeRefAssignment_3()); }
(rule__ResourceRef__RangeRefAssignment_3)
{ after(grammarAccess.getResourceRefAccess().getRangeRefAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StatusRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatusRef__Group__0__Impl
	rule__StatusRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatusRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatusRefAccess().getStatusRefAction_0()); }
(

)
{ after(grammarAccess.getStatusRefAccess().getStatusRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StatusRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StatusRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatusRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatusRefAccess().getTolerancelevelAssignment_1()); }
(rule__StatusRef__TolerancelevelAssignment_1)
{ after(grammarAccess.getStatusRefAccess().getTolerancelevelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RangeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeRef__Group__0__Impl
	rule__RangeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeRefAccess().getValuerangeAssignment_0()); }
(rule__RangeRef__ValuerangeAssignment_0)
{ after(grammarAccess.getRangeRefAccess().getValuerangeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeRef__Group__1__Impl
	rule__RangeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeRefAccess().getKindAssignment_1()); }
(rule__RangeRef__KindAssignment_1)?
{ after(grammarAccess.getRangeRefAccess().getKindAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RangeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RangeRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeRefAccess().getIntervalAssignment_2()); }
(rule__RangeRef__IntervalAssignment_2)?
{ after(grammarAccess.getRangeRefAccess().getIntervalAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LinkRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkRef__Group__0__Impl
	rule__LinkRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkRefAccess().getLinkRefAction_0()); }
(

)
{ after(grammarAccess.getLinkRefAccess().getLinkRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkRef__Group__1__Impl
	rule__LinkRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkRefAccess().getLINKKeyword_1()); }

	'LINK' 

{ after(grammarAccess.getLinkRefAccess().getLINKKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkRef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkRefAccess().getLinkAssignment_2()); }
(rule__LinkRef__LinkAssignment_2)
{ after(grammarAccess.getLinkRefAccess().getLinkAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Mod__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getNameIDTerminalRuleCall_0_1_0()); }
	RULE_ID{ after(grammarAccess.getModAccess().getNameIDTerminalRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getImportsImportParserRuleCall_1_0()); }
	ruleImport{ after(grammarAccess.getModAccess().getImportsImportParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__FunctionsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getFunctionsFunctionParserRuleCall_2_0_0()); }
	ruleFunction{ after(grammarAccess.getModAccess().getFunctionsFunctionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mod__StatementsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModAccess().getStatementsStatementParserRuleCall_2_1_0()); }
	ruleStatement{ after(grammarAccess.getModAccess().getStatementsStatementParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_0_0()); }
	ruleArgument{ after(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_1_1_0()); }
	ruleArgument{ after(grammarAccess.getFunctionAccess().getArgsArgumentParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__BlockAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_5_0()); }
	ruleBlock{ after(grammarAccess.getFunctionAccess().getBlockBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Argument__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getArgumentAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ExpressionAssignment_0_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_0_0_4_0()); }
	ruleExpression{ after(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_0_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__IfAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfLogicalParserRuleCall_3_0()); }
	ruleLogical{ after(grammarAccess.getIfStatementAccess().getIfLogicalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ThenAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getThenBlockParserRuleCall_5_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getThenBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBlockParserRuleCall_6_1_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getElseBlockParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__PredicateAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getPredicateLogicalParserRuleCall_3_0()); }
	ruleLogical{ after(grammarAccess.getWhileStatementAccess().getPredicateLogicalParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__BodyAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getBodyBlockParserRuleCall_5_0()); }
	ruleBlock{ after(grammarAccess.getWhileStatementAccess().getBodyBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVariableStatementAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__ExpressionAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableStatementAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getVariableStatementAccess().getExpressionExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getVarAbstractVarOrArgumentCrossReference_1_0()); }
(
{ before(grammarAccess.getAssignmentStatementAccess().getVarAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentStatementAccess().getVarAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getAssignmentStatementAccess().getVarAbstractVarOrArgumentCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusAssignmentStatement__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getVarAbstractVarOrArgumentCrossReference_1_0()); }
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getVarAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPlusAssignmentStatementAccess().getVarAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getPlusAssignmentStatementAccess().getVarAbstractVarOrArgumentCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusAssignmentStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getPlusAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceAssignmentStatement__AssignmentRefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefAlternatives_1_0()); }
(rule__ReferenceAssignmentStatement__AssignmentRefAlternatives_1_0)
{ after(grammarAccess.getReferenceAssignmentStatementAccess().getAssignmentRefAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReferenceAssignmentStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReferenceAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getReferenceAssignmentStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Logical__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogicalAccess().getRightEqualityParserRuleCall_1_1_0()); }
	ruleEquality{ after(grammarAccess.getLogicalAccess().getRightEqualityParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_0()); }
	ruleComparison{ after(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); }
	ruleAddition{ after(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
	ruleMultiplication{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightUnaryParserRuleCall_1_1_0()); }
	ruleUnary{ after(grammarAccess.getMultiplicationAccess().getRightUnaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OpAssignment_1_0_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }
(
{ before(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }

	'!' 

{ after(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }
)

{ after(grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_0_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__OpAssignment_1_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getOpUnaryOperatorParserRuleCall_1_0_1_1_0()); }
	ruleUnaryOperator{ after(grammarAccess.getUnaryAccess().getOpUnaryOperatorParserRuleCall_1_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unary__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryAccess().getRightUnaryParserRuleCall_1_1_0()); }
	ruleUnary{ after(grammarAccess.getUnaryAccess().getRightUnaryParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ConditionAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getConditionTrueKeyword_1_1_0_0()); }
(
{ before(grammarAccess.getLiteralAccess().getConditionTrueKeyword_1_1_0_0()); }

	'true' 

{ after(grammarAccess.getLiteralAccess().getConditionTrueKeyword_1_1_0_0()); }
)

{ after(grammarAccess.getLiteralAccess().getConditionTrueKeyword_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getValueNUMBERTerminalRuleCall_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getNumberLiteralAccess().getValueNUMBERTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FuncAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionCrossReference_1_0()); }
(
{ before(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getFunctionCallAccess().getFuncAbstractFunctionCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IndexedCall__IndexAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIndexedCallAccess().getIndexExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getIndexedCallAccess().getIndexExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__RangeAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getRangeRangeLiteralParserRuleCall_1_0_0()); }
	ruleRangeLiteral{ after(grammarAccess.getNativeExpressionAccess().getRangeRangeLiteralParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__RefAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getRefReferenceParserRuleCall_1_1_0()); }
	ruleReference{ after(grammarAccess.getNativeExpressionAccess().getRefReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__VarAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getVarVarOrArgumentCallParserRuleCall_1_2_0()); }
	ruleVarOrArgumentCall{ after(grammarAccess.getNativeExpressionAccess().getVarVarOrArgumentCallParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NativeExpression__NativeFunctionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNativeExpressionAccess().getNativeFunctionNativeFunctionEnumRuleCall_3_0()); }
	ruleNativeFunction{ after(grammarAccess.getNativeExpressionAccess().getNativeFunctionNativeFunctionEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarOrArgumentCall__CallAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentCrossReference_1_0()); }
(
{ before(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getVarOrArgumentCallAccess().getCallAbstractVarOrArgumentCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__ValuesAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getValuesNUMBERTerminalRuleCall_2_0_0()); }
	RULE_NUMBER{ after(grammarAccess.getRangeLiteralAccess().getValuesNUMBERTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeLiteral__ValuesAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeLiteralAccess().getValuesNUMBERTerminalRuleCall_2_1_1_0()); }
	RULE_NUMBER{ after(grammarAccess.getRangeLiteralAccess().getValuesNUMBERTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParamRef__ParamAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParamRefAccess().getParamParameterCrossReference_2_0()); }
(
{ before(grammarAccess.getParamRefAccess().getParamParameterIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getParamRefAccess().getParamParameterIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getParamRefAccess().getParamParameterCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeRef__NodetypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeRefAccess().getNodetypeNodeTypeCrossReference_2_0()); }
(
{ before(grammarAccess.getNodeTypeRefAccess().getNodetypeNodeTypeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeTypeRefAccess().getNodetypeNodeTypeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getNodeTypeRefAccess().getNodetypeNodeTypeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeTypeRef__PrimaryRefAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeTypeRefAccess().getPrimaryRefPrimaryRefParserRuleCall_3_0()); }
	rulePrimaryRef{ after(grammarAccess.getNodeTypeRefAccess().getPrimaryRefPrimaryRefParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeRef__NodeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeRefAccess().getNodeNodeCrossReference_2_0()); }
(
{ before(grammarAccess.getNodeRefAccess().getNodeNodeIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getNodeRefAccess().getNodeNodeIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getNodeRefAccess().getNodeNodeCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NodeRef__PrimaryRefAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeRefAccess().getPrimaryRefPrimaryRefParserRuleCall_3_0()); }
	rulePrimaryRef{ after(grammarAccess.getNodeRefAccess().getPrimaryRefPrimaryRefParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextRef__PrimaryRefAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextRefAccess().getPrimaryRefPrimaryRefParserRuleCall_2_0_0()); }
	rulePrimaryRef{ after(grammarAccess.getContextRefAccess().getPrimaryRefPrimaryRefParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ContextRef__RangeRefAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContextRefAccess().getRangeRefRangeRefParserRuleCall_2_1_0()); }
	ruleRangeRef{ after(grammarAccess.getContextRefAccess().getRangeRefRangeRefParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryRef__ComponentsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryRefAccess().getComponentsOperatorRefParserRuleCall_0_0()); }
	ruleOperatorRef{ after(grammarAccess.getPrimaryRefAccess().getComponentsOperatorRefParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryRef__LeafRefAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryRefAccess().getLeafRefLeafReferenceParserRuleCall_1_1_0()); }
	ruleLeafReference{ after(grammarAccess.getPrimaryRefAccess().getLeafRefLeafReferenceParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__FunctionAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getFunctionFunctionCrossReference_2_0_1_0()); }
(
{ before(grammarAccess.getOperatorRefAccess().getFunctionFunctionIDTerminalRuleCall_2_0_1_0_1()); }
	RULE_ID{ after(grammarAccess.getOperatorRefAccess().getFunctionFunctionIDTerminalRuleCall_2_0_1_0_1()); }
)
{ after(grammarAccess.getOperatorRefAccess().getFunctionFunctionCrossReference_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorRef__EquipmentAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorRefAccess().getEquipmentEquipmentCrossReference_2_1_1_0()); }
(
{ before(grammarAccess.getOperatorRefAccess().getEquipmentEquipmentIDTerminalRuleCall_2_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getOperatorRefAccess().getEquipmentEquipmentIDTerminalRuleCall_2_1_1_0_1()); }
)
{ after(grammarAccess.getOperatorRefAccess().getEquipmentEquipmentCrossReference_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceRef__ResourceAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceRefAccess().getResourceBaseResourceCrossReference_2_0_0()); }
(
{ before(grammarAccess.getResourceRefAccess().getResourceBaseResourceIDTerminalRuleCall_2_0_0_1()); }
	RULE_ID{ after(grammarAccess.getResourceRefAccess().getResourceBaseResourceIDTerminalRuleCall_2_0_0_1()); }
)
{ after(grammarAccess.getResourceRefAccess().getResourceBaseResourceCrossReference_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ResourceRef__RangeRefAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getResourceRefAccess().getRangeRefRangeRefParserRuleCall_3_0()); }
	ruleRangeRef{ after(grammarAccess.getResourceRefAccess().getRangeRefRangeRefParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatusRef__TolerancelevelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatusRefAccess().getTolerancelevelToleranceLevelEnumRuleCall_1_0()); }
	ruleToleranceLevel{ after(grammarAccess.getStatusRefAccess().getTolerancelevelToleranceLevelEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRef__ValuerangeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeRefAccess().getValuerangeValueRangeEnumRuleCall_0_0()); }
	ruleValueRange{ after(grammarAccess.getRangeRefAccess().getValuerangeValueRangeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRef__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeRefAccess().getKindValueKindEnumRuleCall_1_0()); }
	ruleValueKind{ after(grammarAccess.getRangeRefAccess().getKindValueKindEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RangeRef__IntervalAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRangeRefAccess().getIntervalIntervalParserRuleCall_2_0()); }
	ruleInterval{ after(grammarAccess.getRangeRefAccess().getIntervalIntervalParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__IntervalAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getIntervalNUMBERTerminalRuleCall_0_0()); }
	RULE_NUMBER{ after(grammarAccess.getIntervalAccess().getIntervalNUMBERTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interval__KindAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntervalAccess().getKindIntervalKindEnumRuleCall_1_0()); }
	ruleIntervalKind{ after(grammarAccess.getIntervalAccess().getKindIntervalKindEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LinkRef__LinkAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkRefAccess().getLinkRelationshipCrossReference_2_0()); }
(
{ before(grammarAccess.getLinkRefAccess().getLinkRelationshipIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getLinkRefAccess().getLinkRelationshipIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getLinkRefAccess().getLinkRelationshipCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NUMBER : ('0'..'9')* ('.' ('0'..'9')+)?;

RULE_INT : 'zzzzzzzzz';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


